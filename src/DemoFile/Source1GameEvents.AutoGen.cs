// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using DemoFile.Sdk;

namespace DemoFile;

public partial class Source1GameEvents
{
    public Action<Source1ServerSpawnEvent>? ServerSpawn { get; set; }
    public Action<Source1ServerPreShutdownEvent>? ServerPreShutdown { get; set; }
    public Action<Source1ServerShutdownEvent>? ServerShutdown { get; set; }
    public Action<Source1ServerMessageEvent>? ServerMessage { get; set; }
    public Action<Source1ServerCvarEvent>? ServerCvar { get; set; }
    public Action<Source1PlayerActivateEvent>? PlayerActivate { get; set; }
    public Action<Source1PlayerConnectFullEvent>? PlayerConnectFull { get; set; }
    public Action<Source1PlayerFullUpdateEvent>? PlayerFullUpdate { get; set; }
    public Action<Source1PlayerConnectEvent>? PlayerConnect { get; set; }
    public Action<Source1PlayerDisconnectEvent>? PlayerDisconnect { get; set; }
    public Action<Source1PlayerInfoEvent>? PlayerInfo { get; set; }
    public Action<Source1PlayerSpawnEvent>? PlayerSpawn { get; set; }
    public Action<Source1PlayerTeamEvent>? PlayerTeam { get; set; }
    public Action<Source1LocalPlayerTeamEvent>? LocalPlayerTeam { get; set; }
    public Action<Source1LocalPlayerControllerTeamEvent>? LocalPlayerControllerTeam { get; set; }
    public Action<Source1PlayerChangenameEvent>? PlayerChangename { get; set; }
    public Action<Source1PlayerHurtEvent>? PlayerHurt { get; set; }
    public Action<Source1PlayerChatEvent>? PlayerChat { get; set; }
    public Action<Source1LocalPlayerPawnChangedEvent>? LocalPlayerPawnChanged { get; set; }
    public Action<Source1TeamplayBroadcastAudioEvent>? TeamplayBroadcastAudio { get; set; }
    public Action<Source1FinaleStartEvent>? FinaleStart { get; set; }
    public Action<Source1PlayerStatsUpdatedEvent>? PlayerStatsUpdated { get; set; }
    public Action<Source1UserDataDownloadedEvent>? UserDataDownloaded { get; set; }
    public Action<Source1RagdollDissolvedEvent>? RagdollDissolved { get; set; }
    public Action<Source1TeamInfoEvent>? TeamInfo { get; set; }
    public Action<Source1TeamScoreEvent>? TeamScore { get; set; }
    public Action<Source1HltvCameramanEvent>? HltvCameraman { get; set; }
    public Action<Source1HltvChaseEvent>? HltvChase { get; set; }
    public Action<Source1HltvRankCameraEvent>? HltvRankCamera { get; set; }
    public Action<Source1HltvRankEntityEvent>? HltvRankEntity { get; set; }
    public Action<Source1HltvFixedEvent>? HltvFixed { get; set; }
    public Action<Source1HltvMessageEvent>? HltvMessage { get; set; }
    public Action<Source1HltvStatusEvent>? HltvStatus { get; set; }
    public Action<Source1HltvTitleEvent>? HltvTitle { get; set; }
    public Action<Source1HltvChatEvent>? HltvChat { get; set; }
    public Action<Source1HltvVersioninfoEvent>? HltvVersioninfo { get; set; }
    public Action<Source1HltvReplayEvent>? HltvReplay { get; set; }
    public Action<Source1HltvReplayStatusEvent>? HltvReplayStatus { get; set; }
    public Action<Source1DemoStopEvent>? DemoStop { get; set; }
    public Action<Source1MapShutdownEvent>? MapShutdown { get; set; }
    public Action<Source1MapTransitionEvent>? MapTransition { get; set; }
    public Action<Source1HostnameChangedEvent>? HostnameChanged { get; set; }
    public Action<Source1DifficultyChangedEvent>? DifficultyChanged { get; set; }
    public Action<Source1GameMessageEvent>? GameMessage { get; set; }
    public Action<Source1GameNewmapEvent>? GameNewmap { get; set; }
    public Action<Source1RoundStartEvent>? RoundStart { get; set; }
    public Action<Source1RoundEndEvent>? RoundEnd { get; set; }
    public Action<Source1RoundStartPreEntityEvent>? RoundStartPreEntity { get; set; }
    public Action<Source1RoundStartPostNavEvent>? RoundStartPostNav { get; set; }
    public Action<Source1RoundFreezeEndEvent>? RoundFreezeEnd { get; set; }
    public Action<Source1TeamplayRoundStartEvent>? TeamplayRoundStart { get; set; }
    public Action<Source1PlayerDeathEvent>? PlayerDeath { get; set; }
    public Action<Source1PlayerFootstepEvent>? PlayerFootstep { get; set; }
    public Action<Source1PlayerHintmessageEvent>? PlayerHintmessage { get; set; }
    public Action<Source1BreakBreakableEvent>? BreakBreakable { get; set; }
    public Action<Source1BrokenBreakableEvent>? BrokenBreakable { get; set; }
    public Action<Source1BreakPropEvent>? BreakProp { get; set; }
    public Action<Source1EntityKilledEvent>? EntityKilled { get; set; }
    public Action<Source1DoorCloseEvent>? DoorClose { get; set; }
    public Action<Source1VoteStartedEvent>? VoteStarted { get; set; }
    public Action<Source1VoteFailedEvent>? VoteFailed { get; set; }
    public Action<Source1VotePassedEvent>? VotePassed { get; set; }
    public Action<Source1VoteChangedEvent>? VoteChanged { get; set; }
    public Action<Source1VoteCastYesEvent>? VoteCastYes { get; set; }
    public Action<Source1VoteCastNoEvent>? VoteCastNo { get; set; }
    public Action<Source1AchievementEventEvent>? AchievementEvent { get; set; }
    public Action<Source1AchievementEarnedEvent>? AchievementEarned { get; set; }
    public Action<Source1AchievementWriteFailedEvent>? AchievementWriteFailed { get; set; }
    public Action<Source1BonusUpdatedEvent>? BonusUpdated { get; set; }
    public Action<Source1SpecTargetUpdatedEvent>? SpecTargetUpdated { get; set; }
    public Action<Source1SpecModeUpdatedEvent>? SpecModeUpdated { get; set; }
    public Action<Source1EntityVisibleEvent>? EntityVisible { get; set; }
    public Action<Source1GameinstructorDrawEvent>? GameinstructorDraw { get; set; }
    public Action<Source1GameinstructorNodrawEvent>? GameinstructorNodraw { get; set; }
    public Action<Source1FlareIgniteNpcEvent>? FlareIgniteNpc { get; set; }
    public Action<Source1HelicopterGrenadePuntMissEvent>? HelicopterGrenadePuntMiss { get; set; }
    public Action<Source1PhysgunPickupEvent>? PhysgunPickup { get; set; }
    public Action<Source1InventoryUpdatedEvent>? InventoryUpdated { get; set; }
    public Action<Source1CartUpdatedEvent>? CartUpdated { get; set; }
    public Action<Source1StorePricesheetUpdatedEvent>? StorePricesheetUpdated { get; set; }
    public Action<Source1ItemSchemaInitializedEvent>? ItemSchemaInitialized { get; set; }
    public Action<Source1DropRateModifiedEvent>? DropRateModified { get; set; }
    public Action<Source1EventTicketModifiedEvent>? EventTicketModified { get; set; }
    public Action<Source1GcConnectedEvent>? GcConnected { get; set; }
    public Action<Source1InstructorStartLessonEvent>? InstructorStartLesson { get; set; }
    public Action<Source1InstructorCloseLessonEvent>? InstructorCloseLesson { get; set; }
    public Action<Source1InstructorServerHintCreateEvent>? InstructorServerHintCreate { get; set; }
    public Action<Source1InstructorServerHintStopEvent>? InstructorServerHintStop { get; set; }
    public Action<Source1SetInstructorGroupEnabledEvent>? SetInstructorGroupEnabled { get; set; }
    public Action<Source1ClientsideLessonClosedEvent>? ClientsideLessonClosed { get; set; }
    public Action<Source1DynamicShadowLightChangedEvent>? DynamicShadowLightChanged { get; set; }
    public Action<Source1GameuiHiddenEvent>? GameuiHidden { get; set; }
    public Action<Source1ItemsGiftedEvent>? ItemsGifted { get; set; }
    public Action<Source1PlayerScoreEvent>? PlayerScore { get; set; }
    public Action<Source1PlayerShootEvent>? PlayerShoot { get; set; }
    public Action<Source1GameInitEvent>? GameInit { get; set; }
    public Action<Source1GameStartEvent>? GameStart { get; set; }
    public Action<Source1GameEndEvent>? GameEnd { get; set; }
    public Action<Source1RoundAnnounceMatchPointEvent>? RoundAnnounceMatchPoint { get; set; }
    public Action<Source1RoundAnnounceFinalEvent>? RoundAnnounceFinal { get; set; }
    public Action<Source1RoundAnnounceLastRoundHalfEvent>? RoundAnnounceLastRoundHalf { get; set; }
    public Action<Source1RoundAnnounceMatchStartEvent>? RoundAnnounceMatchStart { get; set; }
    public Action<Source1RoundAnnounceWarmupEvent>? RoundAnnounceWarmup { get; set; }
    public Action<Source1RoundEndUploadStatsEvent>? RoundEndUploadStats { get; set; }
    public Action<Source1RoundOfficiallyEndedEvent>? RoundOfficiallyEnded { get; set; }
    public Action<Source1RoundTimeWarningEvent>? RoundTimeWarning { get; set; }
    public Action<Source1UgcMapInfoReceivedEvent>? UgcMapInfoReceived { get; set; }
    public Action<Source1UgcMapUnsubscribedEvent>? UgcMapUnsubscribed { get; set; }
    public Action<Source1UgcMapDownloadErrorEvent>? UgcMapDownloadError { get; set; }
    public Action<Source1UgcFileDownloadFinishedEvent>? UgcFileDownloadFinished { get; set; }
    public Action<Source1UgcFileDownloadStartEvent>? UgcFileDownloadStart { get; set; }
    public Action<Source1BeginNewMatchEvent>? BeginNewMatch { get; set; }
    public Action<Source1DmBonusWeaponStartEvent>? DmBonusWeaponStart { get; set; }
    public Action<Source1SurvivalAnnouncePhaseEvent>? SurvivalAnnouncePhase { get; set; }
    public Action<Source1PlayerDecalEvent>? PlayerDecal { get; set; }
    public Action<Source1ReadGameTitledataEvent>? ReadGameTitledata { get; set; }
    public Action<Source1WriteGameTitledataEvent>? WriteGameTitledata { get; set; }
    public Action<Source1ResetGameTitledataEvent>? ResetGameTitledata { get; set; }
    public Action<Source1WeaponhudSelectionEvent>? WeaponhudSelection { get; set; }
    public Action<Source1VoteEndedEvent>? VoteEnded { get; set; }
    public Action<Source1VoteCastEvent>? VoteCast { get; set; }
    public Action<Source1VoteOptionsEvent>? VoteOptions { get; set; }
    public Action<Source1EndmatchMapvoteSelectingMapEvent>? EndmatchMapvoteSelectingMap { get; set; }
    public Action<Source1EndmatchCmmStartRevealItemsEvent>? EndmatchCmmStartRevealItems { get; set; }
    public Action<Source1ClientLoadoutChangedEvent>? ClientLoadoutChanged { get; set; }
    public Action<Source1AddPlayerSonarIconEvent>? AddPlayerSonarIcon { get; set; }
    public Action<Source1DoorOpenEvent>? DoorOpen { get; set; }
    public Action<Source1DoorClosedEvent>? DoorClosed { get; set; }
    public Action<Source1DoorBreakEvent>? DoorBreak { get; set; }
    public Action<Source1AddBulletHitMarkerEvent>? AddBulletHitMarker { get; set; }
    public Action<Source1OtherDeathEvent>? OtherDeath { get; set; }
    public Action<Source1ItemPurchaseEvent>? ItemPurchase { get; set; }
    public Action<Source1BombBeginplantEvent>? BombBeginplant { get; set; }
    public Action<Source1BombAbortplantEvent>? BombAbortplant { get; set; }
    public Action<Source1BombPlantedEvent>? BombPlanted { get; set; }
    public Action<Source1BombDefusedEvent>? BombDefused { get; set; }
    public Action<Source1BombExplodedEvent>? BombExploded { get; set; }
    public Action<Source1BombDroppedEvent>? BombDropped { get; set; }
    public Action<Source1BombPickupEvent>? BombPickup { get; set; }
    public Action<Source1DefuserDroppedEvent>? DefuserDropped { get; set; }
    public Action<Source1DefuserPickupEvent>? DefuserPickup { get; set; }
    public Action<Source1AnnouncePhaseEndEvent>? AnnouncePhaseEnd { get; set; }
    public Action<Source1CsIntermissionEvent>? CsIntermission { get; set; }
    public Action<Source1BombBegindefuseEvent>? BombBegindefuse { get; set; }
    public Action<Source1BombAbortdefuseEvent>? BombAbortdefuse { get; set; }
    public Action<Source1HostageFollowsEvent>? HostageFollows { get; set; }
    public Action<Source1HostageHurtEvent>? HostageHurt { get; set; }
    public Action<Source1HostageKilledEvent>? HostageKilled { get; set; }
    public Action<Source1HostageRescuedEvent>? HostageRescued { get; set; }
    public Action<Source1HostageStopsFollowingEvent>? HostageStopsFollowing { get; set; }
    public Action<Source1HostageRescuedAllEvent>? HostageRescuedAll { get; set; }
    public Action<Source1HostageCallForHelpEvent>? HostageCallForHelp { get; set; }
    public Action<Source1VipEscapedEvent>? VipEscaped { get; set; }
    public Action<Source1VipKilledEvent>? VipKilled { get; set; }
    public Action<Source1PlayerRadioEvent>? PlayerRadio { get; set; }
    public Action<Source1BombBeepEvent>? BombBeep { get; set; }
    public Action<Source1WeaponFireEvent>? WeaponFire { get; set; }
    public Action<Source1WeaponFireOnEmptyEvent>? WeaponFireOnEmpty { get; set; }
    public Action<Source1GrenadeThrownEvent>? GrenadeThrown { get; set; }
    public Action<Source1WeaponOutofammoEvent>? WeaponOutofammo { get; set; }
    public Action<Source1WeaponReloadEvent>? WeaponReload { get; set; }
    public Action<Source1WeaponZoomEvent>? WeaponZoom { get; set; }
    public Action<Source1SilencerDetachEvent>? SilencerDetach { get; set; }
    public Action<Source1InspectWeaponEvent>? InspectWeapon { get; set; }
    public Action<Source1WeaponZoomRifleEvent>? WeaponZoomRifle { get; set; }
    public Action<Source1PlayerSpawnedEvent>? PlayerSpawned { get; set; }
    public Action<Source1ItemPickupEvent>? ItemPickup { get; set; }
    public Action<Source1ItemPickupSlerpEvent>? ItemPickupSlerp { get; set; }
    public Action<Source1ItemPickupFailedEvent>? ItemPickupFailed { get; set; }
    public Action<Source1ItemRemoveEvent>? ItemRemove { get; set; }
    public Action<Source1AmmoPickupEvent>? AmmoPickup { get; set; }
    public Action<Source1ItemEquipEvent>? ItemEquip { get; set; }
    public Action<Source1EnterBuyzoneEvent>? EnterBuyzone { get; set; }
    public Action<Source1ExitBuyzoneEvent>? ExitBuyzone { get; set; }
    public Action<Source1BuytimeEndedEvent>? BuytimeEnded { get; set; }
    public Action<Source1EnterBombzoneEvent>? EnterBombzone { get; set; }
    public Action<Source1ExitBombzoneEvent>? ExitBombzone { get; set; }
    public Action<Source1EnterRescueZoneEvent>? EnterRescueZone { get; set; }
    public Action<Source1ExitRescueZoneEvent>? ExitRescueZone { get; set; }
    public Action<Source1SilencerOffEvent>? SilencerOff { get; set; }
    public Action<Source1SilencerOnEvent>? SilencerOn { get; set; }
    public Action<Source1BuymenuOpenEvent>? BuymenuOpen { get; set; }
    public Action<Source1BuymenuCloseEvent>? BuymenuClose { get; set; }
    public Action<Source1RoundPrestartEvent>? RoundPrestart { get; set; }
    public Action<Source1RoundPoststartEvent>? RoundPoststart { get; set; }
    public Action<Source1GrenadeBounceEvent>? GrenadeBounce { get; set; }
    public Action<Source1HegrenadeDetonateEvent>? HegrenadeDetonate { get; set; }
    public Action<Source1FlashbangDetonateEvent>? FlashbangDetonate { get; set; }
    public Action<Source1SmokegrenadeDetonateEvent>? SmokegrenadeDetonate { get; set; }
    public Action<Source1SmokegrenadeExpiredEvent>? SmokegrenadeExpired { get; set; }
    public Action<Source1MolotovDetonateEvent>? MolotovDetonate { get; set; }
    public Action<Source1DecoyDetonateEvent>? DecoyDetonate { get; set; }
    public Action<Source1DecoyStartedEvent>? DecoyStarted { get; set; }
    public Action<Source1TagrenadeDetonateEvent>? TagrenadeDetonate { get; set; }
    public Action<Source1InfernoStartburnEvent>? InfernoStartburn { get; set; }
    public Action<Source1InfernoExpireEvent>? InfernoExpire { get; set; }
    public Action<Source1InfernoExtinguishEvent>? InfernoExtinguish { get; set; }
    public Action<Source1DecoyFiringEvent>? DecoyFiring { get; set; }
    public Action<Source1BulletImpactEvent>? BulletImpact { get; set; }
    public Action<Source1PlayerJumpEvent>? PlayerJump { get; set; }
    public Action<Source1PlayerBlindEvent>? PlayerBlind { get; set; }
    public Action<Source1PlayerFalldamageEvent>? PlayerFalldamage { get; set; }
    public Action<Source1DoorMovingEvent>? DoorMoving { get; set; }
    public Action<Source1MbInputLockSuccessEvent>? MbInputLockSuccess { get; set; }
    public Action<Source1MbInputLockCancelEvent>? MbInputLockCancel { get; set; }
    public Action<Source1NavBlockedEvent>? NavBlocked { get; set; }
    public Action<Source1NavGenerateEvent>? NavGenerate { get; set; }
    public Action<Source1AchievementInfoLoadedEvent>? AchievementInfoLoaded { get; set; }
    public Action<Source1HltvChangedModeEvent>? HltvChangedMode { get; set; }
    public Action<Source1CsGameDisconnectedEvent>? CsGameDisconnected { get; set; }
    public Action<Source1CsRoundFinalBeepEvent>? CsRoundFinalBeep { get; set; }
    public Action<Source1CsRoundStartBeepEvent>? CsRoundStartBeep { get; set; }
    public Action<Source1CsWinPanelRoundEvent>? CsWinPanelRound { get; set; }
    public Action<Source1CsWinPanelMatchEvent>? CsWinPanelMatch { get; set; }
    public Action<Source1CsMatchEndRestartEvent>? CsMatchEndRestart { get; set; }
    public Action<Source1CsPreRestartEvent>? CsPreRestart { get; set; }
    public Action<Source1ShowDeathpanelEvent>? ShowDeathpanel { get; set; }
    public Action<Source1HideDeathpanelEvent>? HideDeathpanel { get; set; }
    public Action<Source1PlayerAvengedTeammateEvent>? PlayerAvengedTeammate { get; set; }
    public Action<Source1AchievementEarnedLocalEvent>? AchievementEarnedLocal { get; set; }
    public Action<Source1RepostXboxAchievementsEvent>? RepostXboxAchievements { get; set; }
    public Action<Source1MatchEndConditionsEvent>? MatchEndConditions { get; set; }
    public Action<Source1RoundMvpEvent>? RoundMvp { get; set; }
    public Action<Source1ShowSurvivalRespawnStatusEvent>? ShowSurvivalRespawnStatus { get; set; }
    public Action<Source1ClientDisconnectEvent>? ClientDisconnect { get; set; }
    public Action<Source1GgKilledEnemyEvent>? GgKilledEnemy { get; set; }
    public Action<Source1SwitchTeamEvent>? SwitchTeam { get; set; }
    public Action<Source1WriteProfileDataEvent>? WriteProfileData { get; set; }
    public Action<Source1TrialTimeExpiredEvent>? TrialTimeExpired { get; set; }
    public Action<Source1UpdateMatchmakingStatsEvent>? UpdateMatchmakingStats { get; set; }
    public Action<Source1PlayerResetVoteEvent>? PlayerResetVote { get; set; }
    public Action<Source1EnableRestartVotingEvent>? EnableRestartVoting { get; set; }
    public Action<Source1SfuieventEvent>? Sfuievent { get; set; }
    public Action<Source1StartVoteEvent>? StartVote { get; set; }
    public Action<Source1PlayerGivenC4Event>? PlayerGivenC4 { get; set; }
    public Action<Source1TrPlayerFlashbangedEvent>? TrPlayerFlashbanged { get; set; }
    public Action<Source1TrMarkCompleteEvent>? TrMarkComplete { get; set; }
    public Action<Source1TrMarkBestTimeEvent>? TrMarkBestTime { get; set; }
    public Action<Source1TrExitHintTriggerEvent>? TrExitHintTrigger { get; set; }
    public Action<Source1BotTakeoverEvent>? BotTakeover { get; set; }
    public Action<Source1TrShowFinishMsgboxEvent>? TrShowFinishMsgbox { get; set; }
    public Action<Source1TrShowExitMsgboxEvent>? TrShowExitMsgbox { get; set; }
    public Action<Source1JointeamFailedEvent>? JointeamFailed { get; set; }
    public Action<Source1TeamchangePendingEvent>? TeamchangePending { get; set; }
    public Action<Source1MaterialDefaultCompleteEvent>? MaterialDefaultComplete { get; set; }
    public Action<Source1CsPrevNextSpectatorEvent>? CsPrevNextSpectator { get; set; }
    public Action<Source1NextlevelChangedEvent>? NextlevelChanged { get; set; }
    public Action<Source1SeasoncoinLevelupEvent>? SeasoncoinLevelup { get; set; }
    public Action<Source1TournamentRewardEvent>? TournamentReward { get; set; }
    public Action<Source1StartHalftimeEvent>? StartHalftime { get; set; }
    public Action<Source1AmmoRefillEvent>? AmmoRefill { get; set; }
    public Action<Source1ParachutePickupEvent>? ParachutePickup { get; set; }
    public Action<Source1ParachuteDeployEvent>? ParachuteDeploy { get; set; }
    public Action<Source1DronegunAttackEvent>? DronegunAttack { get; set; }
    public Action<Source1DroneDispatchedEvent>? DroneDispatched { get; set; }
    public Action<Source1LootCrateVisibleEvent>? LootCrateVisible { get; set; }
    public Action<Source1LootCrateOpenedEvent>? LootCrateOpened { get; set; }
    public Action<Source1OpenCrateInstrEvent>? OpenCrateInstr { get; set; }
    public Action<Source1SmokeBeaconParadropEvent>? SmokeBeaconParadrop { get; set; }
    public Action<Source1SurvivalParadropSpawnEvent>? SurvivalParadropSpawn { get; set; }
    public Action<Source1SurvivalParadropBreakEvent>? SurvivalParadropBreak { get; set; }
    public Action<Source1DroneCargoDetachedEvent>? DroneCargoDetached { get; set; }
    public Action<Source1DroneAboveRoofEvent>? DroneAboveRoof { get; set; }
    public Action<Source1ChoppersIncomingWarningEvent>? ChoppersIncomingWarning { get; set; }
    public Action<Source1FirstbombsIncomingWarningEvent>? FirstbombsIncomingWarning { get; set; }
    public Action<Source1DzItemInteractionEvent>? DzItemInteraction { get; set; }
    public Action<Source1SurvivalTeammateRespawnEvent>? SurvivalTeammateRespawn { get; set; }
    public Action<Source1SurvivalNoRespawnsWarningEvent>? SurvivalNoRespawnsWarning { get; set; }
    public Action<Source1SurvivalNoRespawnsFinalEvent>? SurvivalNoRespawnsFinal { get; set; }
    public Action<Source1PlayerPingEvent>? PlayerPing { get; set; }
    public Action<Source1PlayerPingStopEvent>? PlayerPingStop { get; set; }
    public Action<Source1PlayerSoundEvent>? PlayerSound { get; set; }
    public Action<Source1GuardianWaveRestartEvent>? GuardianWaveRestart { get; set; }
    public Action<Source1TeamIntroStartEvent>? TeamIntroStart { get; set; }
    public Action<Source1TeamIntroEndEvent>? TeamIntroEnd { get; set; }
    public Action<Source1BulletFlightResolutionEvent>? BulletFlightResolution { get; set; }
    public Action<Source1GamePhaseChangedEvent>? GamePhaseChanged { get; set; }

    internal void ParseSource1GameEventList(CMsgSource1LegacyGameEventList eventList)
    {
        _handlers = new Dictionary<int, Action<CMsgSource1LegacyGameEvent>>(eventList.Descriptors.Count);
        foreach (var descriptor in eventList.Descriptors)
        {
            if (descriptor.Name == "server_spawn")
            {
                var keys = descriptor.Keys.Select(Action<Source1ServerSpawnEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "hostname")
                            return (@this, x) => @this.Hostname = x.ValString;
                        if (key.Name == "address")
                            return (@this, x) => @this.Address = x.ValString;
                        if (key.Name == "port")
                            return (@this, x) => @this.Port = x.ValShort;
                        if (key.Name == "game")
                            return (@this, x) => @this.Game = x.ValString;
                        if (key.Name == "mapname")
                            return (@this, x) => @this.Mapname = x.ValString;
                        if (key.Name == "addonname")
                            return (@this, x) => @this.Addonname = x.ValString;
                        if (key.Name == "maxplayers")
                            return (@this, x) => @this.Maxplayers = x.ValLong;
                        if (key.Name == "os")
                            return (@this, x) => @this.Os = x.ValString;
                        if (key.Name == "dedicated")
                            return (@this, x) => @this.Dedicated = x.ValBool;
                        if (key.Name == "password")
                            return (@this, x) => @this.Password = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ServerSpawn is not { } callback)
                        return;
                    var @this = new Source1ServerSpawnEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "server_pre_shutdown")
            {
                var keys = descriptor.Keys.Select(Action<Source1ServerPreShutdownEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "reason")
                            return (@this, x) => @this.Reason = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ServerPreShutdown is not { } callback)
                        return;
                    var @this = new Source1ServerPreShutdownEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "server_shutdown")
            {
                var keys = descriptor.Keys.Select(Action<Source1ServerShutdownEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "reason")
                            return (@this, x) => @this.Reason = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ServerShutdown is not { } callback)
                        return;
                    var @this = new Source1ServerShutdownEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "server_message")
            {
                var keys = descriptor.Keys.Select(Action<Source1ServerMessageEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "text")
                            return (@this, x) => @this.Text = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ServerMessage is not { } callback)
                        return;
                    var @this = new Source1ServerMessageEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "server_cvar")
            {
                var keys = descriptor.Keys.Select(Action<Source1ServerCvarEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "cvarname")
                            return (@this, x) => @this.Cvarname = x.ValString;
                        if (key.Name == "cvarvalue")
                            return (@this, x) => @this.Cvarvalue = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ServerCvar is not { } callback)
                        return;
                    var @this = new Source1ServerCvarEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_activate")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerActivateEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerActivate is not { } callback)
                        return;
                    var @this = new Source1PlayerActivateEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_connect_full")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerConnectFullEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerConnectFull is not { } callback)
                        return;
                    var @this = new Source1PlayerConnectFullEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_full_update")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerFullUpdateEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "count")
                            return (@this, x) => @this.Count = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerFullUpdate is not { } callback)
                        return;
                    var @this = new Source1PlayerFullUpdateEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_connect")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerConnectEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "name")
                            return (@this, x) => @this.Name = x.ValString;
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "networkid")
                            return (@this, x) => @this.Networkid = x.ValString;
                        if (key.Name == "xuid")
                            return (@this, x) => @this.Xuid = x.ValUint64;
                        if (key.Name == "address")
                            return (@this, x) => @this.Address = x.ValString;
                        if (key.Name == "bot")
                            return (@this, x) => @this.Bot = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerConnect is not { } callback)
                        return;
                    var @this = new Source1PlayerConnectEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_disconnect")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerDisconnectEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "reason")
                            return (@this, x) => @this.Reason = x.ValShort;
                        if (key.Name == "name")
                            return (@this, x) => @this.Name = x.ValString;
                        if (key.Name == "networkid")
                            return (@this, x) => @this.Networkid = x.ValString;
                        if (key.Name == "xuid")
                            return (@this, x) => @this.Xuid = x.ValUint64;
                        if (key.Name == "PlayerID")
                            return (@this, x) => @this.PlayerID = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerDisconnect is not { } callback)
                        return;
                    var @this = new Source1PlayerDisconnectEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_info")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerInfoEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "name")
                            return (@this, x) => @this.Name = x.ValString;
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "steamid")
                            return (@this, x) => @this.Steamid = x.ValUint64;
                        if (key.Name == "bot")
                            return (@this, x) => @this.Bot = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerInfo is not { } callback)
                        return;
                    var @this = new Source1PlayerInfoEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_spawn")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerSpawnEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerSpawn is not { } callback)
                        return;
                    var @this = new Source1PlayerSpawnEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_team")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerTeamEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "team")
                            return (@this, x) => @this.Team = x.ValByte;
                        if (key.Name == "oldteam")
                            return (@this, x) => @this.Oldteam = x.ValByte;
                        if (key.Name == "disconnect")
                            return (@this, x) => @this.Disconnect = x.ValBool;
                        if (key.Name == "silent")
                            return (@this, x) => @this.Silent = x.ValBool;
                        if (key.Name == "isbot")
                            return (@this, x) => @this.Isbot = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerTeam is not { } callback)
                        return;
                    var @this = new Source1PlayerTeamEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "local_player_team")
            {
                var keys = descriptor.Keys.Select(Action<Source1LocalPlayerTeamEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (LocalPlayerTeam is not { } callback)
                        return;
                    var @this = new Source1LocalPlayerTeamEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "local_player_controller_team")
            {
                var keys = descriptor.Keys.Select(Action<Source1LocalPlayerControllerTeamEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (LocalPlayerControllerTeam is not { } callback)
                        return;
                    var @this = new Source1LocalPlayerControllerTeamEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_changename")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerChangenameEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "oldname")
                            return (@this, x) => @this.Oldname = x.ValString;
                        if (key.Name == "newname")
                            return (@this, x) => @this.Newname = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerChangename is not { } callback)
                        return;
                    var @this = new Source1PlayerChangenameEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_hurt")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerHurtEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "attacker")
                            return (@this, x) => @this.Attacker = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "attacker_pawn")
                            return (@this, x) => @this.AttackerPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "health")
                            return (@this, x) => @this.Health = x.ValByte;
                        if (key.Name == "armor")
                            return (@this, x) => @this.Armor = x.ValByte;
                        if (key.Name == "weapon")
                            return (@this, x) => @this.Weapon = x.ValString;
                        if (key.Name == "dmg_health")
                            return (@this, x) => @this.DmgHealth = x.ValShort;
                        if (key.Name == "dmg_armor")
                            return (@this, x) => @this.DmgArmor = x.ValByte;
                        if (key.Name == "hitgroup")
                            return (@this, x) => @this.Hitgroup = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerHurt is not { } callback)
                        return;
                    var @this = new Source1PlayerHurtEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_chat")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerChatEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "teamonly")
                            return (@this, x) => @this.Teamonly = x.ValBool;
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = x.ValShort;
                        if (key.Name == "text")
                            return (@this, x) => @this.Text = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerChat is not { } callback)
                        return;
                    var @this = new Source1PlayerChatEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "local_player_pawn_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1LocalPlayerPawnChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (LocalPlayerPawnChanged is not { } callback)
                        return;
                    var @this = new Source1LocalPlayerPawnChangedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "teamplay_broadcast_audio")
            {
                var keys = descriptor.Keys.Select(Action<Source1TeamplayBroadcastAudioEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "team")
                            return (@this, x) => @this.Team = x.ValByte;
                        if (key.Name == "sound")
                            return (@this, x) => @this.Sound = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (TeamplayBroadcastAudio is not { } callback)
                        return;
                    var @this = new Source1TeamplayBroadcastAudioEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "finale_start")
            {
                var keys = descriptor.Keys.Select(Action<Source1FinaleStartEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "rushes")
                            return (@this, x) => @this.Rushes = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (FinaleStart is not { } callback)
                        return;
                    var @this = new Source1FinaleStartEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_stats_updated")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerStatsUpdatedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "forceupload")
                            return (@this, x) => @this.Forceupload = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerStatsUpdated is not { } callback)
                        return;
                    var @this = new Source1PlayerStatsUpdatedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "user_data_downloaded")
            {
                var keys = descriptor.Keys.Select(Action<Source1UserDataDownloadedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (UserDataDownloaded is not { } callback)
                        return;
                    var @this = new Source1UserDataDownloadedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "ragdoll_dissolved")
            {
                var keys = descriptor.Keys.Select(Action<Source1RagdollDissolvedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (RagdollDissolved is not { } callback)
                        return;
                    var @this = new Source1RagdollDissolvedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "team_info")
            {
                var keys = descriptor.Keys.Select(Action<Source1TeamInfoEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "teamid")
                            return (@this, x) => @this.Teamid = x.ValByte;
                        if (key.Name == "teamname")
                            return (@this, x) => @this.Teamname = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (TeamInfo is not { } callback)
                        return;
                    var @this = new Source1TeamInfoEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "team_score")
            {
                var keys = descriptor.Keys.Select(Action<Source1TeamScoreEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "teamid")
                            return (@this, x) => @this.Teamid = x.ValByte;
                        if (key.Name == "score")
                            return (@this, x) => @this.Score = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (TeamScore is not { } callback)
                        return;
                    var @this = new Source1TeamScoreEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hltv_cameraman")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvCameramanEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HltvCameraman is not { } callback)
                        return;
                    var @this = new Source1HltvCameramanEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hltv_chase")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvChaseEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "target1")
                            return (@this, x) => @this.Target1 = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "target2")
                            return (@this, x) => @this.Target2 = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "distance")
                            return (@this, x) => @this.Distance = x.ValShort;
                        if (key.Name == "theta")
                            return (@this, x) => @this.Theta = x.ValShort;
                        if (key.Name == "phi")
                            return (@this, x) => @this.Phi = x.ValShort;
                        if (key.Name == "inertia")
                            return (@this, x) => @this.Inertia = x.ValByte;
                        if (key.Name == "ineye")
                            return (@this, x) => @this.Ineye = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HltvChase is not { } callback)
                        return;
                    var @this = new Source1HltvChaseEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hltv_rank_camera")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvRankCameraEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "index")
                            return (@this, x) => @this.Index = x.ValByte;
                        if (key.Name == "rank")
                            return (@this, x) => @this.Rank = x.ValFloat;
                        if (key.Name == "target")
                            return (@this, x) => @this.Target = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HltvRankCamera is not { } callback)
                        return;
                    var @this = new Source1HltvRankCameraEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hltv_rank_entity")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvRankEntityEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "rank")
                            return (@this, x) => @this.Rank = x.ValFloat;
                        if (key.Name == "target")
                            return (@this, x) => @this.Target = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HltvRankEntity is not { } callback)
                        return;
                    var @this = new Source1HltvRankEntityEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hltv_fixed")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvFixedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "posx")
                            return (@this, x) => @this.Posx = x.ValLong;
                        if (key.Name == "posy")
                            return (@this, x) => @this.Posy = x.ValLong;
                        if (key.Name == "posz")
                            return (@this, x) => @this.Posz = x.ValLong;
                        if (key.Name == "theta")
                            return (@this, x) => @this.Theta = x.ValShort;
                        if (key.Name == "phi")
                            return (@this, x) => @this.Phi = x.ValShort;
                        if (key.Name == "offset")
                            return (@this, x) => @this.Offset = x.ValShort;
                        if (key.Name == "fov")
                            return (@this, x) => @this.Fov = x.ValFloat;
                        if (key.Name == "target")
                            return (@this, x) => @this.Target = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HltvFixed is not { } callback)
                        return;
                    var @this = new Source1HltvFixedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hltv_message")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvMessageEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "text")
                            return (@this, x) => @this.Text = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HltvMessage is not { } callback)
                        return;
                    var @this = new Source1HltvMessageEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hltv_status")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvStatusEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "clients")
                            return (@this, x) => @this.Clients = x.ValLong;
                        if (key.Name == "slots")
                            return (@this, x) => @this.Slots = x.ValLong;
                        if (key.Name == "proxies")
                            return (@this, x) => @this.Proxies = x.ValShort;
                        if (key.Name == "master")
                            return (@this, x) => @this.Master = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HltvStatus is not { } callback)
                        return;
                    var @this = new Source1HltvStatusEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hltv_title")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvTitleEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "text")
                            return (@this, x) => @this.Text = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HltvTitle is not { } callback)
                        return;
                    var @this = new Source1HltvTitleEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hltv_chat")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvChatEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "text")
                            return (@this, x) => @this.Text = x.ValString;
                        if (key.Name == "steamID")
                            return (@this, x) => @this.SteamID = x.ValUint64;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HltvChat is not { } callback)
                        return;
                    var @this = new Source1HltvChatEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hltv_versioninfo")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvVersioninfoEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "version")
                            return (@this, x) => @this.Version = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HltvVersioninfo is not { } callback)
                        return;
                    var @this = new Source1HltvVersioninfoEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hltv_replay")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvReplayEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "delay")
                            return (@this, x) => @this.Delay = x.ValLong;
                        if (key.Name == "reason")
                            return (@this, x) => @this.Reason = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HltvReplay is not { } callback)
                        return;
                    var @this = new Source1HltvReplayEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hltv_replay_status")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvReplayStatusEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "reason")
                            return (@this, x) => @this.Reason = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HltvReplayStatus is not { } callback)
                        return;
                    var @this = new Source1HltvReplayStatusEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "demo_stop")
            {
                var keys = descriptor.Keys.Select(Action<Source1DemoStopEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DemoStop is not { } callback)
                        return;
                    var @this = new Source1DemoStopEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "map_shutdown")
            {
                var keys = descriptor.Keys.Select(Action<Source1MapShutdownEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (MapShutdown is not { } callback)
                        return;
                    var @this = new Source1MapShutdownEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "map_transition")
            {
                var keys = descriptor.Keys.Select(Action<Source1MapTransitionEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (MapTransition is not { } callback)
                        return;
                    var @this = new Source1MapTransitionEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hostname_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1HostnameChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "hostname")
                            return (@this, x) => @this.Hostname = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HostnameChanged is not { } callback)
                        return;
                    var @this = new Source1HostnameChangedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "difficulty_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1DifficultyChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "newDifficulty")
                            return (@this, x) => @this.NewDifficulty = x.ValShort;
                        if (key.Name == "oldDifficulty")
                            return (@this, x) => @this.OldDifficulty = x.ValShort;
                        if (key.Name == "strDifficulty")
                            return (@this, x) => @this.StrDifficulty = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DifficultyChanged is not { } callback)
                        return;
                    var @this = new Source1DifficultyChangedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "game_message")
            {
                var keys = descriptor.Keys.Select(Action<Source1GameMessageEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "target")
                            return (@this, x) => @this.Target = x.ValByte;
                        if (key.Name == "text")
                            return (@this, x) => @this.Text = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (GameMessage is not { } callback)
                        return;
                    var @this = new Source1GameMessageEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "game_newmap")
            {
                var keys = descriptor.Keys.Select(Action<Source1GameNewmapEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "mapname")
                            return (@this, x) => @this.Mapname = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (GameNewmap is not { } callback)
                        return;
                    var @this = new Source1GameNewmapEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "round_start")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundStartEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "timelimit")
                            return (@this, x) => @this.Timelimit = x.ValLong;
                        if (key.Name == "fraglimit")
                            return (@this, x) => @this.Fraglimit = x.ValLong;
                        if (key.Name == "objective")
                            return (@this, x) => @this.Objective = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (RoundStart is not { } callback)
                        return;
                    var @this = new Source1RoundStartEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "round_end")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundEndEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "winner")
                            return (@this, x) => @this.Winner = x.ValByte;
                        if (key.Name == "reason")
                            return (@this, x) => @this.Reason = x.ValByte;
                        if (key.Name == "message")
                            return (@this, x) => @this.Message = x.ValString;
                        if (key.Name == "legacy")
                            return (@this, x) => @this.Legacy = x.ValByte;
                        if (key.Name == "player_count")
                            return (@this, x) => @this.PlayerCount = x.ValShort;
                        if (key.Name == "nomusic")
                            return (@this, x) => @this.Nomusic = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (RoundEnd is not { } callback)
                        return;
                    var @this = new Source1RoundEndEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "round_start_pre_entity")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundStartPreEntityEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (RoundStartPreEntity is not { } callback)
                        return;
                    var @this = new Source1RoundStartPreEntityEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "round_start_post_nav")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundStartPostNavEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (RoundStartPostNav is not { } callback)
                        return;
                    var @this = new Source1RoundStartPostNavEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "round_freeze_end")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundFreezeEndEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (RoundFreezeEnd is not { } callback)
                        return;
                    var @this = new Source1RoundFreezeEndEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "teamplay_round_start")
            {
                var keys = descriptor.Keys.Select(Action<Source1TeamplayRoundStartEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "full_reset")
                            return (@this, x) => @this.FullReset = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (TeamplayRoundStart is not { } callback)
                        return;
                    var @this = new Source1TeamplayRoundStartEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_death")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerDeathEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "attacker")
                            return (@this, x) => @this.Attacker = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "attacker_pawn")
                            return (@this, x) => @this.AttackerPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "assister")
                            return (@this, x) => @this.Assister = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "assister_pawn")
                            return (@this, x) => @this.AssisterPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "assistedflash")
                            return (@this, x) => @this.Assistedflash = x.ValBool;
                        if (key.Name == "weapon")
                            return (@this, x) => @this.Weapon = x.ValString;
                        if (key.Name == "weapon_itemid")
                            return (@this, x) => @this.WeaponItemid = x.ValString;
                        if (key.Name == "weapon_fauxitemid")
                            return (@this, x) => @this.WeaponFauxitemid = x.ValString;
                        if (key.Name == "weapon_originalowner_xuid")
                            return (@this, x) => @this.WeaponOriginalownerXuid = x.ValString;
                        if (key.Name == "headshot")
                            return (@this, x) => @this.Headshot = x.ValBool;
                        if (key.Name == "dominated")
                            return (@this, x) => @this.Dominated = x.ValShort;
                        if (key.Name == "revenge")
                            return (@this, x) => @this.Revenge = x.ValShort;
                        if (key.Name == "wipe")
                            return (@this, x) => @this.Wipe = x.ValShort;
                        if (key.Name == "penetrated")
                            return (@this, x) => @this.Penetrated = x.ValShort;
                        if (key.Name == "noreplay")
                            return (@this, x) => @this.Noreplay = x.ValBool;
                        if (key.Name == "noscope")
                            return (@this, x) => @this.Noscope = x.ValBool;
                        if (key.Name == "thrusmoke")
                            return (@this, x) => @this.Thrusmoke = x.ValBool;
                        if (key.Name == "attackerblind")
                            return (@this, x) => @this.Attackerblind = x.ValBool;
                        if (key.Name == "distance")
                            return (@this, x) => @this.Distance = x.ValFloat;
                        if (key.Name == "dmg_health")
                            return (@this, x) => @this.DmgHealth = x.ValShort;
                        if (key.Name == "dmg_armor")
                            return (@this, x) => @this.DmgArmor = x.ValByte;
                        if (key.Name == "hitgroup")
                            return (@this, x) => @this.Hitgroup = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerDeath is not { } callback)
                        return;
                    var @this = new Source1PlayerDeathEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_footstep")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerFootstepEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerFootstep is not { } callback)
                        return;
                    var @this = new Source1PlayerFootstepEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_hintmessage")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerHintmessageEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "hintmessage")
                            return (@this, x) => @this.Hintmessage = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerHintmessage is not { } callback)
                        return;
                    var @this = new Source1PlayerHintmessageEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "break_breakable")
            {
                var keys = descriptor.Keys.Select(Action<Source1BreakBreakableEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "material")
                            return (@this, x) => @this.Material = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BreakBreakable is not { } callback)
                        return;
                    var @this = new Source1BreakBreakableEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "broken_breakable")
            {
                var keys = descriptor.Keys.Select(Action<Source1BrokenBreakableEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "material")
                            return (@this, x) => @this.Material = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BrokenBreakable is not { } callback)
                        return;
                    var @this = new Source1BrokenBreakableEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "break_prop")
            {
                var keys = descriptor.Keys.Select(Action<Source1BreakPropEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BreakProp is not { } callback)
                        return;
                    var @this = new Source1BreakPropEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "entity_killed")
            {
                var keys = descriptor.Keys.Select(Action<Source1EntityKilledEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex_killed")
                            return (@this, x) => @this.EntindexKilled = x.ValLong;
                        if (key.Name == "entindex_attacker")
                            return (@this, x) => @this.EntindexAttacker = x.ValLong;
                        if (key.Name == "entindex_inflictor")
                            return (@this, x) => @this.EntindexInflictor = x.ValLong;
                        if (key.Name == "damagebits")
                            return (@this, x) => @this.Damagebits = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (EntityKilled is not { } callback)
                        return;
                    var @this = new Source1EntityKilledEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "door_close")
            {
                var keys = descriptor.Keys.Select(Action<Source1DoorCloseEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "checkpoint")
                            return (@this, x) => @this.Checkpoint = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DoorClose is not { } callback)
                        return;
                    var @this = new Source1DoorCloseEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "vote_started")
            {
                var keys = descriptor.Keys.Select(Action<Source1VoteStartedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "issue")
                            return (@this, x) => @this.Issue = x.ValString;
                        if (key.Name == "param1")
                            return (@this, x) => @this.Param1 = x.ValString;
                        if (key.Name == "team")
                            return (@this, x) => @this.Team = x.ValByte;
                        if (key.Name == "initiator")
                            return (@this, x) => @this.Initiator = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (VoteStarted is not { } callback)
                        return;
                    var @this = new Source1VoteStartedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "vote_failed")
            {
                var keys = descriptor.Keys.Select(Action<Source1VoteFailedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "team")
                            return (@this, x) => @this.Team = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (VoteFailed is not { } callback)
                        return;
                    var @this = new Source1VoteFailedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "vote_passed")
            {
                var keys = descriptor.Keys.Select(Action<Source1VotePassedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "details")
                            return (@this, x) => @this.Details = x.ValString;
                        if (key.Name == "param1")
                            return (@this, x) => @this.Param1 = x.ValString;
                        if (key.Name == "team")
                            return (@this, x) => @this.Team = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (VotePassed is not { } callback)
                        return;
                    var @this = new Source1VotePassedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "vote_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1VoteChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "vote_option1")
                            return (@this, x) => @this.VoteOption1 = x.ValByte;
                        if (key.Name == "vote_option2")
                            return (@this, x) => @this.VoteOption2 = x.ValByte;
                        if (key.Name == "vote_option3")
                            return (@this, x) => @this.VoteOption3 = x.ValByte;
                        if (key.Name == "vote_option4")
                            return (@this, x) => @this.VoteOption4 = x.ValByte;
                        if (key.Name == "vote_option5")
                            return (@this, x) => @this.VoteOption5 = x.ValByte;
                        if (key.Name == "potentialVotes")
                            return (@this, x) => @this.PotentialVotes = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (VoteChanged is not { } callback)
                        return;
                    var @this = new Source1VoteChangedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "vote_cast_yes")
            {
                var keys = descriptor.Keys.Select(Action<Source1VoteCastYesEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "team")
                            return (@this, x) => @this.Team = x.ValByte;
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (VoteCastYes is not { } callback)
                        return;
                    var @this = new Source1VoteCastYesEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "vote_cast_no")
            {
                var keys = descriptor.Keys.Select(Action<Source1VoteCastNoEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "team")
                            return (@this, x) => @this.Team = x.ValByte;
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (VoteCastNo is not { } callback)
                        return;
                    var @this = new Source1VoteCastNoEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "achievement_event")
            {
                var keys = descriptor.Keys.Select(Action<Source1AchievementEventEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "achievement_name")
                            return (@this, x) => @this.AchievementName = x.ValString;
                        if (key.Name == "cur_val")
                            return (@this, x) => @this.CurVal = x.ValShort;
                        if (key.Name == "max_val")
                            return (@this, x) => @this.MaxVal = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (AchievementEvent is not { } callback)
                        return;
                    var @this = new Source1AchievementEventEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "achievement_earned")
            {
                var keys = descriptor.Keys.Select(Action<Source1AchievementEarnedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "player")
                            return (@this, x) => @this.Player = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "achievement")
                            return (@this, x) => @this.Achievement = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (AchievementEarned is not { } callback)
                        return;
                    var @this = new Source1AchievementEarnedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "achievement_write_failed")
            {
                var keys = descriptor.Keys.Select(Action<Source1AchievementWriteFailedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (AchievementWriteFailed is not { } callback)
                        return;
                    var @this = new Source1AchievementWriteFailedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "bonus_updated")
            {
                var keys = descriptor.Keys.Select(Action<Source1BonusUpdatedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "numadvanced")
                            return (@this, x) => @this.Numadvanced = x.ValShort;
                        if (key.Name == "numbronze")
                            return (@this, x) => @this.Numbronze = x.ValShort;
                        if (key.Name == "numsilver")
                            return (@this, x) => @this.Numsilver = x.ValShort;
                        if (key.Name == "numgold")
                            return (@this, x) => @this.Numgold = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BonusUpdated is not { } callback)
                        return;
                    var @this = new Source1BonusUpdatedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "spec_target_updated")
            {
                var keys = descriptor.Keys.Select(Action<Source1SpecTargetUpdatedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "target")
                            return (@this, x) => @this.Target = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (SpecTargetUpdated is not { } callback)
                        return;
                    var @this = new Source1SpecTargetUpdatedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "spec_mode_updated")
            {
                var keys = descriptor.Keys.Select(Action<Source1SpecModeUpdatedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (SpecModeUpdated is not { } callback)
                        return;
                    var @this = new Source1SpecModeUpdatedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "entity_visible")
            {
                var keys = descriptor.Keys.Select(Action<Source1EntityVisibleEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "subject")
                            return (@this, x) => @this.Subject = x.ValShort;
                        if (key.Name == "classname")
                            return (@this, x) => @this.Classname = x.ValString;
                        if (key.Name == "entityname")
                            return (@this, x) => @this.Entityname = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (EntityVisible is not { } callback)
                        return;
                    var @this = new Source1EntityVisibleEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "gameinstructor_draw")
            {
                var keys = descriptor.Keys.Select(Action<Source1GameinstructorDrawEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (GameinstructorDraw is not { } callback)
                        return;
                    var @this = new Source1GameinstructorDrawEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "gameinstructor_nodraw")
            {
                var keys = descriptor.Keys.Select(Action<Source1GameinstructorNodrawEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (GameinstructorNodraw is not { } callback)
                        return;
                    var @this = new Source1GameinstructorNodrawEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "flare_ignite_npc")
            {
                var keys = descriptor.Keys.Select(Action<Source1FlareIgniteNpcEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (FlareIgniteNpc is not { } callback)
                        return;
                    var @this = new Source1FlareIgniteNpcEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "helicopter_grenade_punt_miss")
            {
                var keys = descriptor.Keys.Select(Action<Source1HelicopterGrenadePuntMissEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HelicopterGrenadePuntMiss is not { } callback)
                        return;
                    var @this = new Source1HelicopterGrenadePuntMissEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "physgun_pickup")
            {
                var keys = descriptor.Keys.Select(Action<Source1PhysgunPickupEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "target")
                            return (@this, x) => @this.Target = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PhysgunPickup is not { } callback)
                        return;
                    var @this = new Source1PhysgunPickupEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "inventory_updated")
            {
                var keys = descriptor.Keys.Select(Action<Source1InventoryUpdatedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (InventoryUpdated is not { } callback)
                        return;
                    var @this = new Source1InventoryUpdatedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "cart_updated")
            {
                var keys = descriptor.Keys.Select(Action<Source1CartUpdatedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (CartUpdated is not { } callback)
                        return;
                    var @this = new Source1CartUpdatedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "store_pricesheet_updated")
            {
                var keys = descriptor.Keys.Select(Action<Source1StorePricesheetUpdatedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (StorePricesheetUpdated is not { } callback)
                        return;
                    var @this = new Source1StorePricesheetUpdatedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "item_schema_initialized")
            {
                var keys = descriptor.Keys.Select(Action<Source1ItemSchemaInitializedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ItemSchemaInitialized is not { } callback)
                        return;
                    var @this = new Source1ItemSchemaInitializedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "drop_rate_modified")
            {
                var keys = descriptor.Keys.Select(Action<Source1DropRateModifiedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DropRateModified is not { } callback)
                        return;
                    var @this = new Source1DropRateModifiedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "event_ticket_modified")
            {
                var keys = descriptor.Keys.Select(Action<Source1EventTicketModifiedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (EventTicketModified is not { } callback)
                        return;
                    var @this = new Source1EventTicketModifiedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "gc_connected")
            {
                var keys = descriptor.Keys.Select(Action<Source1GcConnectedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (GcConnected is not { } callback)
                        return;
                    var @this = new Source1GcConnectedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "instructor_start_lesson")
            {
                var keys = descriptor.Keys.Select(Action<Source1InstructorStartLessonEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "hint_name")
                            return (@this, x) => @this.HintName = x.ValString;
                        if (key.Name == "hint_target")
                            return (@this, x) => @this.HintTarget = x.ValLong;
                        if (key.Name == "vr_movement_type")
                            return (@this, x) => @this.VrMovementType = x.ValByte;
                        if (key.Name == "vr_single_controller")
                            return (@this, x) => @this.VrSingleController = x.ValBool;
                        if (key.Name == "vr_controller_type")
                            return (@this, x) => @this.VrControllerType = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (InstructorStartLesson is not { } callback)
                        return;
                    var @this = new Source1InstructorStartLessonEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "instructor_close_lesson")
            {
                var keys = descriptor.Keys.Select(Action<Source1InstructorCloseLessonEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "hint_name")
                            return (@this, x) => @this.HintName = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (InstructorCloseLesson is not { } callback)
                        return;
                    var @this = new Source1InstructorCloseLessonEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "instructor_server_hint_create")
            {
                var keys = descriptor.Keys.Select(Action<Source1InstructorServerHintCreateEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "hint_name")
                            return (@this, x) => @this.HintName = x.ValString;
                        if (key.Name == "hint_replace_key")
                            return (@this, x) => @this.HintReplaceKey = x.ValString;
                        if (key.Name == "hint_target")
                            return (@this, x) => @this.HintTarget = x.ValLong;
                        if (key.Name == "hint_activator_userid")
                            return (@this, x) => @this.HintActivatorUserid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "hint_timeout")
                            return (@this, x) => @this.HintTimeout = x.ValShort;
                        if (key.Name == "hint_icon_onscreen")
                            return (@this, x) => @this.HintIconOnscreen = x.ValString;
                        if (key.Name == "hint_icon_offscreen")
                            return (@this, x) => @this.HintIconOffscreen = x.ValString;
                        if (key.Name == "hint_caption")
                            return (@this, x) => @this.HintCaption = x.ValString;
                        if (key.Name == "hint_activator_caption")
                            return (@this, x) => @this.HintActivatorCaption = x.ValString;
                        if (key.Name == "hint_color")
                            return (@this, x) => @this.HintColor = x.ValString;
                        if (key.Name == "hint_icon_offset")
                            return (@this, x) => @this.HintIconOffset = x.ValFloat;
                        if (key.Name == "hint_range")
                            return (@this, x) => @this.HintRange = x.ValFloat;
                        if (key.Name == "hint_flags")
                            return (@this, x) => @this.HintFlags = x.ValLong;
                        if (key.Name == "hint_binding")
                            return (@this, x) => @this.HintBinding = x.ValString;
                        if (key.Name == "hint_gamepad_binding")
                            return (@this, x) => @this.HintGamepadBinding = x.ValString;
                        if (key.Name == "hint_allow_nodraw_target")
                            return (@this, x) => @this.HintAllowNodrawTarget = x.ValBool;
                        if (key.Name == "hint_nooffscreen")
                            return (@this, x) => @this.HintNooffscreen = x.ValBool;
                        if (key.Name == "hint_forcecaption")
                            return (@this, x) => @this.HintForcecaption = x.ValBool;
                        if (key.Name == "hint_local_player_only")
                            return (@this, x) => @this.HintLocalPlayerOnly = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (InstructorServerHintCreate is not { } callback)
                        return;
                    var @this = new Source1InstructorServerHintCreateEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "instructor_server_hint_stop")
            {
                var keys = descriptor.Keys.Select(Action<Source1InstructorServerHintStopEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "hint_name")
                            return (@this, x) => @this.HintName = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (InstructorServerHintStop is not { } callback)
                        return;
                    var @this = new Source1InstructorServerHintStopEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "set_instructor_group_enabled")
            {
                var keys = descriptor.Keys.Select(Action<Source1SetInstructorGroupEnabledEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "group")
                            return (@this, x) => @this.Group = x.ValString;
                        if (key.Name == "enabled")
                            return (@this, x) => @this.Enabled = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (SetInstructorGroupEnabled is not { } callback)
                        return;
                    var @this = new Source1SetInstructorGroupEnabledEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "clientside_lesson_closed")
            {
                var keys = descriptor.Keys.Select(Action<Source1ClientsideLessonClosedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "lesson_name")
                            return (@this, x) => @this.LessonName = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ClientsideLessonClosed is not { } callback)
                        return;
                    var @this = new Source1ClientsideLessonClosedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "dynamic_shadow_light_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1DynamicShadowLightChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DynamicShadowLightChanged is not { } callback)
                        return;
                    var @this = new Source1DynamicShadowLightChangedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "gameui_hidden")
            {
                var keys = descriptor.Keys.Select(Action<Source1GameuiHiddenEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (GameuiHidden is not { } callback)
                        return;
                    var @this = new Source1GameuiHiddenEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "items_gifted")
            {
                var keys = descriptor.Keys.Select(Action<Source1ItemsGiftedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "player")
                            return (@this, x) => @this.Player = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "itemdef")
                            return (@this, x) => @this.Itemdef = x.ValLong;
                        if (key.Name == "numgifts")
                            return (@this, x) => @this.Numgifts = x.ValShort;
                        if (key.Name == "giftidx")
                            return (@this, x) => @this.Giftidx = x.ValLong;
                        if (key.Name == "accountid")
                            return (@this, x) => @this.Accountid = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ItemsGifted is not { } callback)
                        return;
                    var @this = new Source1ItemsGiftedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_score")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerScoreEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "kills")
                            return (@this, x) => @this.Kills = x.ValShort;
                        if (key.Name == "deaths")
                            return (@this, x) => @this.Deaths = x.ValShort;
                        if (key.Name == "score")
                            return (@this, x) => @this.Score = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerScore is not { } callback)
                        return;
                    var @this = new Source1PlayerScoreEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_shoot")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerShootEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "weapon")
                            return (@this, x) => @this.Weapon = x.ValByte;
                        if (key.Name == "mode")
                            return (@this, x) => @this.Mode = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerShoot is not { } callback)
                        return;
                    var @this = new Source1PlayerShootEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "game_init")
            {
                var keys = descriptor.Keys.Select(Action<Source1GameInitEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (GameInit is not { } callback)
                        return;
                    var @this = new Source1GameInitEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "game_start")
            {
                var keys = descriptor.Keys.Select(Action<Source1GameStartEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "roundslimit")
                            return (@this, x) => @this.Roundslimit = x.ValLong;
                        if (key.Name == "timelimit")
                            return (@this, x) => @this.Timelimit = x.ValLong;
                        if (key.Name == "fraglimit")
                            return (@this, x) => @this.Fraglimit = x.ValLong;
                        if (key.Name == "objective")
                            return (@this, x) => @this.Objective = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (GameStart is not { } callback)
                        return;
                    var @this = new Source1GameStartEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "game_end")
            {
                var keys = descriptor.Keys.Select(Action<Source1GameEndEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "winner")
                            return (@this, x) => @this.Winner = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (GameEnd is not { } callback)
                        return;
                    var @this = new Source1GameEndEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "round_announce_match_point")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundAnnounceMatchPointEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (RoundAnnounceMatchPoint is not { } callback)
                        return;
                    var @this = new Source1RoundAnnounceMatchPointEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "round_announce_final")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundAnnounceFinalEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (RoundAnnounceFinal is not { } callback)
                        return;
                    var @this = new Source1RoundAnnounceFinalEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "round_announce_last_round_half")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundAnnounceLastRoundHalfEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (RoundAnnounceLastRoundHalf is not { } callback)
                        return;
                    var @this = new Source1RoundAnnounceLastRoundHalfEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "round_announce_match_start")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundAnnounceMatchStartEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (RoundAnnounceMatchStart is not { } callback)
                        return;
                    var @this = new Source1RoundAnnounceMatchStartEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "round_announce_warmup")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundAnnounceWarmupEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (RoundAnnounceWarmup is not { } callback)
                        return;
                    var @this = new Source1RoundAnnounceWarmupEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "round_end_upload_stats")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundEndUploadStatsEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (RoundEndUploadStats is not { } callback)
                        return;
                    var @this = new Source1RoundEndUploadStatsEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "round_officially_ended")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundOfficiallyEndedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (RoundOfficiallyEnded is not { } callback)
                        return;
                    var @this = new Source1RoundOfficiallyEndedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "round_time_warning")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundTimeWarningEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (RoundTimeWarning is not { } callback)
                        return;
                    var @this = new Source1RoundTimeWarningEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "ugc_map_info_received")
            {
                var keys = descriptor.Keys.Select(Action<Source1UgcMapInfoReceivedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "published_file_id")
                            return (@this, x) => @this.PublishedFileId = x.ValUint64;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (UgcMapInfoReceived is not { } callback)
                        return;
                    var @this = new Source1UgcMapInfoReceivedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "ugc_map_unsubscribed")
            {
                var keys = descriptor.Keys.Select(Action<Source1UgcMapUnsubscribedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "published_file_id")
                            return (@this, x) => @this.PublishedFileId = x.ValUint64;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (UgcMapUnsubscribed is not { } callback)
                        return;
                    var @this = new Source1UgcMapUnsubscribedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "ugc_map_download_error")
            {
                var keys = descriptor.Keys.Select(Action<Source1UgcMapDownloadErrorEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "published_file_id")
                            return (@this, x) => @this.PublishedFileId = x.ValUint64;
                        if (key.Name == "error_code")
                            return (@this, x) => @this.ErrorCode = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (UgcMapDownloadError is not { } callback)
                        return;
                    var @this = new Source1UgcMapDownloadErrorEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "ugc_file_download_finished")
            {
                var keys = descriptor.Keys.Select(Action<Source1UgcFileDownloadFinishedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "hcontent")
                            return (@this, x) => @this.Hcontent = x.ValUint64;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (UgcFileDownloadFinished is not { } callback)
                        return;
                    var @this = new Source1UgcFileDownloadFinishedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "ugc_file_download_start")
            {
                var keys = descriptor.Keys.Select(Action<Source1UgcFileDownloadStartEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "hcontent")
                            return (@this, x) => @this.Hcontent = x.ValUint64;
                        if (key.Name == "published_file_id")
                            return (@this, x) => @this.PublishedFileId = x.ValUint64;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (UgcFileDownloadStart is not { } callback)
                        return;
                    var @this = new Source1UgcFileDownloadStartEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "begin_new_match")
            {
                var keys = descriptor.Keys.Select(Action<Source1BeginNewMatchEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BeginNewMatch is not { } callback)
                        return;
                    var @this = new Source1BeginNewMatchEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "dm_bonus_weapon_start")
            {
                var keys = descriptor.Keys.Select(Action<Source1DmBonusWeaponStartEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "time")
                            return (@this, x) => @this.Time = x.ValShort;
                        if (key.Name == "Pos")
                            return (@this, x) => @this.Pos = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DmBonusWeaponStart is not { } callback)
                        return;
                    var @this = new Source1DmBonusWeaponStartEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "survival_announce_phase")
            {
                var keys = descriptor.Keys.Select(Action<Source1SurvivalAnnouncePhaseEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "phase")
                            return (@this, x) => @this.Phase = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (SurvivalAnnouncePhase is not { } callback)
                        return;
                    var @this = new Source1SurvivalAnnouncePhaseEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_decal")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerDecalEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerDecal is not { } callback)
                        return;
                    var @this = new Source1PlayerDecalEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "read_game_titledata")
            {
                var keys = descriptor.Keys.Select(Action<Source1ReadGameTitledataEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "controllerId")
                            return (@this, x) => @this.ControllerId = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ReadGameTitledata is not { } callback)
                        return;
                    var @this = new Source1ReadGameTitledataEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "write_game_titledata")
            {
                var keys = descriptor.Keys.Select(Action<Source1WriteGameTitledataEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "controllerId")
                            return (@this, x) => @this.ControllerId = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (WriteGameTitledata is not { } callback)
                        return;
                    var @this = new Source1WriteGameTitledataEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "reset_game_titledata")
            {
                var keys = descriptor.Keys.Select(Action<Source1ResetGameTitledataEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "controllerId")
                            return (@this, x) => @this.ControllerId = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ResetGameTitledata is not { } callback)
                        return;
                    var @this = new Source1ResetGameTitledataEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "weaponhud_selection")
            {
                var keys = descriptor.Keys.Select(Action<Source1WeaponhudSelectionEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "mode")
                            return (@this, x) => @this.Mode = x.ValByte;
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (WeaponhudSelection is not { } callback)
                        return;
                    var @this = new Source1WeaponhudSelectionEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "vote_ended")
            {
                var keys = descriptor.Keys.Select(Action<Source1VoteEndedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (VoteEnded is not { } callback)
                        return;
                    var @this = new Source1VoteEndedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "vote_cast")
            {
                var keys = descriptor.Keys.Select(Action<Source1VoteCastEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "vote_option")
                            return (@this, x) => @this.VoteOption = x.ValByte;
                        if (key.Name == "team")
                            return (@this, x) => @this.Team = x.ValShort;
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (VoteCast is not { } callback)
                        return;
                    var @this = new Source1VoteCastEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "vote_options")
            {
                var keys = descriptor.Keys.Select(Action<Source1VoteOptionsEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "count")
                            return (@this, x) => @this.Count = x.ValByte;
                        if (key.Name == "option1")
                            return (@this, x) => @this.Option1 = x.ValString;
                        if (key.Name == "option2")
                            return (@this, x) => @this.Option2 = x.ValString;
                        if (key.Name == "option3")
                            return (@this, x) => @this.Option3 = x.ValString;
                        if (key.Name == "option4")
                            return (@this, x) => @this.Option4 = x.ValString;
                        if (key.Name == "option5")
                            return (@this, x) => @this.Option5 = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (VoteOptions is not { } callback)
                        return;
                    var @this = new Source1VoteOptionsEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "endmatch_mapvote_selecting_map")
            {
                var keys = descriptor.Keys.Select(Action<Source1EndmatchMapvoteSelectingMapEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "count")
                            return (@this, x) => @this.Count = x.ValByte;
                        if (key.Name == "slot1")
                            return (@this, x) => @this.Slot1 = x.ValByte;
                        if (key.Name == "slot2")
                            return (@this, x) => @this.Slot2 = x.ValByte;
                        if (key.Name == "slot3")
                            return (@this, x) => @this.Slot3 = x.ValByte;
                        if (key.Name == "slot4")
                            return (@this, x) => @this.Slot4 = x.ValByte;
                        if (key.Name == "slot5")
                            return (@this, x) => @this.Slot5 = x.ValByte;
                        if (key.Name == "slot6")
                            return (@this, x) => @this.Slot6 = x.ValByte;
                        if (key.Name == "slot7")
                            return (@this, x) => @this.Slot7 = x.ValByte;
                        if (key.Name == "slot8")
                            return (@this, x) => @this.Slot8 = x.ValByte;
                        if (key.Name == "slot9")
                            return (@this, x) => @this.Slot9 = x.ValByte;
                        if (key.Name == "slot10")
                            return (@this, x) => @this.Slot10 = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (EndmatchMapvoteSelectingMap is not { } callback)
                        return;
                    var @this = new Source1EndmatchMapvoteSelectingMapEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "endmatch_cmm_start_reveal_items")
            {
                var keys = descriptor.Keys.Select(Action<Source1EndmatchCmmStartRevealItemsEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (EndmatchCmmStartRevealItems is not { } callback)
                        return;
                    var @this = new Source1EndmatchCmmStartRevealItemsEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "client_loadout_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1ClientLoadoutChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ClientLoadoutChanged is not { } callback)
                        return;
                    var @this = new Source1ClientLoadoutChangedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "add_player_sonar_icon")
            {
                var keys = descriptor.Keys.Select(Action<Source1AddPlayerSonarIconEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "pos_x")
                            return (@this, x) => @this.PosX = x.ValFloat;
                        if (key.Name == "pos_y")
                            return (@this, x) => @this.PosY = x.ValFloat;
                        if (key.Name == "pos_z")
                            return (@this, x) => @this.PosZ = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (AddPlayerSonarIcon is not { } callback)
                        return;
                    var @this = new Source1AddPlayerSonarIconEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "door_open")
            {
                var keys = descriptor.Keys.Select(Action<Source1DoorOpenEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DoorOpen is not { } callback)
                        return;
                    var @this = new Source1DoorOpenEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "door_closed")
            {
                var keys = descriptor.Keys.Select(Action<Source1DoorClosedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DoorClosed is not { } callback)
                        return;
                    var @this = new Source1DoorClosedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "door_break")
            {
                var keys = descriptor.Keys.Select(Action<Source1DoorBreakEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        if (key.Name == "dmgstate")
                            return (@this, x) => @this.Dmgstate = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DoorBreak is not { } callback)
                        return;
                    var @this = new Source1DoorBreakEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "add_bullet_hit_marker")
            {
                var keys = descriptor.Keys.Select(Action<Source1AddBulletHitMarkerEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "bone")
                            return (@this, x) => @this.Bone = x.ValShort;
                        if (key.Name == "pos_x")
                            return (@this, x) => @this.PosX = x.ValShort;
                        if (key.Name == "pos_y")
                            return (@this, x) => @this.PosY = x.ValShort;
                        if (key.Name == "pos_z")
                            return (@this, x) => @this.PosZ = x.ValShort;
                        if (key.Name == "ang_x")
                            return (@this, x) => @this.AngX = x.ValShort;
                        if (key.Name == "ang_y")
                            return (@this, x) => @this.AngY = x.ValShort;
                        if (key.Name == "ang_z")
                            return (@this, x) => @this.AngZ = x.ValShort;
                        if (key.Name == "start_x")
                            return (@this, x) => @this.StartX = x.ValShort;
                        if (key.Name == "start_y")
                            return (@this, x) => @this.StartY = x.ValShort;
                        if (key.Name == "start_z")
                            return (@this, x) => @this.StartZ = x.ValShort;
                        if (key.Name == "hit")
                            return (@this, x) => @this.Hit = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (AddBulletHitMarker is not { } callback)
                        return;
                    var @this = new Source1AddBulletHitMarkerEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "other_death")
            {
                var keys = descriptor.Keys.Select(Action<Source1OtherDeathEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "otherid")
                            return (@this, x) => @this.Otherid = x.ValShort;
                        if (key.Name == "othertype")
                            return (@this, x) => @this.Othertype = x.ValString;
                        if (key.Name == "attacker")
                            return (@this, x) => @this.Attacker = x.ValShort;
                        if (key.Name == "weapon")
                            return (@this, x) => @this.Weapon = x.ValString;
                        if (key.Name == "weapon_itemid")
                            return (@this, x) => @this.WeaponItemid = x.ValString;
                        if (key.Name == "weapon_fauxitemid")
                            return (@this, x) => @this.WeaponFauxitemid = x.ValString;
                        if (key.Name == "weapon_originalowner_xuid")
                            return (@this, x) => @this.WeaponOriginalownerXuid = x.ValString;
                        if (key.Name == "headshot")
                            return (@this, x) => @this.Headshot = x.ValBool;
                        if (key.Name == "penetrated")
                            return (@this, x) => @this.Penetrated = x.ValShort;
                        if (key.Name == "noscope")
                            return (@this, x) => @this.Noscope = x.ValBool;
                        if (key.Name == "thrusmoke")
                            return (@this, x) => @this.Thrusmoke = x.ValBool;
                        if (key.Name == "attackerblind")
                            return (@this, x) => @this.Attackerblind = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (OtherDeath is not { } callback)
                        return;
                    var @this = new Source1OtherDeathEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "item_purchase")
            {
                var keys = descriptor.Keys.Select(Action<Source1ItemPurchaseEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "team")
                            return (@this, x) => @this.Team = x.ValShort;
                        if (key.Name == "loadout")
                            return (@this, x) => @this.Loadout = x.ValShort;
                        if (key.Name == "weapon")
                            return (@this, x) => @this.Weapon = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ItemPurchase is not { } callback)
                        return;
                    var @this = new Source1ItemPurchaseEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "bomb_beginplant")
            {
                var keys = descriptor.Keys.Select(Action<Source1BombBeginplantEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "site")
                            return (@this, x) => @this.Site = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BombBeginplant is not { } callback)
                        return;
                    var @this = new Source1BombBeginplantEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "bomb_abortplant")
            {
                var keys = descriptor.Keys.Select(Action<Source1BombAbortplantEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "site")
                            return (@this, x) => @this.Site = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BombAbortplant is not { } callback)
                        return;
                    var @this = new Source1BombAbortplantEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "bomb_planted")
            {
                var keys = descriptor.Keys.Select(Action<Source1BombPlantedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "site")
                            return (@this, x) => @this.Site = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BombPlanted is not { } callback)
                        return;
                    var @this = new Source1BombPlantedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "bomb_defused")
            {
                var keys = descriptor.Keys.Select(Action<Source1BombDefusedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "site")
                            return (@this, x) => @this.Site = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BombDefused is not { } callback)
                        return;
                    var @this = new Source1BombDefusedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "bomb_exploded")
            {
                var keys = descriptor.Keys.Select(Action<Source1BombExplodedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "site")
                            return (@this, x) => @this.Site = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BombExploded is not { } callback)
                        return;
                    var @this = new Source1BombExplodedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "bomb_dropped")
            {
                var keys = descriptor.Keys.Select(Action<Source1BombDroppedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BombDropped is not { } callback)
                        return;
                    var @this = new Source1BombDroppedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "bomb_pickup")
            {
                var keys = descriptor.Keys.Select(Action<Source1BombPickupEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BombPickup is not { } callback)
                        return;
                    var @this = new Source1BombPickupEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "defuser_dropped")
            {
                var keys = descriptor.Keys.Select(Action<Source1DefuserDroppedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DefuserDropped is not { } callback)
                        return;
                    var @this = new Source1DefuserDroppedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "defuser_pickup")
            {
                var keys = descriptor.Keys.Select(Action<Source1DefuserPickupEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValLong;
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DefuserPickup is not { } callback)
                        return;
                    var @this = new Source1DefuserPickupEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "announce_phase_end")
            {
                var keys = descriptor.Keys.Select(Action<Source1AnnouncePhaseEndEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (AnnouncePhaseEnd is not { } callback)
                        return;
                    var @this = new Source1AnnouncePhaseEndEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "cs_intermission")
            {
                var keys = descriptor.Keys.Select(Action<Source1CsIntermissionEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (CsIntermission is not { } callback)
                        return;
                    var @this = new Source1CsIntermissionEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "bomb_begindefuse")
            {
                var keys = descriptor.Keys.Select(Action<Source1BombBegindefuseEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "haskit")
                            return (@this, x) => @this.Haskit = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BombBegindefuse is not { } callback)
                        return;
                    var @this = new Source1BombBegindefuseEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "bomb_abortdefuse")
            {
                var keys = descriptor.Keys.Select(Action<Source1BombAbortdefuseEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BombAbortdefuse is not { } callback)
                        return;
                    var @this = new Source1BombAbortdefuseEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hostage_follows")
            {
                var keys = descriptor.Keys.Select(Action<Source1HostageFollowsEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "hostage")
                            return (@this, x) => @this.Hostage = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HostageFollows is not { } callback)
                        return;
                    var @this = new Source1HostageFollowsEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hostage_hurt")
            {
                var keys = descriptor.Keys.Select(Action<Source1HostageHurtEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "hostage")
                            return (@this, x) => @this.Hostage = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HostageHurt is not { } callback)
                        return;
                    var @this = new Source1HostageHurtEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hostage_killed")
            {
                var keys = descriptor.Keys.Select(Action<Source1HostageKilledEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "hostage")
                            return (@this, x) => @this.Hostage = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HostageKilled is not { } callback)
                        return;
                    var @this = new Source1HostageKilledEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hostage_rescued")
            {
                var keys = descriptor.Keys.Select(Action<Source1HostageRescuedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "hostage")
                            return (@this, x) => @this.Hostage = x.ValShort;
                        if (key.Name == "site")
                            return (@this, x) => @this.Site = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HostageRescued is not { } callback)
                        return;
                    var @this = new Source1HostageRescuedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hostage_stops_following")
            {
                var keys = descriptor.Keys.Select(Action<Source1HostageStopsFollowingEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "hostage")
                            return (@this, x) => @this.Hostage = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HostageStopsFollowing is not { } callback)
                        return;
                    var @this = new Source1HostageStopsFollowingEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hostage_rescued_all")
            {
                var keys = descriptor.Keys.Select(Action<Source1HostageRescuedAllEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HostageRescuedAll is not { } callback)
                        return;
                    var @this = new Source1HostageRescuedAllEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hostage_call_for_help")
            {
                var keys = descriptor.Keys.Select(Action<Source1HostageCallForHelpEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "hostage")
                            return (@this, x) => @this.Hostage = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HostageCallForHelp is not { } callback)
                        return;
                    var @this = new Source1HostageCallForHelpEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "vip_escaped")
            {
                var keys = descriptor.Keys.Select(Action<Source1VipEscapedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (VipEscaped is not { } callback)
                        return;
                    var @this = new Source1VipEscapedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "vip_killed")
            {
                var keys = descriptor.Keys.Select(Action<Source1VipKilledEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "attacker")
                            return (@this, x) => @this.Attacker = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (VipKilled is not { } callback)
                        return;
                    var @this = new Source1VipKilledEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_radio")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerRadioEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "slot")
                            return (@this, x) => @this.Slot = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerRadio is not { } callback)
                        return;
                    var @this = new Source1PlayerRadioEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "bomb_beep")
            {
                var keys = descriptor.Keys.Select(Action<Source1BombBeepEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BombBeep is not { } callback)
                        return;
                    var @this = new Source1BombBeepEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "weapon_fire")
            {
                var keys = descriptor.Keys.Select(Action<Source1WeaponFireEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "weapon")
                            return (@this, x) => @this.Weapon = x.ValString;
                        if (key.Name == "silenced")
                            return (@this, x) => @this.Silenced = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (WeaponFire is not { } callback)
                        return;
                    var @this = new Source1WeaponFireEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "weapon_fire_on_empty")
            {
                var keys = descriptor.Keys.Select(Action<Source1WeaponFireOnEmptyEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "weapon")
                            return (@this, x) => @this.Weapon = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (WeaponFireOnEmpty is not { } callback)
                        return;
                    var @this = new Source1WeaponFireOnEmptyEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "grenade_thrown")
            {
                var keys = descriptor.Keys.Select(Action<Source1GrenadeThrownEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "weapon")
                            return (@this, x) => @this.Weapon = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (GrenadeThrown is not { } callback)
                        return;
                    var @this = new Source1GrenadeThrownEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "weapon_outofammo")
            {
                var keys = descriptor.Keys.Select(Action<Source1WeaponOutofammoEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (WeaponOutofammo is not { } callback)
                        return;
                    var @this = new Source1WeaponOutofammoEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "weapon_reload")
            {
                var keys = descriptor.Keys.Select(Action<Source1WeaponReloadEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (WeaponReload is not { } callback)
                        return;
                    var @this = new Source1WeaponReloadEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "weapon_zoom")
            {
                var keys = descriptor.Keys.Select(Action<Source1WeaponZoomEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (WeaponZoom is not { } callback)
                        return;
                    var @this = new Source1WeaponZoomEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "silencer_detach")
            {
                var keys = descriptor.Keys.Select(Action<Source1SilencerDetachEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (SilencerDetach is not { } callback)
                        return;
                    var @this = new Source1SilencerDetachEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "inspect_weapon")
            {
                var keys = descriptor.Keys.Select(Action<Source1InspectWeaponEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (InspectWeapon is not { } callback)
                        return;
                    var @this = new Source1InspectWeaponEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "weapon_zoom_rifle")
            {
                var keys = descriptor.Keys.Select(Action<Source1WeaponZoomRifleEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (WeaponZoomRifle is not { } callback)
                        return;
                    var @this = new Source1WeaponZoomRifleEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_spawned")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerSpawnedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "inrestart")
                            return (@this, x) => @this.Inrestart = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerSpawned is not { } callback)
                        return;
                    var @this = new Source1PlayerSpawnedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "item_pickup")
            {
                var keys = descriptor.Keys.Select(Action<Source1ItemPickupEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "item")
                            return (@this, x) => @this.Item = x.ValString;
                        if (key.Name == "silent")
                            return (@this, x) => @this.Silent = x.ValBool;
                        if (key.Name == "defindex")
                            return (@this, x) => @this.Defindex = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ItemPickup is not { } callback)
                        return;
                    var @this = new Source1ItemPickupEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "item_pickup_slerp")
            {
                var keys = descriptor.Keys.Select(Action<Source1ItemPickupSlerpEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "index")
                            return (@this, x) => @this.Index = x.ValShort;
                        if (key.Name == "behavior")
                            return (@this, x) => @this.Behavior = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ItemPickupSlerp is not { } callback)
                        return;
                    var @this = new Source1ItemPickupSlerpEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "item_pickup_failed")
            {
                var keys = descriptor.Keys.Select(Action<Source1ItemPickupFailedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "item")
                            return (@this, x) => @this.Item = x.ValString;
                        if (key.Name == "reason")
                            return (@this, x) => @this.Reason = x.ValShort;
                        if (key.Name == "limit")
                            return (@this, x) => @this.Limit = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ItemPickupFailed is not { } callback)
                        return;
                    var @this = new Source1ItemPickupFailedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "item_remove")
            {
                var keys = descriptor.Keys.Select(Action<Source1ItemRemoveEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "item")
                            return (@this, x) => @this.Item = x.ValString;
                        if (key.Name == "defindex")
                            return (@this, x) => @this.Defindex = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ItemRemove is not { } callback)
                        return;
                    var @this = new Source1ItemRemoveEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "ammo_pickup")
            {
                var keys = descriptor.Keys.Select(Action<Source1AmmoPickupEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "item")
                            return (@this, x) => @this.Item = x.ValString;
                        if (key.Name == "index")
                            return (@this, x) => @this.Index = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (AmmoPickup is not { } callback)
                        return;
                    var @this = new Source1AmmoPickupEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "item_equip")
            {
                var keys = descriptor.Keys.Select(Action<Source1ItemEquipEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "item")
                            return (@this, x) => @this.Item = x.ValString;
                        if (key.Name == "defindex")
                            return (@this, x) => @this.Defindex = x.ValLong;
                        if (key.Name == "canzoom")
                            return (@this, x) => @this.Canzoom = x.ValBool;
                        if (key.Name == "hassilencer")
                            return (@this, x) => @this.Hassilencer = x.ValBool;
                        if (key.Name == "issilenced")
                            return (@this, x) => @this.Issilenced = x.ValBool;
                        if (key.Name == "hastracers")
                            return (@this, x) => @this.Hastracers = x.ValBool;
                        if (key.Name == "weptype")
                            return (@this, x) => @this.Weptype = x.ValShort;
                        if (key.Name == "ispainted")
                            return (@this, x) => @this.Ispainted = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ItemEquip is not { } callback)
                        return;
                    var @this = new Source1ItemEquipEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "enter_buyzone")
            {
                var keys = descriptor.Keys.Select(Action<Source1EnterBuyzoneEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "canbuy")
                            return (@this, x) => @this.Canbuy = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (EnterBuyzone is not { } callback)
                        return;
                    var @this = new Source1EnterBuyzoneEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "exit_buyzone")
            {
                var keys = descriptor.Keys.Select(Action<Source1ExitBuyzoneEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "canbuy")
                            return (@this, x) => @this.Canbuy = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ExitBuyzone is not { } callback)
                        return;
                    var @this = new Source1ExitBuyzoneEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "buytime_ended")
            {
                var keys = descriptor.Keys.Select(Action<Source1BuytimeEndedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BuytimeEnded is not { } callback)
                        return;
                    var @this = new Source1BuytimeEndedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "enter_bombzone")
            {
                var keys = descriptor.Keys.Select(Action<Source1EnterBombzoneEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "hasbomb")
                            return (@this, x) => @this.Hasbomb = x.ValBool;
                        if (key.Name == "isplanted")
                            return (@this, x) => @this.Isplanted = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (EnterBombzone is not { } callback)
                        return;
                    var @this = new Source1EnterBombzoneEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "exit_bombzone")
            {
                var keys = descriptor.Keys.Select(Action<Source1ExitBombzoneEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "hasbomb")
                            return (@this, x) => @this.Hasbomb = x.ValBool;
                        if (key.Name == "isplanted")
                            return (@this, x) => @this.Isplanted = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ExitBombzone is not { } callback)
                        return;
                    var @this = new Source1ExitBombzoneEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "enter_rescue_zone")
            {
                var keys = descriptor.Keys.Select(Action<Source1EnterRescueZoneEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (EnterRescueZone is not { } callback)
                        return;
                    var @this = new Source1EnterRescueZoneEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "exit_rescue_zone")
            {
                var keys = descriptor.Keys.Select(Action<Source1ExitRescueZoneEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ExitRescueZone is not { } callback)
                        return;
                    var @this = new Source1ExitRescueZoneEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "silencer_off")
            {
                var keys = descriptor.Keys.Select(Action<Source1SilencerOffEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (SilencerOff is not { } callback)
                        return;
                    var @this = new Source1SilencerOffEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "silencer_on")
            {
                var keys = descriptor.Keys.Select(Action<Source1SilencerOnEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (SilencerOn is not { } callback)
                        return;
                    var @this = new Source1SilencerOnEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "buymenu_open")
            {
                var keys = descriptor.Keys.Select(Action<Source1BuymenuOpenEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BuymenuOpen is not { } callback)
                        return;
                    var @this = new Source1BuymenuOpenEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "buymenu_close")
            {
                var keys = descriptor.Keys.Select(Action<Source1BuymenuCloseEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BuymenuClose is not { } callback)
                        return;
                    var @this = new Source1BuymenuCloseEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "round_prestart")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundPrestartEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (RoundPrestart is not { } callback)
                        return;
                    var @this = new Source1RoundPrestartEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "round_poststart")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundPoststartEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (RoundPoststart is not { } callback)
                        return;
                    var @this = new Source1RoundPoststartEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "grenade_bounce")
            {
                var keys = descriptor.Keys.Select(Action<Source1GrenadeBounceEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (GrenadeBounce is not { } callback)
                        return;
                    var @this = new Source1GrenadeBounceEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hegrenade_detonate")
            {
                var keys = descriptor.Keys.Select(Action<Source1HegrenadeDetonateEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValShort;
                        if (key.Name == "x")
                            return (@this, x) => @this.X = x.ValFloat;
                        if (key.Name == "y")
                            return (@this, x) => @this.Y = x.ValFloat;
                        if (key.Name == "z")
                            return (@this, x) => @this.Z = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HegrenadeDetonate is not { } callback)
                        return;
                    var @this = new Source1HegrenadeDetonateEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "flashbang_detonate")
            {
                var keys = descriptor.Keys.Select(Action<Source1FlashbangDetonateEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValShort;
                        if (key.Name == "x")
                            return (@this, x) => @this.X = x.ValFloat;
                        if (key.Name == "y")
                            return (@this, x) => @this.Y = x.ValFloat;
                        if (key.Name == "z")
                            return (@this, x) => @this.Z = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (FlashbangDetonate is not { } callback)
                        return;
                    var @this = new Source1FlashbangDetonateEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "smokegrenade_detonate")
            {
                var keys = descriptor.Keys.Select(Action<Source1SmokegrenadeDetonateEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValShort;
                        if (key.Name == "x")
                            return (@this, x) => @this.X = x.ValFloat;
                        if (key.Name == "y")
                            return (@this, x) => @this.Y = x.ValFloat;
                        if (key.Name == "z")
                            return (@this, x) => @this.Z = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (SmokegrenadeDetonate is not { } callback)
                        return;
                    var @this = new Source1SmokegrenadeDetonateEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "smokegrenade_expired")
            {
                var keys = descriptor.Keys.Select(Action<Source1SmokegrenadeExpiredEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValShort;
                        if (key.Name == "x")
                            return (@this, x) => @this.X = x.ValFloat;
                        if (key.Name == "y")
                            return (@this, x) => @this.Y = x.ValFloat;
                        if (key.Name == "z")
                            return (@this, x) => @this.Z = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (SmokegrenadeExpired is not { } callback)
                        return;
                    var @this = new Source1SmokegrenadeExpiredEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "molotov_detonate")
            {
                var keys = descriptor.Keys.Select(Action<Source1MolotovDetonateEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "x")
                            return (@this, x) => @this.X = x.ValFloat;
                        if (key.Name == "y")
                            return (@this, x) => @this.Y = x.ValFloat;
                        if (key.Name == "z")
                            return (@this, x) => @this.Z = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (MolotovDetonate is not { } callback)
                        return;
                    var @this = new Source1MolotovDetonateEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "decoy_detonate")
            {
                var keys = descriptor.Keys.Select(Action<Source1DecoyDetonateEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValShort;
                        if (key.Name == "x")
                            return (@this, x) => @this.X = x.ValFloat;
                        if (key.Name == "y")
                            return (@this, x) => @this.Y = x.ValFloat;
                        if (key.Name == "z")
                            return (@this, x) => @this.Z = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DecoyDetonate is not { } callback)
                        return;
                    var @this = new Source1DecoyDetonateEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "decoy_started")
            {
                var keys = descriptor.Keys.Select(Action<Source1DecoyStartedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValShort;
                        if (key.Name == "x")
                            return (@this, x) => @this.X = x.ValFloat;
                        if (key.Name == "y")
                            return (@this, x) => @this.Y = x.ValFloat;
                        if (key.Name == "z")
                            return (@this, x) => @this.Z = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DecoyStarted is not { } callback)
                        return;
                    var @this = new Source1DecoyStartedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "tagrenade_detonate")
            {
                var keys = descriptor.Keys.Select(Action<Source1TagrenadeDetonateEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValShort;
                        if (key.Name == "x")
                            return (@this, x) => @this.X = x.ValFloat;
                        if (key.Name == "y")
                            return (@this, x) => @this.Y = x.ValFloat;
                        if (key.Name == "z")
                            return (@this, x) => @this.Z = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (TagrenadeDetonate is not { } callback)
                        return;
                    var @this = new Source1TagrenadeDetonateEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "inferno_startburn")
            {
                var keys = descriptor.Keys.Select(Action<Source1InfernoStartburnEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValShort;
                        if (key.Name == "x")
                            return (@this, x) => @this.X = x.ValFloat;
                        if (key.Name == "y")
                            return (@this, x) => @this.Y = x.ValFloat;
                        if (key.Name == "z")
                            return (@this, x) => @this.Z = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (InfernoStartburn is not { } callback)
                        return;
                    var @this = new Source1InfernoStartburnEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "inferno_expire")
            {
                var keys = descriptor.Keys.Select(Action<Source1InfernoExpireEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValShort;
                        if (key.Name == "x")
                            return (@this, x) => @this.X = x.ValFloat;
                        if (key.Name == "y")
                            return (@this, x) => @this.Y = x.ValFloat;
                        if (key.Name == "z")
                            return (@this, x) => @this.Z = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (InfernoExpire is not { } callback)
                        return;
                    var @this = new Source1InfernoExpireEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "inferno_extinguish")
            {
                var keys = descriptor.Keys.Select(Action<Source1InfernoExtinguishEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValShort;
                        if (key.Name == "x")
                            return (@this, x) => @this.X = x.ValFloat;
                        if (key.Name == "y")
                            return (@this, x) => @this.Y = x.ValFloat;
                        if (key.Name == "z")
                            return (@this, x) => @this.Z = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (InfernoExtinguish is not { } callback)
                        return;
                    var @this = new Source1InfernoExtinguishEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "decoy_firing")
            {
                var keys = descriptor.Keys.Select(Action<Source1DecoyFiringEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValShort;
                        if (key.Name == "x")
                            return (@this, x) => @this.X = x.ValFloat;
                        if (key.Name == "y")
                            return (@this, x) => @this.Y = x.ValFloat;
                        if (key.Name == "z")
                            return (@this, x) => @this.Z = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DecoyFiring is not { } callback)
                        return;
                    var @this = new Source1DecoyFiringEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "bullet_impact")
            {
                var keys = descriptor.Keys.Select(Action<Source1BulletImpactEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "x")
                            return (@this, x) => @this.X = x.ValFloat;
                        if (key.Name == "y")
                            return (@this, x) => @this.Y = x.ValFloat;
                        if (key.Name == "z")
                            return (@this, x) => @this.Z = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BulletImpact is not { } callback)
                        return;
                    var @this = new Source1BulletImpactEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_jump")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerJumpEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerJump is not { } callback)
                        return;
                    var @this = new Source1PlayerJumpEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_blind")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerBlindEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "attacker")
                            return (@this, x) => @this.Attacker = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValShort;
                        if (key.Name == "blind_duration")
                            return (@this, x) => @this.BlindDuration = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerBlind is not { } callback)
                        return;
                    var @this = new Source1PlayerBlindEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_falldamage")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerFalldamageEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "damage")
                            return (@this, x) => @this.Damage = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerFalldamage is not { } callback)
                        return;
                    var @this = new Source1PlayerFalldamageEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "door_moving")
            {
                var keys = descriptor.Keys.Select(Action<Source1DoorMovingEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "entindex")
                            return (@this, x) => @this.Entindex = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DoorMoving is not { } callback)
                        return;
                    var @this = new Source1DoorMovingEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "mb_input_lock_success")
            {
                var keys = descriptor.Keys.Select(Action<Source1MbInputLockSuccessEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (MbInputLockSuccess is not { } callback)
                        return;
                    var @this = new Source1MbInputLockSuccessEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "mb_input_lock_cancel")
            {
                var keys = descriptor.Keys.Select(Action<Source1MbInputLockCancelEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (MbInputLockCancel is not { } callback)
                        return;
                    var @this = new Source1MbInputLockCancelEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "nav_blocked")
            {
                var keys = descriptor.Keys.Select(Action<Source1NavBlockedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "area")
                            return (@this, x) => @this.Area = x.ValLong;
                        if (key.Name == "blocked")
                            return (@this, x) => @this.Blocked = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (NavBlocked is not { } callback)
                        return;
                    var @this = new Source1NavBlockedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "nav_generate")
            {
                var keys = descriptor.Keys.Select(Action<Source1NavGenerateEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (NavGenerate is not { } callback)
                        return;
                    var @this = new Source1NavGenerateEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "achievement_info_loaded")
            {
                var keys = descriptor.Keys.Select(Action<Source1AchievementInfoLoadedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (AchievementInfoLoaded is not { } callback)
                        return;
                    var @this = new Source1AchievementInfoLoadedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hltv_changed_mode")
            {
                var keys = descriptor.Keys.Select(Action<Source1HltvChangedModeEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "oldmode")
                            return (@this, x) => @this.Oldmode = x.ValLong;
                        if (key.Name == "newmode")
                            return (@this, x) => @this.Newmode = x.ValLong;
                        if (key.Name == "obs_target")
                            return (@this, x) => @this.ObsTarget = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HltvChangedMode is not { } callback)
                        return;
                    var @this = new Source1HltvChangedModeEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "cs_game_disconnected")
            {
                var keys = descriptor.Keys.Select(Action<Source1CsGameDisconnectedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (CsGameDisconnected is not { } callback)
                        return;
                    var @this = new Source1CsGameDisconnectedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "cs_round_final_beep")
            {
                var keys = descriptor.Keys.Select(Action<Source1CsRoundFinalBeepEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (CsRoundFinalBeep is not { } callback)
                        return;
                    var @this = new Source1CsRoundFinalBeepEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "cs_round_start_beep")
            {
                var keys = descriptor.Keys.Select(Action<Source1CsRoundStartBeepEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (CsRoundStartBeep is not { } callback)
                        return;
                    var @this = new Source1CsRoundStartBeepEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "cs_win_panel_round")
            {
                var keys = descriptor.Keys.Select(Action<Source1CsWinPanelRoundEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "show_timer_defend")
                            return (@this, x) => @this.ShowTimerDefend = x.ValBool;
                        if (key.Name == "show_timer_attack")
                            return (@this, x) => @this.ShowTimerAttack = x.ValBool;
                        if (key.Name == "timer_time")
                            return (@this, x) => @this.TimerTime = x.ValShort;
                        if (key.Name == "final_event")
                            return (@this, x) => @this.FinalEvent = x.ValByte;
                        if (key.Name == "funfact_token")
                            return (@this, x) => @this.FunfactToken = x.ValString;
                        if (key.Name == "funfact_player")
                            return (@this, x) => @this.FunfactPlayer = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "funfact_data1")
                            return (@this, x) => @this.FunfactData1 = x.ValLong;
                        if (key.Name == "funfact_data2")
                            return (@this, x) => @this.FunfactData2 = x.ValLong;
                        if (key.Name == "funfact_data3")
                            return (@this, x) => @this.FunfactData3 = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (CsWinPanelRound is not { } callback)
                        return;
                    var @this = new Source1CsWinPanelRoundEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "cs_win_panel_match")
            {
                var keys = descriptor.Keys.Select(Action<Source1CsWinPanelMatchEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (CsWinPanelMatch is not { } callback)
                        return;
                    var @this = new Source1CsWinPanelMatchEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "cs_match_end_restart")
            {
                var keys = descriptor.Keys.Select(Action<Source1CsMatchEndRestartEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (CsMatchEndRestart is not { } callback)
                        return;
                    var @this = new Source1CsMatchEndRestartEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "cs_pre_restart")
            {
                var keys = descriptor.Keys.Select(Action<Source1CsPreRestartEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (CsPreRestart is not { } callback)
                        return;
                    var @this = new Source1CsPreRestartEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "show_deathpanel")
            {
                var keys = descriptor.Keys.Select(Action<Source1ShowDeathpanelEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "victim")
                            return (@this, x) => @this.Victim = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "victim_pawn")
                            return (@this, x) => @this.VictimPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "killer")
                            return (@this, x) => @this.Killer = x.ValLong;
                        if (key.Name == "killer_controller")
                            return (@this, x) => @this.KillerController = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "hits_taken")
                            return (@this, x) => @this.HitsTaken = x.ValShort;
                        if (key.Name == "damage_taken")
                            return (@this, x) => @this.DamageTaken = x.ValShort;
                        if (key.Name == "hits_given")
                            return (@this, x) => @this.HitsGiven = x.ValShort;
                        if (key.Name == "damage_given")
                            return (@this, x) => @this.DamageGiven = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ShowDeathpanel is not { } callback)
                        return;
                    var @this = new Source1ShowDeathpanelEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "hide_deathpanel")
            {
                var keys = descriptor.Keys.Select(Action<Source1HideDeathpanelEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (HideDeathpanel is not { } callback)
                        return;
                    var @this = new Source1HideDeathpanelEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_avenged_teammate")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerAvengedTeammateEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "avenger_id")
                            return (@this, x) => @this.AvengerId = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "avenged_player_id")
                            return (@this, x) => @this.AvengedPlayerId = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerAvengedTeammate is not { } callback)
                        return;
                    var @this = new Source1PlayerAvengedTeammateEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "achievement_earned_local")
            {
                var keys = descriptor.Keys.Select(Action<Source1AchievementEarnedLocalEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "achievement")
                            return (@this, x) => @this.Achievement = x.ValShort;
                        if (key.Name == "splitscreenplayer")
                            return (@this, x) => @this.Splitscreenplayer = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (AchievementEarnedLocal is not { } callback)
                        return;
                    var @this = new Source1AchievementEarnedLocalEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "repost_xbox_achievements")
            {
                var keys = descriptor.Keys.Select(Action<Source1RepostXboxAchievementsEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "splitscreenplayer")
                            return (@this, x) => @this.Splitscreenplayer = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (RepostXboxAchievements is not { } callback)
                        return;
                    var @this = new Source1RepostXboxAchievementsEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "match_end_conditions")
            {
                var keys = descriptor.Keys.Select(Action<Source1MatchEndConditionsEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "frags")
                            return (@this, x) => @this.Frags = x.ValLong;
                        if (key.Name == "max_rounds")
                            return (@this, x) => @this.MaxRounds = x.ValLong;
                        if (key.Name == "win_rounds")
                            return (@this, x) => @this.WinRounds = x.ValLong;
                        if (key.Name == "time")
                            return (@this, x) => @this.Time = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (MatchEndConditions is not { } callback)
                        return;
                    var @this = new Source1MatchEndConditionsEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "round_mvp")
            {
                var keys = descriptor.Keys.Select(Action<Source1RoundMvpEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "reason")
                            return (@this, x) => @this.Reason = x.ValShort;
                        if (key.Name == "value")
                            return (@this, x) => @this.Value = x.ValLong;
                        if (key.Name == "musickitmvps")
                            return (@this, x) => @this.Musickitmvps = x.ValLong;
                        if (key.Name == "nomusic")
                            return (@this, x) => @this.Nomusic = x.ValByte;
                        if (key.Name == "musickitid")
                            return (@this, x) => @this.Musickitid = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (RoundMvp is not { } callback)
                        return;
                    var @this = new Source1RoundMvpEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "show_survival_respawn_status")
            {
                var keys = descriptor.Keys.Select(Action<Source1ShowSurvivalRespawnStatusEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "loc_token")
                            return (@this, x) => @this.LocToken = x.ValString;
                        if (key.Name == "duration")
                            return (@this, x) => @this.Duration = x.ValLong;
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ShowSurvivalRespawnStatus is not { } callback)
                        return;
                    var @this = new Source1ShowSurvivalRespawnStatusEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "client_disconnect")
            {
                var keys = descriptor.Keys.Select(Action<Source1ClientDisconnectEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ClientDisconnect is not { } callback)
                        return;
                    var @this = new Source1ClientDisconnectEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "gg_killed_enemy")
            {
                var keys = descriptor.Keys.Select(Action<Source1GgKilledEnemyEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "victimid")
                            return (@this, x) => @this.Victimid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "attackerid")
                            return (@this, x) => @this.Attackerid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "dominated")
                            return (@this, x) => @this.Dominated = x.ValShort;
                        if (key.Name == "revenge")
                            return (@this, x) => @this.Revenge = x.ValShort;
                        if (key.Name == "bonus")
                            return (@this, x) => @this.Bonus = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (GgKilledEnemy is not { } callback)
                        return;
                    var @this = new Source1GgKilledEnemyEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "switch_team")
            {
                var keys = descriptor.Keys.Select(Action<Source1SwitchTeamEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "numPlayers")
                            return (@this, x) => @this.NumPlayers = x.ValShort;
                        if (key.Name == "numSpectators")
                            return (@this, x) => @this.NumSpectators = x.ValShort;
                        if (key.Name == "avg_rank")
                            return (@this, x) => @this.AvgRank = x.ValShort;
                        if (key.Name == "numTSlotsFree")
                            return (@this, x) => @this.NumTSlotsFree = x.ValShort;
                        if (key.Name == "numCTSlotsFree")
                            return (@this, x) => @this.NumCTSlotsFree = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (SwitchTeam is not { } callback)
                        return;
                    var @this = new Source1SwitchTeamEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "write_profile_data")
            {
                var keys = descriptor.Keys.Select(Action<Source1WriteProfileDataEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (WriteProfileData is not { } callback)
                        return;
                    var @this = new Source1WriteProfileDataEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "trial_time_expired")
            {
                var keys = descriptor.Keys.Select(Action<Source1TrialTimeExpiredEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (TrialTimeExpired is not { } callback)
                        return;
                    var @this = new Source1TrialTimeExpiredEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "update_matchmaking_stats")
            {
                var keys = descriptor.Keys.Select(Action<Source1UpdateMatchmakingStatsEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (UpdateMatchmakingStats is not { } callback)
                        return;
                    var @this = new Source1UpdateMatchmakingStatsEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_reset_vote")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerResetVoteEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "vote")
                            return (@this, x) => @this.Vote = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerResetVote is not { } callback)
                        return;
                    var @this = new Source1PlayerResetVoteEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "enable_restart_voting")
            {
                var keys = descriptor.Keys.Select(Action<Source1EnableRestartVotingEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "enable")
                            return (@this, x) => @this.Enable = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (EnableRestartVoting is not { } callback)
                        return;
                    var @this = new Source1EnableRestartVotingEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "sfuievent")
            {
                var keys = descriptor.Keys.Select(Action<Source1SfuieventEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "action")
                            return (@this, x) => @this.Action = x.ValString;
                        if (key.Name == "data")
                            return (@this, x) => @this.Data = x.ValString;
                        if (key.Name == "slot")
                            return (@this, x) => @this.Slot = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (Sfuievent is not { } callback)
                        return;
                    var @this = new Source1SfuieventEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "start_vote")
            {
                var keys = descriptor.Keys.Select(Action<Source1StartVoteEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "type")
                            return (@this, x) => @this.Type = x.ValByte;
                        if (key.Name == "vote_parameter")
                            return (@this, x) => @this.VoteParameter = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (StartVote is not { } callback)
                        return;
                    var @this = new Source1StartVoteEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_given_c4")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerGivenC4Event, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerGivenC4 is not { } callback)
                        return;
                    var @this = new Source1PlayerGivenC4Event();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "tr_player_flashbanged")
            {
                var keys = descriptor.Keys.Select(Action<Source1TrPlayerFlashbangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (TrPlayerFlashbanged is not { } callback)
                        return;
                    var @this = new Source1TrPlayerFlashbangedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "tr_mark_complete")
            {
                var keys = descriptor.Keys.Select(Action<Source1TrMarkCompleteEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "complete")
                            return (@this, x) => @this.Complete = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (TrMarkComplete is not { } callback)
                        return;
                    var @this = new Source1TrMarkCompleteEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "tr_mark_best_time")
            {
                var keys = descriptor.Keys.Select(Action<Source1TrMarkBestTimeEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "time")
                            return (@this, x) => @this.Time = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (TrMarkBestTime is not { } callback)
                        return;
                    var @this = new Source1TrMarkBestTimeEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "tr_exit_hint_trigger")
            {
                var keys = descriptor.Keys.Select(Action<Source1TrExitHintTriggerEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (TrExitHintTrigger is not { } callback)
                        return;
                    var @this = new Source1TrExitHintTriggerEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "bot_takeover")
            {
                var keys = descriptor.Keys.Select(Action<Source1BotTakeoverEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "botid")
                            return (@this, x) => @this.Botid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "p")
                            return (@this, x) => @this.P = x.ValFloat;
                        if (key.Name == "y")
                            return (@this, x) => @this.Y = x.ValFloat;
                        if (key.Name == "r")
                            return (@this, x) => @this.R = x.ValFloat;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BotTakeover is not { } callback)
                        return;
                    var @this = new Source1BotTakeoverEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "tr_show_finish_msgbox")
            {
                var keys = descriptor.Keys.Select(Action<Source1TrShowFinishMsgboxEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (TrShowFinishMsgbox is not { } callback)
                        return;
                    var @this = new Source1TrShowFinishMsgboxEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "tr_show_exit_msgbox")
            {
                var keys = descriptor.Keys.Select(Action<Source1TrShowExitMsgboxEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (TrShowExitMsgbox is not { } callback)
                        return;
                    var @this = new Source1TrShowExitMsgboxEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "jointeam_failed")
            {
                var keys = descriptor.Keys.Select(Action<Source1JointeamFailedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "reason")
                            return (@this, x) => @this.Reason = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (JointeamFailed is not { } callback)
                        return;
                    var @this = new Source1JointeamFailedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "teamchange_pending")
            {
                var keys = descriptor.Keys.Select(Action<Source1TeamchangePendingEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "toteam")
                            return (@this, x) => @this.Toteam = x.ValByte;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (TeamchangePending is not { } callback)
                        return;
                    var @this = new Source1TeamchangePendingEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "material_default_complete")
            {
                var keys = descriptor.Keys.Select(Action<Source1MaterialDefaultCompleteEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (MaterialDefaultComplete is not { } callback)
                        return;
                    var @this = new Source1MaterialDefaultCompleteEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "cs_prev_next_spectator")
            {
                var keys = descriptor.Keys.Select(Action<Source1CsPrevNextSpectatorEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "next")
                            return (@this, x) => @this.Next = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (CsPrevNextSpectator is not { } callback)
                        return;
                    var @this = new Source1CsPrevNextSpectatorEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "nextlevel_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1NextlevelChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "nextlevel")
                            return (@this, x) => @this.Nextlevel = x.ValString;
                        if (key.Name == "mapgroup")
                            return (@this, x) => @this.Mapgroup = x.ValString;
                        if (key.Name == "skirmishmode")
                            return (@this, x) => @this.Skirmishmode = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (NextlevelChanged is not { } callback)
                        return;
                    var @this = new Source1NextlevelChangedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "seasoncoin_levelup")
            {
                var keys = descriptor.Keys.Select(Action<Source1SeasoncoinLevelupEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "category")
                            return (@this, x) => @this.Category = x.ValShort;
                        if (key.Name == "rank")
                            return (@this, x) => @this.Rank = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (SeasoncoinLevelup is not { } callback)
                        return;
                    var @this = new Source1SeasoncoinLevelupEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "tournament_reward")
            {
                var keys = descriptor.Keys.Select(Action<Source1TournamentRewardEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "defindex")
                            return (@this, x) => @this.Defindex = x.ValLong;
                        if (key.Name == "totalrewards")
                            return (@this, x) => @this.Totalrewards = x.ValLong;
                        if (key.Name == "accountid")
                            return (@this, x) => @this.Accountid = x.ValLong;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (TournamentReward is not { } callback)
                        return;
                    var @this = new Source1TournamentRewardEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "start_halftime")
            {
                var keys = descriptor.Keys.Select(Action<Source1StartHalftimeEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (StartHalftime is not { } callback)
                        return;
                    var @this = new Source1StartHalftimeEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "ammo_refill")
            {
                var keys = descriptor.Keys.Select(Action<Source1AmmoRefillEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "success")
                            return (@this, x) => @this.Success = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (AmmoRefill is not { } callback)
                        return;
                    var @this = new Source1AmmoRefillEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "parachute_pickup")
            {
                var keys = descriptor.Keys.Select(Action<Source1ParachutePickupEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ParachutePickup is not { } callback)
                        return;
                    var @this = new Source1ParachutePickupEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "parachute_deploy")
            {
                var keys = descriptor.Keys.Select(Action<Source1ParachuteDeployEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ParachuteDeploy is not { } callback)
                        return;
                    var @this = new Source1ParachuteDeployEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "dronegun_attack")
            {
                var keys = descriptor.Keys.Select(Action<Source1DronegunAttackEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DronegunAttack is not { } callback)
                        return;
                    var @this = new Source1DronegunAttackEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "drone_dispatched")
            {
                var keys = descriptor.Keys.Select(Action<Source1DroneDispatchedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "priority")
                            return (@this, x) => @this.Priority = x.ValShort;
                        if (key.Name == "drone_dispatched")
                            return (@this, x) => @this.DroneDispatched = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DroneDispatched is not { } callback)
                        return;
                    var @this = new Source1DroneDispatchedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "loot_crate_visible")
            {
                var keys = descriptor.Keys.Select(Action<Source1LootCrateVisibleEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "subject")
                            return (@this, x) => @this.Subject = x.ValShort;
                        if (key.Name == "type")
                            return (@this, x) => @this.Type = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (LootCrateVisible is not { } callback)
                        return;
                    var @this = new Source1LootCrateVisibleEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "loot_crate_opened")
            {
                var keys = descriptor.Keys.Select(Action<Source1LootCrateOpenedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "type")
                            return (@this, x) => @this.Type = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (LootCrateOpened is not { } callback)
                        return;
                    var @this = new Source1LootCrateOpenedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "open_crate_instr")
            {
                var keys = descriptor.Keys.Select(Action<Source1OpenCrateInstrEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "subject")
                            return (@this, x) => @this.Subject = x.ValShort;
                        if (key.Name == "type")
                            return (@this, x) => @this.Type = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (OpenCrateInstr is not { } callback)
                        return;
                    var @this = new Source1OpenCrateInstrEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "smoke_beacon_paradrop")
            {
                var keys = descriptor.Keys.Select(Action<Source1SmokeBeaconParadropEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "paradrop")
                            return (@this, x) => @this.Paradrop = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (SmokeBeaconParadrop is not { } callback)
                        return;
                    var @this = new Source1SmokeBeaconParadropEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "survival_paradrop_spawn")
            {
                var keys = descriptor.Keys.Select(Action<Source1SurvivalParadropSpawnEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (SurvivalParadropSpawn is not { } callback)
                        return;
                    var @this = new Source1SurvivalParadropSpawnEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "survival_paradrop_break")
            {
                var keys = descriptor.Keys.Select(Action<Source1SurvivalParadropBreakEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (SurvivalParadropBreak is not { } callback)
                        return;
                    var @this = new Source1SurvivalParadropBreakEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "drone_cargo_detached")
            {
                var keys = descriptor.Keys.Select(Action<Source1DroneCargoDetachedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "cargo")
                            return (@this, x) => @this.Cargo = x.ValShort;
                        if (key.Name == "delivered")
                            return (@this, x) => @this.Delivered = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DroneCargoDetached is not { } callback)
                        return;
                    var @this = new Source1DroneCargoDetachedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "drone_above_roof")
            {
                var keys = descriptor.Keys.Select(Action<Source1DroneAboveRoofEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "cargo")
                            return (@this, x) => @this.Cargo = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DroneAboveRoof is not { } callback)
                        return;
                    var @this = new Source1DroneAboveRoofEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "choppers_incoming_warning")
            {
                var keys = descriptor.Keys.Select(Action<Source1ChoppersIncomingWarningEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "global")
                            return (@this, x) => @this.Global = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (ChoppersIncomingWarning is not { } callback)
                        return;
                    var @this = new Source1ChoppersIncomingWarningEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "firstbombs_incoming_warning")
            {
                var keys = descriptor.Keys.Select(Action<Source1FirstbombsIncomingWarningEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "global")
                            return (@this, x) => @this.Global = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (FirstbombsIncomingWarning is not { } callback)
                        return;
                    var @this = new Source1FirstbombsIncomingWarningEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "dz_item_interaction")
            {
                var keys = descriptor.Keys.Select(Action<Source1DzItemInteractionEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "subject")
                            return (@this, x) => @this.Subject = x.ValShort;
                        if (key.Name == "type")
                            return (@this, x) => @this.Type = x.ValString;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (DzItemInteraction is not { } callback)
                        return;
                    var @this = new Source1DzItemInteractionEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "survival_teammate_respawn")
            {
                var keys = descriptor.Keys.Select(Action<Source1SurvivalTeammateRespawnEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (SurvivalTeammateRespawn is not { } callback)
                        return;
                    var @this = new Source1SurvivalTeammateRespawnEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "survival_no_respawns_warning")
            {
                var keys = descriptor.Keys.Select(Action<Source1SurvivalNoRespawnsWarningEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (SurvivalNoRespawnsWarning is not { } callback)
                        return;
                    var @this = new Source1SurvivalNoRespawnsWarningEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "survival_no_respawns_final")
            {
                var keys = descriptor.Keys.Select(Action<Source1SurvivalNoRespawnsFinalEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (SurvivalNoRespawnsFinal is not { } callback)
                        return;
                    var @this = new Source1SurvivalNoRespawnsFinalEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_ping")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerPingEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValShort;
                        if (key.Name == "x")
                            return (@this, x) => @this.X = x.ValFloat;
                        if (key.Name == "y")
                            return (@this, x) => @this.Y = x.ValFloat;
                        if (key.Name == "z")
                            return (@this, x) => @this.Z = x.ValFloat;
                        if (key.Name == "urgent")
                            return (@this, x) => @this.Urgent = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerPing is not { } callback)
                        return;
                    var @this = new Source1PlayerPingEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_ping_stop")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerPingStopEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "entityid")
                            return (@this, x) => @this.Entityid = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerPingStop is not { } callback)
                        return;
                    var @this = new Source1PlayerPingStopEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "player_sound")
            {
                var keys = descriptor.Keys.Select(Action<Source1PlayerSoundEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "radius")
                            return (@this, x) => @this.Radius = x.ValLong;
                        if (key.Name == "duration")
                            return (@this, x) => @this.Duration = x.ValFloat;
                        if (key.Name == "step")
                            return (@this, x) => @this.Step = x.ValBool;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (PlayerSound is not { } callback)
                        return;
                    var @this = new Source1PlayerSoundEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "guardian_wave_restart")
            {
                var keys = descriptor.Keys.Select(Action<Source1GuardianWaveRestartEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (GuardianWaveRestart is not { } callback)
                        return;
                    var @this = new Source1GuardianWaveRestartEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "team_intro_start")
            {
                var keys = descriptor.Keys.Select(Action<Source1TeamIntroStartEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (TeamIntroStart is not { } callback)
                        return;
                    var @this = new Source1TeamIntroStartEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "team_intro_end")
            {
                var keys = descriptor.Keys.Select(Action<Source1TeamIntroEndEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (TeamIntroEnd is not { } callback)
                        return;
                    var @this = new Source1TeamIntroEndEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "bullet_flight_resolution")
            {
                var keys = descriptor.Keys.Select(Action<Source1BulletFlightResolutionEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "userid")
                            return (@this, x) => @this.Userid = new CEntityIndex(x.ValShort == ushort.MaxValue ? 0 : (uint) x.ValShort + 1);
                        if (key.Name == "userid_pawn")
                            return (@this, x) => @this.UseridPawn = new CHandle<CEntityInstance>((ulong) x.ValLong);
                        if (key.Name == "pos_x")
                            return (@this, x) => @this.PosX = x.ValShort;
                        if (key.Name == "pos_y")
                            return (@this, x) => @this.PosY = x.ValShort;
                        if (key.Name == "pos_z")
                            return (@this, x) => @this.PosZ = x.ValShort;
                        if (key.Name == "ang_x")
                            return (@this, x) => @this.AngX = x.ValShort;
                        if (key.Name == "ang_y")
                            return (@this, x) => @this.AngY = x.ValShort;
                        if (key.Name == "ang_z")
                            return (@this, x) => @this.AngZ = x.ValShort;
                        if (key.Name == "start_x")
                            return (@this, x) => @this.StartX = x.ValShort;
                        if (key.Name == "start_y")
                            return (@this, x) => @this.StartY = x.ValShort;
                        if (key.Name == "start_z")
                            return (@this, x) => @this.StartZ = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (BulletFlightResolution is not { } callback)
                        return;
                    var @this = new Source1BulletFlightResolutionEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
            if (descriptor.Name == "game_phase_changed")
            {
                var keys = descriptor.Keys.Select(Action<Source1GamePhaseChangedEvent, CMsgSource1LegacyGameEvent.Types.key_t> (key) =>
                    {
                        if (key.Name == "new_phase")
                            return (@this, x) => @this.NewPhase = x.ValShort;
                        return (@this, x) => { };
                    })
                    .ToArray();

                _handlers[descriptor.Eventid] = @event =>
                {
                    if (GamePhaseChanged is not { } callback)
                        return;
                    var @this = new Source1GamePhaseChangedEvent();
                    for (var i = 0; i < @event.Keys.Count; i++)
                    {
                        keys[i](@this, @event.Keys[i]);
                    }
                    callback(@this);
                };
            }
        }
    }
}

public partial class Source1ServerSpawnEvent
{
    public string Hostname { get; set; } = "";
    public string Address { get; set; } = "";
    public int Port { get; set; }
    public string Game { get; set; } = "";
    public string Mapname { get; set; } = "";
    public string Addonname { get; set; } = "";
    public int Maxplayers { get; set; }
    public string Os { get; set; } = "";
    public bool Dedicated { get; set; }
    public bool Password { get; set; }
}

public partial class Source1ServerPreShutdownEvent
{
    public string Reason { get; set; } = "";
}

public partial class Source1ServerShutdownEvent
{
    public string Reason { get; set; } = "";
}

public partial class Source1ServerMessageEvent
{
    public string Text { get; set; } = "";
}

public partial class Source1ServerCvarEvent
{
    public string Cvarname { get; set; } = "";
    public string Cvarvalue { get; set; } = "";
}

public partial class Source1PlayerActivateEvent
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1PlayerConnectFullEvent
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1PlayerFullUpdateEvent
{
    public CEntityIndex Userid { get; set; }
    public int Count { get; set; }
}

public partial class Source1PlayerConnectEvent
{
    public string Name { get; set; } = "";
    public CEntityIndex Userid { get; set; }
    public string Networkid { get; set; } = "";
    public ulong Xuid { get; set; }
    public string Address { get; set; } = "";
    public bool Bot { get; set; }
}

public partial class Source1PlayerDisconnectEvent
{
    public CEntityIndex Userid { get; set; }
    public int Reason { get; set; }
    public string Name { get; set; } = "";
    public string Networkid { get; set; } = "";
    public ulong Xuid { get; set; }
    public int PlayerID { get; set; }
}

public partial class Source1PlayerInfoEvent
{
    public string Name { get; set; } = "";
    public CEntityIndex Userid { get; set; }
    public ulong Steamid { get; set; }
    public bool Bot { get; set; }
}

public partial class Source1PlayerSpawnEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
}

public partial class Source1PlayerTeamEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Team { get; set; }
    public int Oldteam { get; set; }
    public bool Disconnect { get; set; }
    public bool Silent { get; set; }
    public bool Isbot { get; set; }
}

public partial class Source1LocalPlayerTeamEvent
{
}

public partial class Source1LocalPlayerControllerTeamEvent
{
}

public partial class Source1PlayerChangenameEvent
{
    public CEntityIndex Userid { get; set; }
    public string Oldname { get; set; } = "";
    public string Newname { get; set; } = "";
}

public partial class Source1PlayerHurtEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public CEntityIndex Attacker { get; set; }
    public CHandle<CEntityInstance> AttackerPawn { get; set; }
    public int Health { get; set; }
    public int Armor { get; set; }
    public string Weapon { get; set; } = "";
    public int DmgHealth { get; set; }
    public int DmgArmor { get; set; }
    public int Hitgroup { get; set; }
}

public partial class Source1PlayerChatEvent
{
    public bool Teamonly { get; set; }
    public int Userid { get; set; }
    public string Text { get; set; } = "";
}

public partial class Source1LocalPlayerPawnChangedEvent
{
}

public partial class Source1TeamplayBroadcastAudioEvent
{
    public int Team { get; set; }
    public string Sound { get; set; } = "";
}

public partial class Source1FinaleStartEvent
{
    public int Rushes { get; set; }
}

public partial class Source1PlayerStatsUpdatedEvent
{
    public bool Forceupload { get; set; }
}

public partial class Source1UserDataDownloadedEvent
{
}

public partial class Source1RagdollDissolvedEvent
{
    public int Entindex { get; set; }
}

public partial class Source1TeamInfoEvent
{
    public int Teamid { get; set; }
    public string Teamname { get; set; } = "";
}

public partial class Source1TeamScoreEvent
{
    public int Teamid { get; set; }
    public int Score { get; set; }
}

public partial class Source1HltvCameramanEvent
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1HltvChaseEvent
{
    public CEntityIndex Target1 { get; set; }
    public CEntityIndex Target2 { get; set; }
    public int Distance { get; set; }
    public int Theta { get; set; }
    public int Phi { get; set; }
    public int Inertia { get; set; }
    public int Ineye { get; set; }
}

public partial class Source1HltvRankCameraEvent
{
    public int Index { get; set; }
    public float Rank { get; set; }
    public CEntityIndex Target { get; set; }
}

public partial class Source1HltvRankEntityEvent
{
    public CEntityIndex Userid { get; set; }
    public float Rank { get; set; }
    public CEntityIndex Target { get; set; }
}

public partial class Source1HltvFixedEvent
{
    public int Posx { get; set; }
    public int Posy { get; set; }
    public int Posz { get; set; }
    public int Theta { get; set; }
    public int Phi { get; set; }
    public int Offset { get; set; }
    public float Fov { get; set; }
    public CEntityIndex Target { get; set; }
}

public partial class Source1HltvMessageEvent
{
    public string Text { get; set; } = "";
}

public partial class Source1HltvStatusEvent
{
    public int Clients { get; set; }
    public int Slots { get; set; }
    public int Proxies { get; set; }
    public string Master { get; set; } = "";
}

public partial class Source1HltvTitleEvent
{
    public string Text { get; set; } = "";
}

public partial class Source1HltvChatEvent
{
    public string Text { get; set; } = "";
    public ulong SteamID { get; set; }
}

public partial class Source1HltvVersioninfoEvent
{
    public int Version { get; set; }
}

public partial class Source1HltvReplayEvent
{
    public int Delay { get; set; }
    public int Reason { get; set; }
}

public partial class Source1HltvReplayStatusEvent
{
    public int Reason { get; set; }
}

public partial class Source1DemoStopEvent
{
}

public partial class Source1MapShutdownEvent
{
}

public partial class Source1MapTransitionEvent
{
}

public partial class Source1HostnameChangedEvent
{
    public string Hostname { get; set; } = "";
}

public partial class Source1DifficultyChangedEvent
{
    public int NewDifficulty { get; set; }
    public int OldDifficulty { get; set; }
    public string StrDifficulty { get; set; } = "";
}

public partial class Source1GameMessageEvent
{
    public int Target { get; set; }
    public string Text { get; set; } = "";
}

public partial class Source1GameNewmapEvent
{
    public string Mapname { get; set; } = "";
}

public partial class Source1RoundStartEvent
{
    public int Timelimit { get; set; }
    public int Fraglimit { get; set; }
    public string Objective { get; set; } = "";
}

public partial class Source1RoundEndEvent
{
    public int Winner { get; set; }
    public int Reason { get; set; }
    public string Message { get; set; } = "";
    public int Legacy { get; set; }
    public int PlayerCount { get; set; }
    public int Nomusic { get; set; }
}

public partial class Source1RoundStartPreEntityEvent
{
}

public partial class Source1RoundStartPostNavEvent
{
}

public partial class Source1RoundFreezeEndEvent
{
}

public partial class Source1TeamplayRoundStartEvent
{
    public bool FullReset { get; set; }
}

public partial class Source1PlayerDeathEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public CEntityIndex Attacker { get; set; }
    public CHandle<CEntityInstance> AttackerPawn { get; set; }
    public CEntityIndex Assister { get; set; }
    public CHandle<CEntityInstance> AssisterPawn { get; set; }
    public bool Assistedflash { get; set; }
    public string Weapon { get; set; } = "";
    public string WeaponItemid { get; set; } = "";
    public string WeaponFauxitemid { get; set; } = "";
    public string WeaponOriginalownerXuid { get; set; } = "";
    public bool Headshot { get; set; }
    public int Dominated { get; set; }
    public int Revenge { get; set; }
    public int Wipe { get; set; }
    public int Penetrated { get; set; }
    public bool Noreplay { get; set; }
    public bool Noscope { get; set; }
    public bool Thrusmoke { get; set; }
    public bool Attackerblind { get; set; }
    public float Distance { get; set; }
    public int DmgHealth { get; set; }
    public int DmgArmor { get; set; }
    public int Hitgroup { get; set; }
}

public partial class Source1PlayerFootstepEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
}

public partial class Source1PlayerHintmessageEvent
{
    public string Hintmessage { get; set; } = "";
}

public partial class Source1BreakBreakableEvent
{
    public int Entindex { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Material { get; set; }
}

public partial class Source1BrokenBreakableEvent
{
    public int Entindex { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Material { get; set; }
}

public partial class Source1BreakPropEvent
{
    public int Entindex { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
}

public partial class Source1EntityKilledEvent
{
    public int EntindexKilled { get; set; }
    public int EntindexAttacker { get; set; }
    public int EntindexInflictor { get; set; }
    public int Damagebits { get; set; }
}

public partial class Source1DoorCloseEvent
{
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public bool Checkpoint { get; set; }
}

public partial class Source1VoteStartedEvent
{
    public string Issue { get; set; } = "";
    public string Param1 { get; set; } = "";
    public int Team { get; set; }
    public int Initiator { get; set; }
}

public partial class Source1VoteFailedEvent
{
    public int Team { get; set; }
}

public partial class Source1VotePassedEvent
{
    public string Details { get; set; } = "";
    public string Param1 { get; set; } = "";
    public int Team { get; set; }
}

public partial class Source1VoteChangedEvent
{
    public int VoteOption1 { get; set; }
    public int VoteOption2 { get; set; }
    public int VoteOption3 { get; set; }
    public int VoteOption4 { get; set; }
    public int VoteOption5 { get; set; }
    public int PotentialVotes { get; set; }
}

public partial class Source1VoteCastYesEvent
{
    public int Team { get; set; }
    public int Entityid { get; set; }
}

public partial class Source1VoteCastNoEvent
{
    public int Team { get; set; }
    public int Entityid { get; set; }
}

public partial class Source1AchievementEventEvent
{
    public string AchievementName { get; set; } = "";
    public int CurVal { get; set; }
    public int MaxVal { get; set; }
}

public partial class Source1AchievementEarnedEvent
{
    public CEntityIndex Player { get; set; }
    public int Achievement { get; set; }
}

public partial class Source1AchievementWriteFailedEvent
{
}

public partial class Source1BonusUpdatedEvent
{
    public int Numadvanced { get; set; }
    public int Numbronze { get; set; }
    public int Numsilver { get; set; }
    public int Numgold { get; set; }
}

public partial class Source1SpecTargetUpdatedEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Target { get; set; }
}

public partial class Source1SpecModeUpdatedEvent
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1EntityVisibleEvent
{
    public CEntityIndex Userid { get; set; }
    public int Subject { get; set; }
    public string Classname { get; set; } = "";
    public string Entityname { get; set; } = "";
}

public partial class Source1GameinstructorDrawEvent
{
}

public partial class Source1GameinstructorNodrawEvent
{
}

public partial class Source1FlareIgniteNpcEvent
{
    public int Entindex { get; set; }
}

public partial class Source1HelicopterGrenadePuntMissEvent
{
}

public partial class Source1PhysgunPickupEvent
{
    public int Target { get; set; }
}

public partial class Source1InventoryUpdatedEvent
{
}

public partial class Source1CartUpdatedEvent
{
}

public partial class Source1StorePricesheetUpdatedEvent
{
}

public partial class Source1ItemSchemaInitializedEvent
{
}

public partial class Source1DropRateModifiedEvent
{
}

public partial class Source1EventTicketModifiedEvent
{
}

public partial class Source1GcConnectedEvent
{
}

public partial class Source1InstructorStartLessonEvent
{
    public CEntityIndex Userid { get; set; }
    public string HintName { get; set; } = "";
    public int HintTarget { get; set; }
    public int VrMovementType { get; set; }
    public bool VrSingleController { get; set; }
    public int VrControllerType { get; set; }
}

public partial class Source1InstructorCloseLessonEvent
{
    public CEntityIndex Userid { get; set; }
    public string HintName { get; set; } = "";
}

public partial class Source1InstructorServerHintCreateEvent
{
    public CEntityIndex Userid { get; set; }
    public string HintName { get; set; } = "";
    public string HintReplaceKey { get; set; } = "";
    public int HintTarget { get; set; }
    public CEntityIndex HintActivatorUserid { get; set; }
    public int HintTimeout { get; set; }
    public string HintIconOnscreen { get; set; } = "";
    public string HintIconOffscreen { get; set; } = "";
    public string HintCaption { get; set; } = "";
    public string HintActivatorCaption { get; set; } = "";
    public string HintColor { get; set; } = "";
    public float HintIconOffset { get; set; }
    public float HintRange { get; set; }
    public int HintFlags { get; set; }
    public string HintBinding { get; set; } = "";
    public string HintGamepadBinding { get; set; } = "";
    public bool HintAllowNodrawTarget { get; set; }
    public bool HintNooffscreen { get; set; }
    public bool HintForcecaption { get; set; }
    public bool HintLocalPlayerOnly { get; set; }
}

public partial class Source1InstructorServerHintStopEvent
{
    public string HintName { get; set; } = "";
}

public partial class Source1SetInstructorGroupEnabledEvent
{
    public string Group { get; set; } = "";
    public int Enabled { get; set; }
}

public partial class Source1ClientsideLessonClosedEvent
{
    public string LessonName { get; set; } = "";
}

public partial class Source1DynamicShadowLightChangedEvent
{
}

public partial class Source1GameuiHiddenEvent
{
}

public partial class Source1ItemsGiftedEvent
{
    public CEntityIndex Player { get; set; }
    public int Itemdef { get; set; }
    public int Numgifts { get; set; }
    public int Giftidx { get; set; }
    public int Accountid { get; set; }
}

public partial class Source1PlayerScoreEvent
{
    public CEntityIndex Userid { get; set; }
    public int Kills { get; set; }
    public int Deaths { get; set; }
    public int Score { get; set; }
}

public partial class Source1PlayerShootEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Weapon { get; set; }
    public int Mode { get; set; }
}

public partial class Source1GameInitEvent
{
}

public partial class Source1GameStartEvent
{
    public int Roundslimit { get; set; }
    public int Timelimit { get; set; }
    public int Fraglimit { get; set; }
    public string Objective { get; set; } = "";
}

public partial class Source1GameEndEvent
{
    public int Winner { get; set; }
}

public partial class Source1RoundAnnounceMatchPointEvent
{
}

public partial class Source1RoundAnnounceFinalEvent
{
}

public partial class Source1RoundAnnounceLastRoundHalfEvent
{
}

public partial class Source1RoundAnnounceMatchStartEvent
{
}

public partial class Source1RoundAnnounceWarmupEvent
{
}

public partial class Source1RoundEndUploadStatsEvent
{
}

public partial class Source1RoundOfficiallyEndedEvent
{
}

public partial class Source1RoundTimeWarningEvent
{
}

public partial class Source1UgcMapInfoReceivedEvent
{
    public ulong PublishedFileId { get; set; }
}

public partial class Source1UgcMapUnsubscribedEvent
{
    public ulong PublishedFileId { get; set; }
}

public partial class Source1UgcMapDownloadErrorEvent
{
    public ulong PublishedFileId { get; set; }
    public int ErrorCode { get; set; }
}

public partial class Source1UgcFileDownloadFinishedEvent
{
    public ulong Hcontent { get; set; }
}

public partial class Source1UgcFileDownloadStartEvent
{
    public ulong Hcontent { get; set; }
    public ulong PublishedFileId { get; set; }
}

public partial class Source1BeginNewMatchEvent
{
}

public partial class Source1DmBonusWeaponStartEvent
{
    public int Time { get; set; }
    public int Pos { get; set; }
}

public partial class Source1SurvivalAnnouncePhaseEvent
{
    public int Phase { get; set; }
}

public partial class Source1PlayerDecalEvent
{
    public CHandle<CEntityInstance> UseridPawn { get; set; }
}

public partial class Source1ReadGameTitledataEvent
{
    public int ControllerId { get; set; }
}

public partial class Source1WriteGameTitledataEvent
{
    public int ControllerId { get; set; }
}

public partial class Source1ResetGameTitledataEvent
{
    public int ControllerId { get; set; }
}

public partial class Source1WeaponhudSelectionEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Mode { get; set; }
    public int Entindex { get; set; }
}

public partial class Source1VoteEndedEvent
{
}

public partial class Source1VoteCastEvent
{
    public int VoteOption { get; set; }
    public int Team { get; set; }
    public CEntityIndex Userid { get; set; }
}

public partial class Source1VoteOptionsEvent
{
    public int Count { get; set; }
    public string Option1 { get; set; } = "";
    public string Option2 { get; set; } = "";
    public string Option3 { get; set; } = "";
    public string Option4 { get; set; } = "";
    public string Option5 { get; set; } = "";
}

public partial class Source1EndmatchMapvoteSelectingMapEvent
{
    public int Count { get; set; }
    public int Slot1 { get; set; }
    public int Slot2 { get; set; }
    public int Slot3 { get; set; }
    public int Slot4 { get; set; }
    public int Slot5 { get; set; }
    public int Slot6 { get; set; }
    public int Slot7 { get; set; }
    public int Slot8 { get; set; }
    public int Slot9 { get; set; }
    public int Slot10 { get; set; }
}

public partial class Source1EndmatchCmmStartRevealItemsEvent
{
}

public partial class Source1ClientLoadoutChangedEvent
{
}

public partial class Source1AddPlayerSonarIconEvent
{
    public CEntityIndex Userid { get; set; }
    public float PosX { get; set; }
    public float PosY { get; set; }
    public float PosZ { get; set; }
}

public partial class Source1DoorOpenEvent
{
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Entindex { get; set; }
}

public partial class Source1DoorClosedEvent
{
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Entindex { get; set; }
}

public partial class Source1DoorBreakEvent
{
    public int Entindex { get; set; }
    public int Dmgstate { get; set; }
}

public partial class Source1AddBulletHitMarkerEvent
{
    public CEntityIndex Userid { get; set; }
    public int Bone { get; set; }
    public int PosX { get; set; }
    public int PosY { get; set; }
    public int PosZ { get; set; }
    public int AngX { get; set; }
    public int AngY { get; set; }
    public int AngZ { get; set; }
    public int StartX { get; set; }
    public int StartY { get; set; }
    public int StartZ { get; set; }
    public bool Hit { get; set; }
}

public partial class Source1OtherDeathEvent
{
    public int Otherid { get; set; }
    public string Othertype { get; set; } = "";
    public int Attacker { get; set; }
    public string Weapon { get; set; } = "";
    public string WeaponItemid { get; set; } = "";
    public string WeaponFauxitemid { get; set; } = "";
    public string WeaponOriginalownerXuid { get; set; } = "";
    public bool Headshot { get; set; }
    public int Penetrated { get; set; }
    public bool Noscope { get; set; }
    public bool Thrusmoke { get; set; }
    public bool Attackerblind { get; set; }
}

public partial class Source1ItemPurchaseEvent
{
    public CEntityIndex Userid { get; set; }
    public int Team { get; set; }
    public int Loadout { get; set; }
    public string Weapon { get; set; } = "";
}

public partial class Source1BombBeginplantEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Site { get; set; }
}

public partial class Source1BombAbortplantEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Site { get; set; }
}

public partial class Source1BombPlantedEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Site { get; set; }
}

public partial class Source1BombDefusedEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Site { get; set; }
}

public partial class Source1BombExplodedEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Site { get; set; }
}

public partial class Source1BombDroppedEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Entindex { get; set; }
}

public partial class Source1BombPickupEvent
{
    public CHandle<CEntityInstance> UseridPawn { get; set; }
}

public partial class Source1DefuserDroppedEvent
{
    public int Entityid { get; set; }
}

public partial class Source1DefuserPickupEvent
{
    public int Entityid { get; set; }
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
}

public partial class Source1AnnouncePhaseEndEvent
{
}

public partial class Source1CsIntermissionEvent
{
}

public partial class Source1BombBegindefuseEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public bool Haskit { get; set; }
}

public partial class Source1BombAbortdefuseEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
}

public partial class Source1HostageFollowsEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Hostage { get; set; }
}

public partial class Source1HostageHurtEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Hostage { get; set; }
}

public partial class Source1HostageKilledEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Hostage { get; set; }
}

public partial class Source1HostageRescuedEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Hostage { get; set; }
    public int Site { get; set; }
}

public partial class Source1HostageStopsFollowingEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Hostage { get; set; }
}

public partial class Source1HostageRescuedAllEvent
{
}

public partial class Source1HostageCallForHelpEvent
{
    public int Hostage { get; set; }
}

public partial class Source1VipEscapedEvent
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1VipKilledEvent
{
    public CEntityIndex Userid { get; set; }
    public CEntityIndex Attacker { get; set; }
}

public partial class Source1PlayerRadioEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Slot { get; set; }
}

public partial class Source1BombBeepEvent
{
    public int Entindex { get; set; }
}

public partial class Source1WeaponFireEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public string Weapon { get; set; } = "";
    public bool Silenced { get; set; }
}

public partial class Source1WeaponFireOnEmptyEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public string Weapon { get; set; } = "";
}

public partial class Source1GrenadeThrownEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public string Weapon { get; set; } = "";
}

public partial class Source1WeaponOutofammoEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
}

public partial class Source1WeaponReloadEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
}

public partial class Source1WeaponZoomEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
}

public partial class Source1SilencerDetachEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
}

public partial class Source1InspectWeaponEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
}

public partial class Source1WeaponZoomRifleEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
}

public partial class Source1PlayerSpawnedEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public bool Inrestart { get; set; }
}

public partial class Source1ItemPickupEvent
{
    public CEntityIndex Userid { get; set; }
    public string Item { get; set; } = "";
    public bool Silent { get; set; }
    public int Defindex { get; set; }
}

public partial class Source1ItemPickupSlerpEvent
{
    public CEntityIndex Userid { get; set; }
    public int Index { get; set; }
    public int Behavior { get; set; }
}

public partial class Source1ItemPickupFailedEvent
{
    public CEntityIndex Userid { get; set; }
    public string Item { get; set; } = "";
    public int Reason { get; set; }
    public int Limit { get; set; }
}

public partial class Source1ItemRemoveEvent
{
    public CEntityIndex Userid { get; set; }
    public string Item { get; set; } = "";
    public int Defindex { get; set; }
}

public partial class Source1AmmoPickupEvent
{
    public CEntityIndex Userid { get; set; }
    public string Item { get; set; } = "";
    public int Index { get; set; }
}

public partial class Source1ItemEquipEvent
{
    public CEntityIndex Userid { get; set; }
    public string Item { get; set; } = "";
    public int Defindex { get; set; }
    public bool Canzoom { get; set; }
    public bool Hassilencer { get; set; }
    public bool Issilenced { get; set; }
    public bool Hastracers { get; set; }
    public int Weptype { get; set; }
    public bool Ispainted { get; set; }
}

public partial class Source1EnterBuyzoneEvent
{
    public CEntityIndex Userid { get; set; }
    public bool Canbuy { get; set; }
}

public partial class Source1ExitBuyzoneEvent
{
    public CEntityIndex Userid { get; set; }
    public bool Canbuy { get; set; }
}

public partial class Source1BuytimeEndedEvent
{
}

public partial class Source1EnterBombzoneEvent
{
    public CEntityIndex Userid { get; set; }
    public bool Hasbomb { get; set; }
    public bool Isplanted { get; set; }
}

public partial class Source1ExitBombzoneEvent
{
    public CEntityIndex Userid { get; set; }
    public bool Hasbomb { get; set; }
    public bool Isplanted { get; set; }
}

public partial class Source1EnterRescueZoneEvent
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1ExitRescueZoneEvent
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1SilencerOffEvent
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1SilencerOnEvent
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1BuymenuOpenEvent
{
}

public partial class Source1BuymenuCloseEvent
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1RoundPrestartEvent
{
}

public partial class Source1RoundPoststartEvent
{
}

public partial class Source1GrenadeBounceEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
}

public partial class Source1HegrenadeDetonateEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Entityid { get; set; }
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

public partial class Source1FlashbangDetonateEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Entityid { get; set; }
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

public partial class Source1SmokegrenadeDetonateEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Entityid { get; set; }
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

public partial class Source1SmokegrenadeExpiredEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Entityid { get; set; }
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

public partial class Source1MolotovDetonateEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

public partial class Source1DecoyDetonateEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Entityid { get; set; }
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

public partial class Source1DecoyStartedEvent
{
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Entityid { get; set; }
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

public partial class Source1TagrenadeDetonateEvent
{
    public CEntityIndex Userid { get; set; }
    public int Entityid { get; set; }
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

public partial class Source1InfernoStartburnEvent
{
    public int Entityid { get; set; }
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

public partial class Source1InfernoExpireEvent
{
    public int Entityid { get; set; }
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

public partial class Source1InfernoExtinguishEvent
{
    public int Entityid { get; set; }
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

public partial class Source1DecoyFiringEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Entityid { get; set; }
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

public partial class Source1BulletImpactEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
}

public partial class Source1PlayerJumpEvent
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1PlayerBlindEvent
{
    public CEntityIndex Userid { get; set; }
    public CEntityIndex Attacker { get; set; }
    public int Entityid { get; set; }
    public float BlindDuration { get; set; }
}

public partial class Source1PlayerFalldamageEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public float Damage { get; set; }
}

public partial class Source1DoorMovingEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Entindex { get; set; }
}

public partial class Source1MbInputLockSuccessEvent
{
}

public partial class Source1MbInputLockCancelEvent
{
}

public partial class Source1NavBlockedEvent
{
    public int Area { get; set; }
    public bool Blocked { get; set; }
}

public partial class Source1NavGenerateEvent
{
}

public partial class Source1AchievementInfoLoadedEvent
{
}

public partial class Source1HltvChangedModeEvent
{
    public int Oldmode { get; set; }
    public int Newmode { get; set; }
    public int ObsTarget { get; set; }
}

public partial class Source1CsGameDisconnectedEvent
{
}

public partial class Source1CsRoundFinalBeepEvent
{
}

public partial class Source1CsRoundStartBeepEvent
{
}

public partial class Source1CsWinPanelRoundEvent
{
    public bool ShowTimerDefend { get; set; }
    public bool ShowTimerAttack { get; set; }
    public int TimerTime { get; set; }
    public int FinalEvent { get; set; }
    public string FunfactToken { get; set; } = "";
    public CEntityIndex FunfactPlayer { get; set; }
    public int FunfactData1 { get; set; }
    public int FunfactData2 { get; set; }
    public int FunfactData3 { get; set; }
}

public partial class Source1CsWinPanelMatchEvent
{
}

public partial class Source1CsMatchEndRestartEvent
{
}

public partial class Source1CsPreRestartEvent
{
}

public partial class Source1ShowDeathpanelEvent
{
    public CEntityIndex Victim { get; set; }
    public CHandle<CEntityInstance> VictimPawn { get; set; }
    public int Killer { get; set; }
    public CEntityIndex KillerController { get; set; }
    public int HitsTaken { get; set; }
    public int DamageTaken { get; set; }
    public int HitsGiven { get; set; }
    public int DamageGiven { get; set; }
}

public partial class Source1HideDeathpanelEvent
{
}

public partial class Source1PlayerAvengedTeammateEvent
{
    public CEntityIndex AvengerId { get; set; }
    public CEntityIndex AvengedPlayerId { get; set; }
}

public partial class Source1AchievementEarnedLocalEvent
{
    public int Achievement { get; set; }
    public int Splitscreenplayer { get; set; }
}

public partial class Source1RepostXboxAchievementsEvent
{
    public int Splitscreenplayer { get; set; }
}

public partial class Source1MatchEndConditionsEvent
{
    public int Frags { get; set; }
    public int MaxRounds { get; set; }
    public int WinRounds { get; set; }
    public int Time { get; set; }
}

public partial class Source1RoundMvpEvent
{
    public CEntityIndex Userid { get; set; }
    public int Reason { get; set; }
    public int Value { get; set; }
    public int Musickitmvps { get; set; }
    public int Nomusic { get; set; }
    public int Musickitid { get; set; }
}

public partial class Source1ShowSurvivalRespawnStatusEvent
{
    public string LocToken { get; set; } = "";
    public int Duration { get; set; }
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
}

public partial class Source1ClientDisconnectEvent
{
}

public partial class Source1GgKilledEnemyEvent
{
    public CEntityIndex Victimid { get; set; }
    public CEntityIndex Attackerid { get; set; }
    public int Dominated { get; set; }
    public int Revenge { get; set; }
    public bool Bonus { get; set; }
}

public partial class Source1SwitchTeamEvent
{
    public int NumPlayers { get; set; }
    public int NumSpectators { get; set; }
    public int AvgRank { get; set; }
    public int NumTSlotsFree { get; set; }
    public int NumCTSlotsFree { get; set; }
}

public partial class Source1WriteProfileDataEvent
{
}

public partial class Source1TrialTimeExpiredEvent
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1UpdateMatchmakingStatsEvent
{
}

public partial class Source1PlayerResetVoteEvent
{
    public CEntityIndex Userid { get; set; }
    public bool Vote { get; set; }
}

public partial class Source1EnableRestartVotingEvent
{
    public bool Enable { get; set; }
}

public partial class Source1SfuieventEvent
{
    public string Action { get; set; } = "";
    public string Data { get; set; } = "";
    public int Slot { get; set; }
}

public partial class Source1StartVoteEvent
{
    public CEntityIndex Userid { get; set; }
    public int Type { get; set; }
    public int VoteParameter { get; set; }
}

public partial class Source1PlayerGivenC4Event
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1TrPlayerFlashbangedEvent
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1TrMarkCompleteEvent
{
    public int Complete { get; set; }
}

public partial class Source1TrMarkBestTimeEvent
{
    public int Time { get; set; }
}

public partial class Source1TrExitHintTriggerEvent
{
}

public partial class Source1BotTakeoverEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public CEntityIndex Botid { get; set; }
    public float P { get; set; }
    public float Y { get; set; }
    public float R { get; set; }
}

public partial class Source1TrShowFinishMsgboxEvent
{
}

public partial class Source1TrShowExitMsgboxEvent
{
}

public partial class Source1JointeamFailedEvent
{
    public CEntityIndex Userid { get; set; }
    public int Reason { get; set; }
}

public partial class Source1TeamchangePendingEvent
{
    public CEntityIndex Userid { get; set; }
    public int Toteam { get; set; }
}

public partial class Source1MaterialDefaultCompleteEvent
{
}

public partial class Source1CsPrevNextSpectatorEvent
{
    public bool Next { get; set; }
}

public partial class Source1NextlevelChangedEvent
{
    public string Nextlevel { get; set; } = "";
    public string Mapgroup { get; set; } = "";
    public string Skirmishmode { get; set; } = "";
}

public partial class Source1SeasoncoinLevelupEvent
{
    public CEntityIndex Userid { get; set; }
    public int Category { get; set; }
    public int Rank { get; set; }
}

public partial class Source1TournamentRewardEvent
{
    public int Defindex { get; set; }
    public int Totalrewards { get; set; }
    public int Accountid { get; set; }
}

public partial class Source1StartHalftimeEvent
{
}

public partial class Source1AmmoRefillEvent
{
    public CEntityIndex Userid { get; set; }
    public bool Success { get; set; }
}

public partial class Source1ParachutePickupEvent
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1ParachuteDeployEvent
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1DronegunAttackEvent
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1DroneDispatchedEvent
{
    public CEntityIndex Userid { get; set; }
    public int Priority { get; set; }
    public int DroneDispatched { get; set; }
}

public partial class Source1LootCrateVisibleEvent
{
    public CEntityIndex Userid { get; set; }
    public int Subject { get; set; }
    public string Type { get; set; } = "";
}

public partial class Source1LootCrateOpenedEvent
{
    public CEntityIndex Userid { get; set; }
    public string Type { get; set; } = "";
}

public partial class Source1OpenCrateInstrEvent
{
    public CEntityIndex Userid { get; set; }
    public int Subject { get; set; }
    public string Type { get; set; } = "";
}

public partial class Source1SmokeBeaconParadropEvent
{
    public CEntityIndex Userid { get; set; }
    public int Paradrop { get; set; }
}

public partial class Source1SurvivalParadropSpawnEvent
{
    public int Entityid { get; set; }
}

public partial class Source1SurvivalParadropBreakEvent
{
    public int Entityid { get; set; }
}

public partial class Source1DroneCargoDetachedEvent
{
    public CEntityIndex Userid { get; set; }
    public int Cargo { get; set; }
    public bool Delivered { get; set; }
}

public partial class Source1DroneAboveRoofEvent
{
    public CEntityIndex Userid { get; set; }
    public int Cargo { get; set; }
}

public partial class Source1ChoppersIncomingWarningEvent
{
    public bool Global { get; set; }
}

public partial class Source1FirstbombsIncomingWarningEvent
{
    public bool Global { get; set; }
}

public partial class Source1DzItemInteractionEvent
{
    public CEntityIndex Userid { get; set; }
    public int Subject { get; set; }
    public string Type { get; set; } = "";
}

public partial class Source1SurvivalTeammateRespawnEvent
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1SurvivalNoRespawnsWarningEvent
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1SurvivalNoRespawnsFinalEvent
{
    public CEntityIndex Userid { get; set; }
}

public partial class Source1PlayerPingEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Entityid { get; set; }
    public float X { get; set; }
    public float Y { get; set; }
    public float Z { get; set; }
    public bool Urgent { get; set; }
}

public partial class Source1PlayerPingStopEvent
{
    public int Entityid { get; set; }
}

public partial class Source1PlayerSoundEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int Radius { get; set; }
    public float Duration { get; set; }
    public bool Step { get; set; }
}

public partial class Source1GuardianWaveRestartEvent
{
}

public partial class Source1TeamIntroStartEvent
{
}

public partial class Source1TeamIntroEndEvent
{
}

public partial class Source1BulletFlightResolutionEvent
{
    public CEntityIndex Userid { get; set; }
    public CHandle<CEntityInstance> UseridPawn { get; set; }
    public int PosX { get; set; }
    public int PosY { get; set; }
    public int PosZ { get; set; }
    public int AngX { get; set; }
    public int AngY { get; set; }
    public int AngZ { get; set; }
    public int StartX { get; set; }
    public int StartY { get; set; }
    public int StartZ { get; set; }
}

public partial class Source1GamePhaseChangedEvent
{
    public int NewPhase { get; set; }
}
