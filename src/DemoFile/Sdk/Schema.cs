// <auto-generated />
#nullable enable

using System.Diagnostics;
using System.Drawing;
using DemoFile;

namespace DemoFile.Sdk;

public enum AnimLoopMode_t : uint
{
    ANIM_LOOP_MODE_INVALID = 0xFFFFFFFF,
    ANIM_LOOP_MODE_NOT_LOOPING = 0x0,
    ANIM_LOOP_MODE_LOOPING = 0x1,
    ANIM_LOOP_MODE_USE_SEQUENCE_SETTINGS = 0x2,
    ANIM_LOOP_MODE_COUNT = 0x3,
}

public enum attributeprovidertypes_t : uint
{
    PROVIDER_GENERIC = 0x0,
    PROVIDER_WEAPON = 0x1,
}

public enum BeamClipStyle_t : uint
{
    kNOCLIP = 0x0,
    kGEOCLIP = 0x1,
    kMODELCLIP = 0x2,
    kBEAMCLIPSTYLE_NUMBITS = 0x2,
}

public enum BeamType_t : uint
{
    BEAM_INVALID = 0x0,
    BEAM_POINTS = 0x1,
    BEAM_ENTPOINT = 0x2,
    BEAM_ENTS = 0x3,
    BEAM_HOSE = 0x4,
    BEAM_SPLINE = 0x5,
    BEAM_LASER = 0x6,
}

public enum CSPlayerBlockingUseAction_t : uint
{
    k_CSPlayerBlockingUseAction_None = 0x0,
    k_CSPlayerBlockingUseAction_DefusingDefault = 0x1,
    k_CSPlayerBlockingUseAction_DefusingWithKit = 0x2,
    k_CSPlayerBlockingUseAction_HostageGrabbing = 0x3,
    k_CSPlayerBlockingUseAction_HostageDropping = 0x4,
    k_CSPlayerBlockingUseAction_OpeningSafe = 0x5,
    k_CSPlayerBlockingUseAction_EquippingParachute = 0x6,
    k_CSPlayerBlockingUseAction_EquippingHeavyArmor = 0x7,
    k_CSPlayerBlockingUseAction_EquippingContract = 0x8,
    k_CSPlayerBlockingUseAction_EquippingTabletUpgrade = 0x9,
    k_CSPlayerBlockingUseAction_TakingOffHeavyArmor = 0xA,
    k_CSPlayerBlockingUseAction_PayingToOpenDoor = 0xB,
    k_CSPlayerBlockingUseAction_CancelingSpawnRappelling = 0xC,
    k_CSPlayerBlockingUseAction_EquippingExoJump = 0xD,
    k_CSPlayerBlockingUseAction_PickingUpBumpMine = 0xE,
    k_CSPlayerBlockingUseAction_MapLongUseEntity_Pickup = 0xF,
    k_CSPlayerBlockingUseAction_MapLongUseEntity_Place = 0x10,
    k_CSPlayerBlockingUseAction_MaxCount = 0x11,
}

public enum CSPlayerState : uint
{
    STATE_ACTIVE = 0x0,
    STATE_WELCOME = 0x1,
    STATE_PICKINGTEAM = 0x2,
    STATE_PICKINGCLASS = 0x3,
    STATE_DEATH_ANIM = 0x4,
    STATE_DEATH_WAIT_FOR_KEY = 0x5,
    STATE_OBSERVER_MODE = 0x6,
    STATE_GUNGAME_RESPAWN = 0x7,
    STATE_DORMANT = 0x8,
    NUM_PLAYER_STATES = 0x9,
}

public enum CSWeaponMode : uint
{
    Primary_Mode = 0x0,
    Secondary_Mode = 0x1,
    WeaponMode_MAX = 0x2,
}

public enum CSWeaponState_t : uint
{
    WEAPON_NOT_CARRIED = 0x0,
    WEAPON_IS_CARRIED_BY_PLAYER = 0x1,
    WEAPON_IS_ACTIVE = 0x2,
}

public enum DoorState_t : uint
{
    DOOR_STATE_CLOSED = 0x0,
    DOOR_STATE_OPENING = 0x1,
    DOOR_STATE_OPEN = 0x2,
    DOOR_STATE_CLOSING = 0x3,
    DOOR_STATE_AJAR = 0x4,
}

public enum EGrenadeThrowState : uint
{
    NotThrowing = 0x0,
    Throwing = 0x1,
    ThrowComplete = 0x2,
}

public enum EKillTypes_t : byte
{
    KILL_NONE = 0x0,
    KILL_DEFAULT = 0x1,
    KILL_HEADSHOT = 0x2,
    KILL_BLAST = 0x3,
    KILL_BURN = 0x4,
    KILL_SLASH = 0x5,
    KILL_SHOCK = 0x6,
    KILLTYPE_COUNT = 0x7,
}

public enum EntityDisolveType_t : uint
{
    ENTITY_DISSOLVE_INVALID = 0xFFFFFFFF,
    ENTITY_DISSOLVE_NORMAL = 0x0,
    ENTITY_DISSOLVE_ELECTRICAL = 0x1,
    ENTITY_DISSOLVE_ELECTRICAL_LIGHT = 0x2,
    ENTITY_DISSOLVE_CORE = 0x3,
}

public enum FixAngleSet_t : byte
{
    None = 0x0,
    Absolute = 0x1,
    Relative = 0x2,
}

public enum loadout_slot_t : uint
{
    LOADOUT_SLOT_INVALID = 0xFFFFFFFF,
    LOADOUT_SLOT_MELEE = 0x0,
    LOADOUT_SLOT_C4 = 0x1,
    LOADOUT_SLOT_FIRST_AUTO_BUY_WEAPON = 0x0,
    LOADOUT_SLOT_LAST_AUTO_BUY_WEAPON = 0x1,
    LOADOUT_SLOT_SECONDARY0 = 0x2,
    LOADOUT_SLOT_SECONDARY1 = 0x3,
    LOADOUT_SLOT_SECONDARY2 = 0x4,
    LOADOUT_SLOT_SECONDARY3 = 0x5,
    LOADOUT_SLOT_SECONDARY4 = 0x6,
    LOADOUT_SLOT_SECONDARY5 = 0x7,
    LOADOUT_SLOT_SMG0 = 0x8,
    LOADOUT_SLOT_SMG1 = 0x9,
    LOADOUT_SLOT_SMG2 = 0xA,
    LOADOUT_SLOT_SMG3 = 0xB,
    LOADOUT_SLOT_SMG4 = 0xC,
    LOADOUT_SLOT_SMG5 = 0xD,
    LOADOUT_SLOT_RIFLE0 = 0xE,
    LOADOUT_SLOT_RIFLE1 = 0xF,
    LOADOUT_SLOT_RIFLE2 = 0x10,
    LOADOUT_SLOT_RIFLE3 = 0x11,
    LOADOUT_SLOT_RIFLE4 = 0x12,
    LOADOUT_SLOT_RIFLE5 = 0x13,
    LOADOUT_SLOT_HEAVY0 = 0x14,
    LOADOUT_SLOT_HEAVY1 = 0x15,
    LOADOUT_SLOT_HEAVY2 = 0x16,
    LOADOUT_SLOT_HEAVY3 = 0x17,
    LOADOUT_SLOT_HEAVY4 = 0x18,
    LOADOUT_SLOT_HEAVY5 = 0x19,
    LOADOUT_SLOT_FIRST_WHEEL_WEAPON = 0x2,
    LOADOUT_SLOT_LAST_WHEEL_WEAPON = 0x19,
    LOADOUT_SLOT_FIRST_PRIMARY_WEAPON = 0x8,
    LOADOUT_SLOT_LAST_PRIMARY_WEAPON = 0x19,
    LOADOUT_SLOT_FIRST_WHEEL_GRENADE = 0x1A,
    LOADOUT_SLOT_GRENADE0 = 0x1A,
    LOADOUT_SLOT_GRENADE1 = 0x1B,
    LOADOUT_SLOT_GRENADE2 = 0x1C,
    LOADOUT_SLOT_GRENADE3 = 0x1D,
    LOADOUT_SLOT_GRENADE4 = 0x1E,
    LOADOUT_SLOT_GRENADE5 = 0x1F,
    LOADOUT_SLOT_LAST_WHEEL_GRENADE = 0x1F,
    LOADOUT_SLOT_EQUIPMENT0 = 0x20,
    LOADOUT_SLOT_EQUIPMENT1 = 0x21,
    LOADOUT_SLOT_EQUIPMENT2 = 0x22,
    LOADOUT_SLOT_EQUIPMENT3 = 0x23,
    LOADOUT_SLOT_EQUIPMENT4 = 0x24,
    LOADOUT_SLOT_EQUIPMENT5 = 0x25,
    LOADOUT_SLOT_FIRST_WHEEL_EQUIPMENT = 0x20,
    LOADOUT_SLOT_LAST_WHEEL_EQUIPMENT = 0x25,
    LOADOUT_SLOT_CLOTHING_CUSTOMPLAYER = 0x26,
    LOADOUT_SLOT_PET = 0x27,
    LOADOUT_SLOT_CLOTHING_FACEMASK = 0x28,
    LOADOUT_SLOT_CLOTHING_HANDS = 0x29,
    LOADOUT_SLOT_FIRST_COSMETIC = 0x29,
    LOADOUT_SLOT_LAST_COSMETIC = 0x29,
    LOADOUT_SLOT_CLOTHING_EYEWEAR = 0x2A,
    LOADOUT_SLOT_CLOTHING_HAT = 0x2B,
    LOADOUT_SLOT_CLOTHING_LOWERBODY = 0x2C,
    LOADOUT_SLOT_CLOTHING_TORSO = 0x2D,
    LOADOUT_SLOT_CLOTHING_APPEARANCE = 0x2E,
    LOADOUT_SLOT_MISC0 = 0x2F,
    LOADOUT_SLOT_MISC1 = 0x30,
    LOADOUT_SLOT_MISC2 = 0x31,
    LOADOUT_SLOT_MISC3 = 0x32,
    LOADOUT_SLOT_MISC4 = 0x33,
    LOADOUT_SLOT_MISC5 = 0x34,
    LOADOUT_SLOT_MISC6 = 0x35,
    LOADOUT_SLOT_MUSICKIT = 0x36,
    LOADOUT_SLOT_FLAIR0 = 0x37,
    LOADOUT_SLOT_SPRAY0 = 0x38,
    LOADOUT_SLOT_FIRST_ALL_CHARACTER = 0x36,
    LOADOUT_SLOT_LAST_ALL_CHARACTER = 0x38,
    LOADOUT_SLOT_COUNT = 0x39,
}

public enum MedalRank_t : uint
{
    MEDAL_RANK_NONE = 0x0,
    MEDAL_RANK_BRONZE = 0x1,
    MEDAL_RANK_SILVER = 0x2,
    MEDAL_RANK_GOLD = 0x3,
    MEDAL_RANK_COUNT = 0x4,
}

public enum MoveCollide_t : byte
{
    MOVECOLLIDE_DEFAULT = 0x0,
    MOVECOLLIDE_FLY_BOUNCE = 0x1,
    MOVECOLLIDE_FLY_CUSTOM = 0x2,
    MOVECOLLIDE_FLY_SLIDE = 0x3,
    MOVECOLLIDE_COUNT = 0x4,
    MOVECOLLIDE_MAX_BITS = 0x3,
}

public enum MoveType_t : byte
{
    MOVETYPE_NONE = 0x0,
    MOVETYPE_OBSOLETE = 0x1,
    MOVETYPE_WALK = 0x2,
    MOVETYPE_STEP = 0x3,
    MOVETYPE_FLY = 0x4,
    MOVETYPE_FLYGRAVITY = 0x5,
    MOVETYPE_VPHYSICS = 0x6,
    MOVETYPE_PUSH = 0x7,
    MOVETYPE_NOCLIP = 0x8,
    MOVETYPE_OBSERVER = 0x9,
    MOVETYPE_LADDER = 0xA,
    MOVETYPE_CUSTOM = 0xB,
    MOVETYPE_LAST = 0xC,
    MOVETYPE_MAX_BITS = 0x5,
}

public enum PlayerAnimEvent_t : uint
{
    PLAYERANIMEVENT_FIRE_GUN_PRIMARY = 0x0,
    PLAYERANIMEVENT_FIRE_GUN_SECONDARY = 0x1,
    PLAYERANIMEVENT_GRENADE_PULL_PIN = 0x2,
    PLAYERANIMEVENT_THROW_GRENADE = 0x3,
    PLAYERANIMEVENT_JUMP = 0x4,
    PLAYERANIMEVENT_RELOAD = 0x5,
    PLAYERANIMEVENT_CLEAR_FIRING = 0x6,
    PLAYERANIMEVENT_DEPLOY = 0x7,
    PLAYERANIMEVENT_SILENCER_STATE = 0x8,
    PLAYERANIMEVENT_SILENCER_TOGGLE = 0x9,
    PLAYERANIMEVENT_THROW_GRENADE_UNDERHAND = 0xA,
    PLAYERANIMEVENT_CATCH_WEAPON = 0xB,
    PLAYERANIMEVENT_LOOKATWEAPON_REQUEST = 0xC,
    PLAYERANIMEVENT_RELOAD_CANCEL_LOOKATWEAPON = 0xD,
    PLAYERANIMEVENT_HAULBACK = 0xE,
    PLAYERANIMEVENT_IDLE = 0xF,
    PLAYERANIMEVENT_STRIKE_HIT = 0x10,
    PLAYERANIMEVENT_STRIKE_MISS = 0x11,
    PLAYERANIMEVENT_BACKSTAB = 0x12,
    PLAYERANIMEVENT_DRYFIRE = 0x13,
    PLAYERANIMEVENT_FIDGET = 0x14,
    PLAYERANIMEVENT_RELEASE = 0x15,
    PLAYERANIMEVENT_TAUNT = 0x16,
    PLAYERANIMEVENT_COUNT = 0x17,
}

public enum PlayerConnectedState : uint
{
    PlayerNeverConnected = 0xFFFFFFFF,
    PlayerConnected = 0x0,
    PlayerConnecting = 0x1,
    PlayerReconnecting = 0x2,
    PlayerDisconnecting = 0x3,
    PlayerDisconnected = 0x4,
    PlayerReserved = 0x5,
}

public enum PointWorldTextJustifyHorizontal_t : uint
{
    POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_LEFT = 0x0,
    POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_CENTER = 0x1,
    POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_RIGHT = 0x2,
}

public enum PointWorldTextJustifyVertical_t : uint
{
    POINT_WORLD_TEXT_JUSTIFY_VERTICAL_BOTTOM = 0x0,
    POINT_WORLD_TEXT_JUSTIFY_VERTICAL_CENTER = 0x1,
    POINT_WORLD_TEXT_JUSTIFY_VERTICAL_TOP = 0x2,
}

public enum PointWorldTextReorientMode_t : uint
{
    POINT_WORLD_TEXT_REORIENT_NONE = 0x0,
    POINT_WORLD_TEXT_REORIENT_AROUND_UP = 0x1,
}

public enum QuestProgressReason : uint
{
    QUEST_NONINITIALIZED = 0x0,
    QUEST_OK = 0x1,
    QUEST_NOT_ENOUGH_PLAYERS = 0x2,
    QUEST_WARMUP = 0x3,
    QUEST_NOT_CONNECTED_TO_STEAM = 0x4,
    QUEST_NONOFFICIAL_SERVER = 0x5,
    QUEST_NO_ENTITLEMENT = 0x6,
    QUEST_NO_QUEST = 0x7,
    QUEST_PLAYER_IS_BOT = 0x8,
    QUEST_WRONG_MAP = 0x9,
    QUEST_WRONG_MODE = 0xA,
    QUEST_NOT_SYNCED_WITH_SERVER = 0xB,
    QUEST_REASON_MAX = 0xC,
}

public enum RenderFx_t : byte
{
    kRenderFxNone = 0x0,
    kRenderFxPulseSlow = 0x1,
    kRenderFxPulseFast = 0x2,
    kRenderFxPulseSlowWide = 0x3,
    kRenderFxPulseFastWide = 0x4,
    kRenderFxFadeSlow = 0x5,
    kRenderFxFadeFast = 0x6,
    kRenderFxSolidSlow = 0x7,
    kRenderFxSolidFast = 0x8,
    kRenderFxStrobeSlow = 0x9,
    kRenderFxStrobeFast = 0xA,
    kRenderFxStrobeFaster = 0xB,
    kRenderFxFlickerSlow = 0xC,
    kRenderFxFlickerFast = 0xD,
    kRenderFxNoDissipation = 0xE,
    kRenderFxFadeOut = 0xF,
    kRenderFxFadeIn = 0x10,
    kRenderFxPulseFastWider = 0x11,
    kRenderFxGlowShell = 0x12,
    kRenderFxMax = 0x13,
}

public enum RenderMode_t : byte
{
    kRenderNormal = 0x0,
    kRenderTransColor = 0x1,
    kRenderTransTexture = 0x2,
    kRenderGlow = 0x3,
    kRenderTransAlpha = 0x4,
    kRenderTransAdd = 0x5,
    kRenderEnvironmental = 0x6,
    kRenderTransAddFrameBlend = 0x7,
    kRenderTransAlphaAdd = 0x8,
    kRenderWorldGlow = 0x9,
    kRenderNone = 0xA,
    kRenderDevVisualizer = 0xB,
    kRenderModeCount = 0xC,
}

public enum ShardSolid_t : byte
{
    SHARD_SOLID = 0x0,
    SHARD_DEBRIS = 0x1,
}

public enum ShatterPanelMode : byte
{
    SHATTER_GLASS = 0x0,
    SHATTER_DRYWALL = 0x1,
}

public enum SolidType_t : byte
{
    SOLID_NONE = 0x0,
    SOLID_BSP = 0x1,
    SOLID_BBOX = 0x2,
    SOLID_OBB = 0x3,
    SOLID_SPHERE = 0x4,
    SOLID_POINT = 0x5,
    SOLID_VPHYSICS = 0x6,
    SOLID_CAPSULE = 0x7,
    SOLID_LAST = 0x8,
}

public enum SurroundingBoundsType_t : byte
{
    USE_OBB_COLLISION_BOUNDS = 0x0,
    USE_BEST_COLLISION_BOUNDS = 0x1,
    USE_HITBOXES = 0x2,
    USE_SPECIFIED_BOUNDS = 0x3,
    USE_GAME_CODE = 0x4,
    USE_ROTATION_EXPANDED_BOUNDS = 0x5,
    USE_COLLISION_BOUNDS_NEVER_VPHYSICS = 0x6,
    USE_ROTATION_EXPANDED_SEQUENCE_BOUNDS = 0x7,
    SURROUNDING_TYPE_BIT_COUNT = 0x3,
}

public enum TakeDamageFlags_t : uint
{
    DFLAG_NONE = 0x0,
    DFLAG_SUPPRESS_HEALTH_CHANGES = 0x1,
    DFLAG_SUPPRESS_PHYSICS_FORCE = 0x2,
    DFLAG_SUPPRESS_EFFECTS = 0x4,
    DFLAG_PREVENT_DEATH = 0x8,
    DFLAG_FORCE_DEATH = 0x10,
    DFLAG_ALWAYS_GIB = 0x20,
    DFLAG_NEVER_GIB = 0x40,
    DFLAG_REMOVE_NO_RAGDOLL = 0x80,
    DFLAG_SUPPRESS_DAMAGE_MODIFICATION = 0x100,
    DFLAG_ALWAYS_FIRE_DAMAGE_EVENTS = 0x200,
    DFLAG_RADIUS_DMG = 0x400,
    DMG_LASTDFLAG = 0x400,
    DFLAG_IGNORE_ARMOR = 0x800,
}

public enum ValueRemapperHapticsType_t : uint
{
    HaticsType_Default = 0x0,
    HaticsType_None = 0x1,
}

public enum ValueRemapperInputType_t : uint
{
    InputType_PlayerShootPosition = 0x0,
    InputType_PlayerShootPositionAroundAxis = 0x1,
}

public enum ValueRemapperMomentumType_t : uint
{
    MomentumType_None = 0x0,
    MomentumType_Friction = 0x1,
    MomentumType_SpringTowardSnapValue = 0x2,
    MomentumType_SpringAwayFromSnapValue = 0x3,
}

public enum ValueRemapperOutputType_t : uint
{
    OutputType_AnimationCycle = 0x0,
    OutputType_RotationX = 0x1,
    OutputType_RotationY = 0x2,
    OutputType_RotationZ = 0x3,
}

public enum ValueRemapperRatchetType_t : uint
{
    RatchetType_Absolute = 0x0,
    RatchetType_EachEngage = 0x1,
}

public partial class audioparams_t
{
    // MNetworkEncoder "coord"
    public Vector[] localSound { get; private set; } = Array.Empty<Vector>();

    public Int32 soundscapeIndex { get; private set; }

    public byte localBits { get; private set; }

    public Int32 soundscapeEntityListIndex { get; private set; }

    public UInt32 soundEventHash { get; private set; }

    internal static SendNodeDecoder<audioparams_t> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "localSound")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (audioparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.localSound.Length == 0) @this.localSound = new Vector[fixedArraySize];
                @this.localSound[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "soundscapeIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (audioparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.soundscapeIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "localBits")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (audioparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.localBits = decoder(ref buffer);
            };
        }
        if (field.VarName == "soundscapeEntityListIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (audioparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.soundscapeEntityListIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "soundEventHash")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (audioparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.soundEventHash = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CAK47 : CCSWeaponBaseGun
{
    internal CAK47(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CAK47> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CAnimGraphNetworkedVariables
{
    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetBoolVarChanged"
    // MNetworkAlias "m_PredBoolVariables"
    public NetworkedVector<UInt32> m_PredNetBoolVariables { get; private set; } = new NetworkedVector<UInt32>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetByteVarChanged"
    // MNetworkAlias "m_PredByteVariables"
    public NetworkedVector<byte> m_PredNetByteVariables { get; private set; } = new NetworkedVector<byte>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetUInt16VarChanged"
    // MNetworkAlias "m_PredUInt16Variables"
    public NetworkedVector<UInt16> m_PredNetUInt16Variables { get; private set; } = new NetworkedVector<UInt16>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetIntVarChanged"
    // MNetworkAlias "m_PredIntVariables"
    public NetworkedVector<Int32> m_PredNetIntVariables { get; private set; } = new NetworkedVector<Int32>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetUInt32VarChanged"
    // MNetworkAlias "m_PredUInt32Variables"
    public NetworkedVector<UInt32> m_PredNetUInt32Variables { get; private set; } = new NetworkedVector<UInt32>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetUInt64VarChanged"
    // MNetworkAlias "m_PredUInt64Variables"
    public NetworkedVector<UInt64> m_PredNetUInt64Variables { get; private set; } = new NetworkedVector<UInt64>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetFloatVarChanged"
    // MNetworkAlias "m_PredFloatVariables"
    public NetworkedVector<float> m_PredNetFloatVariables { get; private set; } = new NetworkedVector<float>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetVectorVarChanged"
    // MNetworkAlias "m_PredVectorVariables"
    public NetworkedVector<Vector> m_PredNetVectorVariables { get; private set; } = new NetworkedVector<Vector>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetQuaternionVarChanged"
    // MNetworkAlias "m_PredQuaternionVariables"
    public NetworkedVector<Quaternion> m_PredNetQuaternionVariables { get; private set; } = new NetworkedVector<Quaternion>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOBoolVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetBoolVariables"
    public NetworkedVector<UInt32> m_OwnerOnlyPredNetBoolVariables { get; private set; } = new NetworkedVector<UInt32>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOByteVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetByteVariables"
    public NetworkedVector<byte> m_OwnerOnlyPredNetByteVariables { get; private set; } = new NetworkedVector<byte>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOUInt16VarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetUInt16Variables"
    public NetworkedVector<UInt16> m_OwnerOnlyPredNetUInt16Variables { get; private set; } = new NetworkedVector<UInt16>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOIntVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetIntVariables"
    public NetworkedVector<Int32> m_OwnerOnlyPredNetIntVariables { get; private set; } = new NetworkedVector<Int32>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOUInt32VarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetUInt32Variables"
    public NetworkedVector<UInt32> m_OwnerOnlyPredNetUInt32Variables { get; private set; } = new NetworkedVector<UInt32>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOUInt64VarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetUInt64Variables"
    public NetworkedVector<UInt64> m_OwnerOnlyPredNetUInt64Variables { get; private set; } = new NetworkedVector<UInt64>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOFloatVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetFloatVariables"
    public NetworkedVector<float> m_OwnerOnlyPredNetFloatVariables { get; private set; } = new NetworkedVector<float>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOVectorVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetVectorVariables"
    public NetworkedVector<Vector> m_OwnerOnlyPredNetVectorVariables { get; private set; } = new NetworkedVector<Vector>();

    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOQuaternionVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetQuaternionVariables"
    public NetworkedVector<Quaternion> m_OwnerOnlyPredNetQuaternionVariables { get; private set; } = new NetworkedVector<Quaternion>();

    // MNetworkUserGroup "animationgraph"
    public Int32 m_nBoolVariablesCount { get; private set; }

    // MNetworkUserGroup "animationgraph"
    public Int32 m_nOwnerOnlyBoolVariablesCount { get; private set; }

    // MNetworkUserGroup "animationgraph"
    public Int32 m_nRandomSeedOffset { get; private set; }

    // MNetworkUserGroup "animationgraph"
    public float m_flLastTeleportTime { get; private set; }

    internal static SendNodeDecoder<CAnimGraphNetworkedVariables> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_PredBoolVariables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_PredNetBoolVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_PredNetBoolVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_PredNetBoolVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredByteVariables")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_PredNetByteVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_PredNetByteVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_PredNetByteVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredUInt16Variables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_PredNetUInt16Variables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_PredNetUInt16Variables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_PredNetUInt16Variables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredIntVariables")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_PredNetIntVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_PredNetIntVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_PredNetIntVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredUInt32Variables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_PredNetUInt32Variables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_PredNetUInt32Variables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_PredNetUInt32Variables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredUInt64Variables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_PredNetUInt64Variables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_PredNetUInt64Variables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_PredNetUInt64Variables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredFloatVariables")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_PredNetFloatVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_PredNetFloatVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_PredNetFloatVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredVectorVariables")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_PredNetVectorVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_PredNetVectorVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_PredNetVectorVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_PredQuaternionVariables")
        {
            var decoder = FieldDecode.CreateDecoder_Quaternion(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_PredNetQuaternionVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_PredNetQuaternionVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_PredNetQuaternionVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetBoolVariables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_OwnerOnlyPredNetBoolVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_OwnerOnlyPredNetBoolVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_OwnerOnlyPredNetBoolVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetByteVariables")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_OwnerOnlyPredNetByteVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_OwnerOnlyPredNetByteVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_OwnerOnlyPredNetByteVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetUInt16Variables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_OwnerOnlyPredNetUInt16Variables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_OwnerOnlyPredNetUInt16Variables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_OwnerOnlyPredNetUInt16Variables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetIntVariables")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_OwnerOnlyPredNetIntVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_OwnerOnlyPredNetIntVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_OwnerOnlyPredNetIntVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetUInt32Variables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_OwnerOnlyPredNetUInt32Variables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_OwnerOnlyPredNetUInt32Variables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_OwnerOnlyPredNetUInt32Variables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetUInt64Variables")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_OwnerOnlyPredNetUInt64Variables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_OwnerOnlyPredNetUInt64Variables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_OwnerOnlyPredNetUInt64Variables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetFloatVariables")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_OwnerOnlyPredNetFloatVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_OwnerOnlyPredNetFloatVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_OwnerOnlyPredNetFloatVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetVectorVariables")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_OwnerOnlyPredNetVectorVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_OwnerOnlyPredNetVectorVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_OwnerOnlyPredNetVectorVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_OwnerOnlyPredNetQuaternionVariables")
        {
            var decoder = FieldDecode.CreateDecoder_Quaternion(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_OwnerOnlyPredNetQuaternionVariables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_OwnerOnlyPredNetQuaternionVariables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_OwnerOnlyPredNetQuaternionVariables[index] = element;
                }
            };
        }
        if (field.VarName == "m_nBoolVariablesCount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nBoolVariablesCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nOwnerOnlyBoolVariablesCount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nOwnerOnlyBoolVariablesCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRandomSeedOffset")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nRandomSeedOffset = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLastTeleportTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CAnimGraphNetworkedVariables @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flLastTeleportTime = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CAttributeContainer : CAttributeManager
{
    public CEconItemView m_Item { get; private set; } = new();

    internal new static SendNodeDecoder<CAttributeContainer> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_Item")
        {
            var innerDecoder = CEconItemView.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CAttributeContainer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_Item, path, ref buffer);
            };
        }
        return CAttributeManager.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CAttributeList
{
    // MNetworkTypeAlias "CUtlVector< CEconItemAttribute >"
    public NetworkedVector<CEconItemAttribute> m_Attributes { get; private set; } = new NetworkedVector<CEconItemAttribute>();

    internal static SendNodeDecoder<CAttributeList> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Attributes")
        {
            var innerDecoder = decoderSet.GetDecoder<CEconItemAttribute>(field.FieldSerializerKey!.Value);
            return (CAttributeList @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_Attributes.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.m_Attributes.EnsureSize(index + 1);
                    var element = @this.m_Attributes[index] ??= new CEconItemAttribute();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CAttributeManager
{
    public Int32 m_iReapplyProvisionParity { get; private set; }

    public CHandle<CBaseEntity> m_hOuter { get; private set; }

    public attributeprovidertypes_t m_ProviderType { get; private set; }

    internal static SendNodeDecoder<CAttributeManager> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iReapplyProvisionParity")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CAttributeManager @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iReapplyProvisionParity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hOuter")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CAttributeManager @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hOuter = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ProviderType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<attributeprovidertypes_t>(field.FieldEncodingInfo);
            return (CAttributeManager @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_ProviderType = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CBarnLight : CBaseModelEntity
{
    internal CBarnLight(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "RenderingChanged"
    public bool m_bEnabled { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 m_nColorMode { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Color m_Color { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float m_flColorTemperature { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float m_flBrightness { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float m_flBrightnessScale { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 m_nDirectLight { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 m_nBakedShadowIndex { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 m_nLuminaireShape { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float m_flLuminaireSize { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float m_flLuminaireAnisotropy { get; private set; }

    // MNetworkChangeCallback "StyleChanged"
    public NetworkedString m_LightStyleString { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public GameTime_t m_flLightStyleStartTime { get; private set; } = new();

    public NetworkedVector<NetworkedString> m_QueuedLightStyleStrings { get; private set; } = new NetworkedVector<NetworkedString>();

    public NetworkedVector<NetworkedString> m_LightStyleEvents { get; private set; } = new NetworkedVector<NetworkedString>();

    public NetworkedVector<CHandle<CBaseModelEntity>> m_LightStyleTargets { get; private set; } = new NetworkedVector<CHandle<CBaseModelEntity>>();

    // MNetworkChangeCallback "RenderingChanged"
    public CStrongHandle<InfoForResourceTypeCTextureBase> m_hLightCookie { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float m_flShape { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float m_flSoftX { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float m_flSoftY { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float m_flSkirt { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float m_flSkirtNear { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    // MNetworkBitCount "32"
    public Vector m_vSizeParams { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    // MNetworkBitCount "32"
    public float m_flRange { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    // MNetworkBitCount "32"
    public Vector m_vShear { get; private set; }

    public Int32 m_nBakeSpecularToCubemaps { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    // MNetworkBitCount "32"
    public Vector m_vBakeSpecularToCubemapsSize { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 m_nCastShadows { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 m_nShadowMapSize { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 m_nShadowPriority { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public bool m_bContactShadow { get; private set; }

    public Int32 m_nBounceLight { get; private set; }

    public float m_flBounceScale { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float m_flMinRoughness { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector m_vAlternateColor { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float m_fAlternateColorBrightness { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 m_nFog { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float m_flFogStrength { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Int32 m_nFogShadows { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float m_flFogScale { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float m_flFadeSizeStart { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float m_flFadeSizeEnd { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float m_flShadowFadeSizeStart { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float m_flShadowFadeSizeEnd { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public bool m_bPrecomputedFieldsValid { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector m_vPrecomputedBoundsMins { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector m_vPrecomputedBoundsMaxs { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector m_vPrecomputedOBBOrigin { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public QAngle m_vPrecomputedOBBAngles { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public Vector m_vPrecomputedOBBExtent { get; private set; }

    internal new static SendNodeDecoder<CBarnLight> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nColorMode")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nColorMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Color")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_Color = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flColorTemperature")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flColorTemperature = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flBrightness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightnessScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flBrightnessScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDirectLight")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nDirectLight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBakedShadowIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nBakedShadowIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLuminaireShape")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nLuminaireShape = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLuminaireSize")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flLuminaireSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLuminaireAnisotropy")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flLuminaireAnisotropy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_LightStyleString")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_LightStyleString = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLightStyleStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flLightStyleStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_QueuedLightStyleStrings")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_QueuedLightStyleStrings.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_QueuedLightStyleStrings.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_QueuedLightStyleStrings[index] = element;
                }
            };
        }
        if (field.VarName == "m_LightStyleEvents")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_LightStyleEvents.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_LightStyleEvents.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_LightStyleEvents[index] = element;
                }
            };
        }
        if (field.VarName == "m_LightStyleTargets")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseModelEntity>(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_LightStyleTargets.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_LightStyleTargets.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_LightStyleTargets[index] = element;
                }
            };
        }
        if (field.VarName == "m_hLightCookie")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hLightCookie = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShape")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flShape = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSoftX")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flSoftX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSoftY")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flSoftY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSkirt")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flSkirt = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSkirtNear")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flSkirtNear = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vSizeParams")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vSizeParams = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRange")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flRange = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vShear")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vShear = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBakeSpecularToCubemaps")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nBakeSpecularToCubemaps = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBakeSpecularToCubemapsSize")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vBakeSpecularToCubemapsSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCastShadows")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nCastShadows = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowMapSize")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nShadowMapSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowPriority")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nShadowPriority = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bContactShadow")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bContactShadow = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBounceLight")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nBounceLight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBounceScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flBounceScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMinRoughness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flMinRoughness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vAlternateColor")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vAlternateColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fAlternateColorBrightness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fAlternateColorBrightness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFog")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nFog = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFogShadows")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nFogShadows = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeSizeStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeSizeStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeSizeEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeSizeEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowFadeSizeStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flShadowFadeSizeStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowFadeSizeEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flShadowFadeSizeEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPrecomputedFieldsValid")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bPrecomputedFieldsValid = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedBoundsMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vPrecomputedBoundsMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedBoundsMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vPrecomputedBoundsMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBOrigin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vPrecomputedOBBOrigin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vPrecomputedOBBAngles = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBExtent")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBarnLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vPrecomputedOBBExtent = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBaseAnimGraph : CBaseModelEntity
{
    internal CBaseAnimGraph(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bInitiallyPopulateInterpHistory { get; private set; }

    public bool m_bShouldAnimateDuringGameplayPause { get; private set; }

    public bool m_bAnimGraphUpdateEnabled { get; private set; }

    public Vector m_vecForce { get; private set; }

    public Int32 m_nForceBone { get; private set; }

    public PhysicsRagdollPose_t? m_pRagdollPose { get; private set; }

    // MNetworkChangeCallback "OnClientRagdollChanged"
    public bool m_bClientRagdoll { get; private set; }

    internal new static SendNodeDecoder<CBaseAnimGraph> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bInitiallyPopulateInterpHistory")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bInitiallyPopulateInterpHistory = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bShouldAnimateDuringGameplayPause")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bShouldAnimateDuringGameplayPause = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAnimGraphUpdateEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bAnimGraphUpdateEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecForce")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecForce = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nForceBone")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nForceBone = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_pRagdollPose")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = PhysicsRagdollPose_t.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pRagdollPose = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pRagdollPose ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_bClientRagdoll")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bClientRagdoll = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBaseAnimGraphController : CSkeletonAnimationController
{
    // MNetworkChangeCallback "baseAnimBaseLayerChangedCompat"
    public CNetworkedSequenceOperation m_baseLayer { get; private set; } = new();

    public CAnimGraphNetworkedVariables m_animGraphNetworkedVars { get; private set; } = new();

    // MNetworkBitCount "8"
    // MNetworkMinValue "-4.000000"
    // MNetworkMaxValue "12.000000"
    // MNetworkEncodeFlags "5"
    // MNetworkPriority "32"
    // MNetworkChangeCallback "playbackRateChangedCompat"
    public float m_flPlaybackRate { get; private set; }

    // MNetworkChangeCallback "clientSideAnimationChangedCompat"
    public bool m_bClientSideAnimation { get; private set; }

    // MNetworkPriority "32"
    // MNetworkChangeCallback "clientSideAnimCycleResetCompat"
    public Int32 m_nNewSequenceParity { get; private set; }

    // MNetworkPriority "32"
    public Int32 m_nResetEventsParity { get; private set; }

    public AnimLoopMode_t m_nAnimLoopMode { get; private set; }

    internal new static SendNodeDecoder<CBaseAnimGraphController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_baseLayer")
        {
            var innerDecoder = CNetworkedSequenceOperation.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseAnimGraphController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_baseLayer, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_animGraphNetworkedVars")
        {
            var innerDecoder = CAnimGraphNetworkedVariables.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseAnimGraphController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_animGraphNetworkedVars, path, ref buffer);
            };
        }
        if (field.VarName == "m_flPlaybackRate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseAnimGraphController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flPlaybackRate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bClientSideAnimation")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseAnimGraphController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bClientSideAnimation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nNewSequenceParity")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBaseAnimGraphController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nNewSequenceParity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nResetEventsParity")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBaseAnimGraphController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nResetEventsParity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nAnimLoopMode")
        {
            var decoder = FieldDecode.CreateDecoder_enum<AnimLoopMode_t>(field.FieldEncodingInfo);
            return (CBaseAnimGraphController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nAnimLoopMode = decoder(ref buffer);
            };
        }
        return CSkeletonAnimationController.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBaseButton : CBaseToggle
{
    internal CBaseButton(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CBaseModelEntity> m_glowEntity { get; private set; }

    public bool m_usable { get; private set; }

    public NetworkedString m_szDisplayText { get; private set; }

    internal new static SendNodeDecoder<CBaseButton> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_glowEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseModelEntity>(field.FieldEncodingInfo);
            return (CBaseButton @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_glowEntity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_usable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseButton @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_usable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szDisplayText")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBaseButton @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szDisplayText = decoder(ref buffer);
            };
        }
        return CBaseToggle.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBaseClientUIEntity : CBaseModelEntity
{
    internal CBaseClientUIEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bEnabled { get; private set; }

    public NetworkedString m_DialogXMLName { get; private set; }

    public NetworkedString m_PanelClassName { get; private set; }

    public NetworkedString m_PanelID { get; private set; }

    internal new static SendNodeDecoder<CBaseClientUIEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseClientUIEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_DialogXMLName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBaseClientUIEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_DialogXMLName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_PanelClassName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBaseClientUIEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_PanelClassName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_PanelID")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CBaseClientUIEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_PanelID = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBaseCombatCharacter : CBaseFlex
{
    internal CBaseCombatCharacter(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedVector<CHandle<CEconWearable>> m_hMyWearables { get; private set; } = new NetworkedVector<CHandle<CEconWearable>>();

    public float m_flFieldOfView { get; private set; }

    internal new static SendNodeDecoder<CBaseCombatCharacter> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hMyWearables")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CEconWearable>(field.FieldEncodingInfo);
            return (CBaseCombatCharacter @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_hMyWearables.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_hMyWearables.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_hMyWearables[index] = element;
                }
            };
        }
        if (field.VarName == "m_flFieldOfView")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseCombatCharacter @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFieldOfView = decoder(ref buffer);
            };
        }
        return CBaseFlex.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBaseCSGrenade : CCSWeaponBase
{
    internal CBaseCSGrenade(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bRedraw { get; private set; }

    public bool m_bIsHeldByPlayer { get; private set; }

    public bool m_bPinPulled { get; private set; }

    public bool m_bJumpThrow { get; private set; }

    public EGrenadeThrowState m_eThrowStatus { get; private set; }

    public GameTime_t m_fThrowTime { get; private set; } = new();

    public float m_flThrowStrength { get; private set; }

    public float m_flThrowStrengthApproach { get; private set; }

    public GameTime_t m_fDropTime { get; private set; } = new();

    internal new static SendNodeDecoder<CBaseCSGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bRedraw")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bRedraw = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsHeldByPlayer")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsHeldByPlayer = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPinPulled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bPinPulled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bJumpThrow")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bJumpThrow = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eThrowStatus")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EGrenadeThrowState>(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_eThrowStatus = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fThrowTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fThrowTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flThrowStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flThrowStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flThrowStrengthApproach")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flThrowStrengthApproach = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fDropTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CBaseCSGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fDropTime = decoder(ref buffer);
            };
        }
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBaseCSGrenadeProjectile : CBaseGrenade
{
    internal CBaseCSGrenadeProjectile(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Vector m_vInitialVelocity { get; private set; }

    public Int32 m_nBounces { get; private set; }

    public CStrongHandle<InfoForResourceTypeIParticleSystemDefinition> m_nExplodeEffectIndex { get; private set; }

    public Int32 m_nExplodeEffectTickBegin { get; private set; }

    public Vector m_vecExplodeEffectOrigin { get; private set; }

    internal new static SendNodeDecoder<CBaseCSGrenadeProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vInitialVelocity")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBaseCSGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vInitialVelocity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBounces")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBaseCSGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nBounces = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nExplodeEffectIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>(field.FieldEncodingInfo);
            return (CBaseCSGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nExplodeEffectIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nExplodeEffectTickBegin")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBaseCSGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nExplodeEffectTickBegin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecExplodeEffectOrigin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBaseCSGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecExplodeEffectOrigin = decoder(ref buffer);
            };
        }
        return CBaseGrenade.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBaseDoor : CBaseToggle
{
    internal CBaseDoor(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bIsUsable { get; private set; }

    internal new static SendNodeDecoder<CBaseDoor> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bIsUsable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseDoor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsUsable = decoder(ref buffer);
            };
        }
        return CBaseToggle.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBaseEntity : CEntityInstance
{
    internal CBaseEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CBodyComponent"
    // MNetworkAlias "CBodyComponent"
    // MNetworkTypeAlias "CBodyComponent"
    // MNetworkPriority "48"
    public CBodyComponent? m_CBodyComponent { get; private set; }

    // MNetworkSerializer "ClampHealth"
    // MNetworkUserGroup "Player"
    // MNetworkPriority "32"
    public Int32 m_iHealth { get; private set; }

    public Int32 m_iMaxHealth { get; private set; }

    // MNetworkUserGroup "Player"
    // MNetworkPriority "32"
    public byte m_lifeState { get; private set; }

    public bool m_bTakesDamage { get; private set; }

    public TakeDamageFlags_t m_nTakeDamageFlags { get; private set; }

    public MoveCollide_t m_MoveCollide { get; private set; }

    public MoveType_t m_MoveType { get; private set; }

    // MNetworkSendProxyRecipientsFilter
    public CUtlStringToken m_nSubclassID { get; private set; }

    // MNetworkPriority "0"
    // MNetworkSerializer "animTimeSerializer"
    // MNetworkSendProxyRecipientsFilter
    public float m_flAnimTime { get; private set; }

    // MNetworkPriority "1"
    // MNetworkSerializer "simulationTimeSerializer"
    // MNetworkSendProxyRecipientsFilter
    public float m_flSimulationTime { get; private set; }

    public GameTime_t m_flCreateTime { get; private set; } = new();

    public bool m_bClientSideRagdoll { get; private set; }

    public byte m_ubInterpolationFrame { get; private set; }

    public byte m_iTeamNum { get; private set; }

    public UInt32 m_spawnflags { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public GameTick_t m_nNextThinkTick { get; private set; } = new();

    // MNetworkPriority "32"
    // MNetworkUserGroup "Player"
    public UInt32 m_fFlags { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    // MNetworkPriority "32"
    public CNetworkVelocityVector m_vecVelocity { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public Vector m_vecBaseVelocity { get; private set; }

    public CHandle<CBaseEntity> m_hEffectEntity { get; private set; }

    // MNetworkPriority "32"
    public CHandle<CBaseEntity> m_hOwnerEntity { get; private set; }

    // MNetworkChangeCallback "OnEffectsChanged"
    public UInt32 m_fEffects { get; private set; }

    // MNetworkPriority "32"
    // MNetworkUserGroup "Player"
    public CHandle<CBaseEntity> m_hGroundEntity { get; private set; }

    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "4.000000"
    // MNetworkEncodeFlags "1"
    // MNetworkUserGroup "LocalPlayerExclusive"
    public float m_flFriction { get; private set; }

    // MNetworkEncoder "coord"
    public float m_flElasticity { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public float m_flGravityScale { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public float m_flTimeScale { get; private set; }

    // MNetworkUserGroup "Water"
    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1.000000"
    // MNetworkEncodeFlags "8"
    public float m_flWaterLevel { get; private set; }

    public bool m_bSimulatedEveryTick { get; private set; }

    public bool m_bAnimatedEveryTick { get; private set; }

    public GameTime_t m_flNavIgnoreUntilTime { get; private set; } = new();

    internal new static SendNodeDecoder<CBaseEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "CBodyComponent")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CBodyComponent.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_CBodyComponent = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_CBodyComponent ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_iHealth")
        {
            var decoder = CreateDecoder_ClampHealth(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iHealth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMaxHealth")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iMaxHealth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_lifeState")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_lifeState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bTakesDamage")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bTakesDamage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTakeDamageFlags")
        {
            var decoder = FieldDecode.CreateDecoder_enum<TakeDamageFlags_t>(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nTakeDamageFlags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MoveCollide")
        {
            var decoder = FieldDecode.CreateDecoder_enum<MoveCollide_t>(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_MoveCollide = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MoveType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<MoveType_t>(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_MoveType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSubclassID")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nSubclassID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAnimTime")
        {
            var decoder = CreateDecoder_animTimeSerializer(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flAnimTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSimulationTime")
        {
            var decoder = CreateDecoder_simulationTimeSerializer(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flSimulationTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCreateTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flCreateTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bClientSideRagdoll")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bClientSideRagdoll = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ubInterpolationFrame")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_ubInterpolationFrame = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iTeamNum")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iTeamNum = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_spawnflags")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_spawnflags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nNextThinkTick")
        {
            var decoder = FieldDecode.CreateDecoder_GameTick_t(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nNextThinkTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fFlags")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fFlags = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_vecVelocity")
        {
            var innerDecoder = CNetworkVelocityVector.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_vecVelocity, path, ref buffer);
            };
        }
        if (field.VarName == "m_vecBaseVelocity")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecBaseVelocity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hEffectEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hEffectEntity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hOwnerEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hOwnerEntity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fEffects")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fEffects = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hGroundEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hGroundEntity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFriction")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFriction = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flElasticity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flElasticity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGravityScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flGravityScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTimeScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flTimeScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flWaterLevel")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flWaterLevel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bSimulatedEveryTick")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bSimulatedEveryTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAnimatedEveryTick")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bAnimatedEveryTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNavIgnoreUntilTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CBaseEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flNavIgnoreUntilTime = decoder(ref buffer);
            };
        }
        return CEntityInstance.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBaseFire : CBaseEntity
{
    internal CBaseFire(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float m_flScale { get; private set; }

    public float m_flStartScale { get; private set; }

    public float m_flScaleTime { get; private set; }

    public UInt32 m_nFlags { get; private set; }

    internal new static SendNodeDecoder<CBaseFire> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseFire @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseFire @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flStartScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flScaleTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseFire @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flScaleTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFlags")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBaseFire @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nFlags = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBaseFlex : CBaseAnimGraph
{
    internal CBaseFlex(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkBitCount "12"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1.000000"
    // MNetworkEncodeFlags "1"
    public NetworkedVector<float> m_flexWeight { get; private set; } = new NetworkedVector<float>();

    // MNetworkEncoder "coord"
    public Vector m_vLookTargetPosition { get; private set; }

    public bool m_blinktoggle { get; private set; }

    internal new static SendNodeDecoder<CBaseFlex> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flexWeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseFlex @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_flexWeight.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_flexWeight.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_flexWeight[index] = element;
                }
            };
        }
        if (field.VarName == "m_vLookTargetPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBaseFlex @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vLookTargetPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_blinktoggle")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseFlex @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_blinktoggle = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBaseGrenade : CBaseFlex
{
    internal CBaseGrenade(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bIsLive { get; private set; }

    // MNetworkBitCount "10"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1024.000000"
    // MNetworkEncodeFlags "1"
    public float m_DmgRadius { get; private set; }

    public GameTime_t m_flDetonateTime { get; private set; } = new();

    // MNetworkBitCount "10"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "256.000000"
    // MNetworkEncodeFlags "1"
    public float m_flDamage { get; private set; }

    public CHandle<CCSPlayerPawn> m_hThrower { get; private set; }

    internal new static SendNodeDecoder<CBaseGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bIsLive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsLive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_DmgRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_DmgRadius = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDetonateTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CBaseGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDetonateTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDamage")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDamage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hThrower")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CBaseGrenade @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hThrower = decoder(ref buffer);
            };
        }
        return CBaseFlex.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBaseModelEntity : CBaseEntity
{
    internal CBaseModelEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CRenderComponent"
    // MNetworkAlias "CRenderComponent"
    // MNetworkTypeAlias "CRenderComponent"
    public CRenderComponent? m_CRenderComponent { get; private set; }

    // MNetworkUserGroup "CHitboxComponent"
    // MNetworkAlias "CHitboxComponent"
    // MNetworkTypeAlias "CHitboxComponent"
    public CHitboxComponent m_CHitboxComponent { get; private set; } = new();

    public RenderMode_t m_nRenderMode { get; private set; }

    public RenderFx_t m_nRenderFX { get; private set; }

    // MNetworkChangeCallback "OnColorChanged"
    public Color m_clrRender { get; private set; }

    // MNetworkChangeCallback "OnRenderAttributesChanged"
    public NetworkedVector<EntityRenderAttribute_t> m_vecRenderAttributes { get; private set; } = new NetworkedVector<EntityRenderAttribute_t>();

    // MNetworkChangeCallback "OnLightGroupChanged"
    public CUtlStringToken m_LightGroup { get; private set; }

    public bool m_bRenderToCubemaps { get; private set; }

    public CCollisionProperty m_Collision { get; private set; } = new();

    public CGlowProperty m_Glow { get; private set; } = new();

    public float m_flGlowBackfaceMult { get; private set; }

    public float m_fadeMinDist { get; private set; }

    public float m_fadeMaxDist { get; private set; }

    public float m_flFadeScale { get; private set; }

    public float m_flShadowStrength { get; private set; }

    public byte m_nObjectCulling { get; private set; }

    public Int32 m_nAddDecal { get; private set; }

    public Vector m_vDecalPosition { get; private set; }

    public Vector m_vDecalForwardAxis { get; private set; }

    public float m_flDecalHealBloodRate { get; private set; }

    public float m_flDecalHealHeightRate { get; private set; }

    public NetworkedVector<CHandle<CBaseModelEntity>> m_ConfigEntitiesToPropagateMaterialDecalsTo { get; private set; } = new NetworkedVector<CHandle<CBaseModelEntity>>();

    // MNetworkPriority "32"
    // MNetworkUserGroup "Player"
    public CNetworkViewOffsetVector m_vecViewOffset { get; private set; } = new();

    internal new static SendNodeDecoder<CBaseModelEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "CRenderComponent")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CRenderComponent.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_CRenderComponent = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_CRenderComponent ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CHitboxComponent")
        {
            var innerDecoder = CHitboxComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_CHitboxComponent, path, ref buffer);
            };
        }
        if (field.VarName == "m_nRenderMode")
        {
            var decoder = FieldDecode.CreateDecoder_enum<RenderMode_t>(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nRenderMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRenderFX")
        {
            var decoder = FieldDecode.CreateDecoder_enum<RenderFx_t>(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nRenderFX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_clrRender")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_clrRender = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecRenderAttributes")
        {
            var innerDecoder = decoderSet.GetDecoder<EntityRenderAttribute_t>(field.FieldSerializerKey!.Value);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_vecRenderAttributes.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.m_vecRenderAttributes.EnsureSize(index + 1);
                    var element = @this.m_vecRenderAttributes[index] ??= new EntityRenderAttribute_t();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_LightGroup")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_LightGroup = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRenderToCubemaps")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bRenderToCubemaps = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_Collision")
        {
            var innerDecoder = CCollisionProperty.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_Collision, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_Glow")
        {
            var innerDecoder = CGlowProperty.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_Glow, path, ref buffer);
            };
        }
        if (field.VarName == "m_flGlowBackfaceMult")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flGlowBackfaceMult = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fadeMinDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fadeMinDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fadeMaxDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fadeMaxDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flShadowStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nObjectCulling")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nObjectCulling = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nAddDecal")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nAddDecal = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vDecalPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vDecalPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vDecalForwardAxis")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vDecalForwardAxis = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDecalHealBloodRate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDecalHealBloodRate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDecalHealHeightRate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDecalHealHeightRate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ConfigEntitiesToPropagateMaterialDecalsTo")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseModelEntity>(field.FieldEncodingInfo);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_ConfigEntitiesToPropagateMaterialDecalsTo.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_ConfigEntitiesToPropagateMaterialDecalsTo.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_ConfigEntitiesToPropagateMaterialDecalsTo[index] = element;
                }
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_vecViewOffset")
        {
            var innerDecoder = CNetworkViewOffsetVector.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBaseModelEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_vecViewOffset, path, ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBasePlayerController : CBaseEntity
{
    internal CBasePlayerController(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkPriority "1"
    // MNetworkUserGroup "LocalPlayerExclusive"
    public UInt32 m_nTickBase { get; private set; }

    // MNetworkChangeCallback "OnPawnChanged"
    public CHandle<CBasePlayerPawn> m_hPawn { get; private set; }

    // MNetworkChangeCallback "OnConnectionStateChanged"
    public PlayerConnectedState m_iConnected { get; private set; }

    // MNetworkChangeCallback "OnPlayerControllerNameChanged"
    public string m_iszPlayerName { get; private set; } = "";

    // MNetworkEncoder "fixed64"
    // MNetworkChangeCallback "OnSteamIDChanged"
    public UInt64 m_steamID { get; private set; }

    public UInt32 m_iDesiredFOV { get; private set; }

    internal new static SendNodeDecoder<CBasePlayerController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nTickBase")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBasePlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nTickBase = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hPawn")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerPawn>(field.FieldEncodingInfo);
            return (CBasePlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hPawn = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iConnected")
        {
            var decoder = FieldDecode.CreateDecoder_enum<PlayerConnectedState>(field.FieldEncodingInfo);
            return (CBasePlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iConnected = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszPlayerName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CBasePlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iszPlayerName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_steamID")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CBasePlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_steamID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iDesiredFOV")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBasePlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iDesiredFOV = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBasePlayerPawn : CBaseCombatCharacter
{
    internal CBasePlayerPawn(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CPlayer_WeaponServices? m_pWeaponServices { get; private set; }

    public CPlayer_ItemServices? m_pItemServices { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public CPlayer_AutoaimServices? m_pAutoaimServices { get; private set; }

    public CPlayer_ObserverServices? m_pObserverServices { get; private set; }

    public CPlayer_WaterServices? m_pWaterServices { get; private set; }

    public CPlayer_UseServices? m_pUseServices { get; private set; }

    public CPlayer_FlashlightServices? m_pFlashlightServices { get; private set; }

    public CPlayer_CameraServices? m_pCameraServices { get; private set; }

    public CPlayer_MovementServices? m_pMovementServices { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public NetworkedVector<ViewAngleServerChange_t> m_ServerViewAngleChanges { get; private set; } = new NetworkedVector<ViewAngleServerChange_t>();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public UInt32 m_iHideHUD { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public sky3dparams_t m_skybox3d { get; private set; } = new();

    public GameTime_t m_flDeathTime { get; private set; } = new();

    public CHandle<CBasePlayerController> m_hController { get; private set; }

    internal new static SendNodeDecoder<CBasePlayerPawn> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_pWeaponServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_WeaponServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pWeaponServices = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pWeaponServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pItemServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_ItemServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pItemServices = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pItemServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pAutoaimServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_AutoaimServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pAutoaimServices = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pAutoaimServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pObserverServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_ObserverServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pObserverServices = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pObserverServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pWaterServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_WaterServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pWaterServices = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pWaterServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pUseServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_UseServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pUseServices = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pUseServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pFlashlightServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_FlashlightServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pFlashlightServices = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pFlashlightServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pCameraServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_CameraServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pCameraServices = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pCameraServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pMovementServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_MovementServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pMovementServices = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pMovementServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_ServerViewAngleChanges")
        {
            var innerDecoder = decoderSet.GetDecoder<ViewAngleServerChange_t>(field.FieldSerializerKey!.Value);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_ServerViewAngleChanges.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.m_ServerViewAngleChanges.EnsureSize(index + 1);
                    var element = @this.m_ServerViewAngleChanges[index] ??= new ViewAngleServerChange_t();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_iHideHUD")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iHideHUD = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_skybox3d")
        {
            var innerDecoder = sky3dparams_t.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_skybox3d, path, ref buffer);
            };
        }
        if (field.VarName == "m_flDeathTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDeathTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hController")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerController>(field.FieldEncodingInfo);
            return (CBasePlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hController = decoder(ref buffer);
            };
        }
        return CBaseCombatCharacter.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBasePlayerWeapon : CEconEntity
{
    internal CBasePlayerWeapon(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "LocalWeaponExclusive"
    public GameTick_t m_nNextPrimaryAttackTick { get; private set; } = new();

    // MNetworkUserGroup "LocalWeaponExclusive"
    public float m_flNextPrimaryAttackTickRatio { get; private set; }

    // MNetworkUserGroup "LocalWeaponExclusive"
    public GameTick_t m_nNextSecondaryAttackTick { get; private set; } = new();

    // MNetworkUserGroup "LocalWeaponExclusive"
    public float m_flNextSecondaryAttackTickRatio { get; private set; }

    // MNetworkSerializer "minusone"
    // MNetworkPriority "32"
    public Int32 m_iClip1 { get; private set; }

    // MNetworkSerializer "minusone"
    // MNetworkUserGroup "LocalWeaponExclusive"
    public Int32 m_iClip2 { get; private set; }

    // MNetworkUserGroup "LocalWeaponExclusive"
    public Int32[] m_pReserveAmmo { get; private set; } = Array.Empty<Int32>();

    internal new static SendNodeDecoder<CBasePlayerWeapon> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nNextPrimaryAttackTick")
        {
            var decoder = FieldDecode.CreateDecoder_GameTick_t(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nNextPrimaryAttackTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextPrimaryAttackTickRatio")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flNextPrimaryAttackTickRatio = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nNextSecondaryAttackTick")
        {
            var decoder = FieldDecode.CreateDecoder_GameTick_t(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nNextSecondaryAttackTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextSecondaryAttackTickRatio")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flNextSecondaryAttackTickRatio = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iClip1")
        {
            var decoder = CreateDecoder_minusone(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iClip1 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iClip2")
        {
            var decoder = CreateDecoder_minusone(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iClip2 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_pReserveAmmo")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CBasePlayerWeapon @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_pReserveAmmo.Length == 0) @this.m_pReserveAmmo = new Int32[fixedArraySize];
                @this.m_pReserveAmmo[path[1]] = decoder(ref buffer);
            };
        }
        return CEconEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBaseProp : CBaseAnimGraph
{
    internal CBaseProp(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CBaseProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBasePropDoor : CDynamicProp
{
    internal CBasePropDoor(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public DoorState_t m_eDoorState { get; private set; }

    public bool m_bLocked { get; private set; }

    public Vector m_closedPosition { get; private set; }

    public QAngle m_closedAngles { get; private set; }

    public CHandle<CBasePropDoor> m_hMaster { get; private set; }

    internal new static SendNodeDecoder<CBasePropDoor> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_eDoorState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<DoorState_t>(field.FieldEncodingInfo);
            return (CBasePropDoor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_eDoorState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bLocked")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBasePropDoor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bLocked = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_closedPosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBasePropDoor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_closedPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_closedAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CBasePropDoor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_closedAngles = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hMaster")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePropDoor>(field.FieldEncodingInfo);
            return (CBasePropDoor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hMaster = decoder(ref buffer);
            };
        }
        return CDynamicProp.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBaseToggle : CBaseModelEntity
{
    internal CBaseToggle(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CBaseToggle> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBaseTrigger : CBaseToggle
{
    internal CBaseTrigger(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bDisabled { get; private set; }

    public bool m_bClientSidePredicted { get; private set; }

    internal new static SendNodeDecoder<CBaseTrigger> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseTrigger @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bClientSidePredicted")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBaseTrigger @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bClientSidePredicted = decoder(ref buffer);
            };
        }
        return CBaseToggle.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBaseViewModel : CBaseAnimGraph
{
    internal CBaseViewModel(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public UInt32 m_nViewModelIndex { get; private set; }

    public UInt32 m_nAnimationParity { get; private set; }

    public float m_flAnimationStartTime { get; private set; }

    public CHandle<CBasePlayerWeapon> m_hWeapon { get; private set; }

    public CHandle<CBaseEntity> m_hControlPanel { get; private set; }

    internal new static SendNodeDecoder<CBaseViewModel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nViewModelIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBaseViewModel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nViewModelIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nAnimationParity")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBaseViewModel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nAnimationParity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAnimationStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBaseViewModel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flAnimationStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hWeapon")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerWeapon>(field.FieldEncodingInfo);
            return (CBaseViewModel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hWeapon = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hControlPanel")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CBaseViewModel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hControlPanel = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBeam : CBaseModelEntity
{
    internal CBeam(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkBitCount "10"
    // MNetworkMinValue "-25.000000"
    // MNetworkMaxValue "25.000000"
    // MNetworkEncodeFlags "2"
    public float m_flFrameRate { get; private set; }

    public float m_flHDRColorScale { get; private set; }

    public byte m_nNumBeamEnts { get; private set; }

    public CStrongHandle<InfoForResourceTypeIMaterial2> m_hBaseMaterial { get; private set; }

    public CStrongHandle<InfoForResourceTypeIMaterial2> m_nHaloIndex { get; private set; }

    public BeamType_t m_nBeamType { get; private set; }

    public UInt32 m_nBeamFlags { get; private set; }

    public CHandle<CBaseEntity>[] m_hAttachEntity { get; private set; } = Array.Empty<CHandle<CBaseEntity>>();

    public AttachmentHandle_t[] m_nAttachIndex { get; private set; } = Array.Empty<AttachmentHandle_t>();

    // MNetworkBitCount "10"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "102.300003"
    // MNetworkEncodeFlags "2"
    public float m_fWidth { get; private set; }

    // MNetworkBitCount "10"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "102.300003"
    // MNetworkEncodeFlags "2"
    public float m_fEndWidth { get; private set; }

    public float m_fFadeLength { get; private set; }

    public float m_fHaloScale { get; private set; }

    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "64.000000"
    // MNetworkEncodeFlags "1"
    public float m_fAmplitude { get; private set; }

    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "256.000000"
    // MNetworkEncodeFlags "1"
    public float m_fStartFrame { get; private set; }

    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "100.000000"
    public float m_fSpeed { get; private set; }

    // MNetworkBitCount "20"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "256.000000"
    // MNetworkEncodeFlags "1"
    // MNetworkPriority "32"
    public float m_flFrame { get; private set; }

    public BeamClipStyle_t m_nClipStyle { get; private set; }

    public bool m_bTurnedOff { get; private set; }

    // MNetworkEncoder "coord"
    public Vector m_vecEndPos { get; private set; }

    internal new static SendNodeDecoder<CBeam> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flFrameRate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFrameRate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHDRColorScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flHDRColorScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nNumBeamEnts")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nNumBeamEnts = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hBaseMaterial")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hBaseMaterial = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHaloIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nHaloIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBeamType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<BeamType_t>(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nBeamType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBeamFlags")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nBeamFlags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hAttachEntity")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_hAttachEntity.Length == 0) @this.m_hAttachEntity = new CHandle<CBaseEntity>[fixedArraySize];
                @this.m_hAttachEntity[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nAttachIndex")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_AttachmentHandle_t(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_nAttachIndex.Length == 0) @this.m_nAttachIndex = new AttachmentHandle_t[fixedArraySize];
                @this.m_nAttachIndex[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fWidth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fEndWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fEndWidth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fFadeLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fFadeLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fHaloScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fHaloScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fAmplitude")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fAmplitude = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fStartFrame")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fStartFrame = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFrame")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFrame = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nClipStyle")
        {
            var decoder = FieldDecode.CreateDecoder_enum<BeamClipStyle_t>(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nClipStyle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bTurnedOff")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bTurnedOff = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecEndPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CBeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecEndPos = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBodyComponent : CEntityComponent
{
    internal static SendNodeDecoder<CBodyComponent> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CBodyComponent> factory)
    {
        if (serializerKey.Name == "CBodyComponent")
        {
            factory = () => new CBodyComponent();
            return decoderSet.GetDecoder<CBodyComponent>(serializerKey);
        }
        else if (serializerKey.Name == "CBodyComponentPoint")
        {
            factory = () => new CBodyComponentPoint();
            var childClassDecoder = decoderSet.GetDecoder<CBodyComponentPoint>(serializerKey);
            return (CBodyComponent instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CBodyComponentPoint)instance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CBodyComponentSkeletonInstance")
        {
            factory = () => new CBodyComponentSkeletonInstance();
            var childClassDecoder = decoderSet.GetDecoder<CBodyComponentSkeletonInstance>(serializerKey);
            return (CBodyComponent instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CBodyComponentSkeletonInstance)instance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CBodyComponentBaseAnimGraph")
        {
            factory = () => new CBodyComponentBaseAnimGraph();
            var childClassDecoder = decoderSet.GetDecoder<CBodyComponentBaseAnimGraph>(serializerKey);
            return (CBodyComponent instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CBodyComponentBaseAnimGraph)instance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CBodyComponentBaseModelEntity")
        {
            factory = () => new CBodyComponentBaseModelEntity();
            var childClassDecoder = decoderSet.GetDecoder<CBodyComponentBaseModelEntity>(serializerKey);
            return (CBodyComponent instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CBodyComponentBaseModelEntity)instance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CBodyComponent: {serializerKey}");
    }

    internal new static SendNodeDecoder<CBodyComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBodyComponentBaseAnimGraph : CBodyComponentSkeletonInstance
{
    public CBaseAnimGraphController m_animationController { get; private set; } = new();

    internal new static SendNodeDecoder<CBodyComponentBaseAnimGraph> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_animationController")
        {
            var innerDecoder = CBaseAnimGraphController.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBodyComponentBaseAnimGraph @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_animationController, path, ref buffer);
            };
        }
        return CBodyComponentSkeletonInstance.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBodyComponentBaseModelEntity : CBodyComponentSkeletonInstance
{
    internal new static SendNodeDecoder<CBodyComponentBaseModelEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBodyComponentSkeletonInstance.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBodyComponentPoint : CBodyComponent
{
    public CGameSceneNode m_sceneNode { get; private set; } = new();

    internal new static SendNodeDecoder<CBodyComponentPoint> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_sceneNode")
        {
            var innerDecoder = CGameSceneNode.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBodyComponentPoint @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_sceneNode, path, ref buffer);
            };
        }
        return CBodyComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBodyComponentSkeletonInstance : CBodyComponent
{
    public CSkeletonInstance m_skeletonInstance { get; private set; } = new();

    internal new static SendNodeDecoder<CBodyComponentSkeletonInstance> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_skeletonInstance")
        {
            var innerDecoder = CSkeletonInstance.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CBodyComponentSkeletonInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_skeletonInstance, path, ref buffer);
            };
        }
        return CBodyComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBombTarget : CBaseTrigger
{
    internal CBombTarget(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bBombPlantedHere { get; private set; }

    internal new static SendNodeDecoder<CBombTarget> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bBombPlantedHere")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBombTarget @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bBombPlantedHere = decoder(ref buffer);
            };
        }
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBreachCharge : CCSWeaponBase
{
    internal CBreachCharge(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CBreachCharge> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBreachChargeProjectile : CBaseGrenade
{
    internal CBreachChargeProjectile(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CBreachChargeProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseGrenade.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBreakable : CBaseModelEntity
{
    internal CBreakable(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CBreakable> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBreakableProp : CBaseProp
{
    internal CBreakableProp(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_noGhostCollision { get; private set; }

    internal new static SendNodeDecoder<CBreakableProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_noGhostCollision")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CBreakableProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_noGhostCollision = decoder(ref buffer);
            };
        }
        return CBaseProp.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBumpMine : CCSWeaponBase
{
    internal CBumpMine(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CBumpMine> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CBumpMineProjectile : CBaseGrenade
{
    internal CBumpMineProjectile(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CBumpMineProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseGrenade.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CC4 : CCSWeaponBase
{
    internal CC4(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bStartedArming { get; private set; }

    public GameTime_t m_fArmedTime { get; private set; } = new();

    public bool m_bBombPlacedAnimation { get; private set; }

    public bool m_bIsPlantingViaUse { get; private set; }

    public EntitySpottedState_t m_entitySpottedState { get; private set; } = new();

    internal new static SendNodeDecoder<CC4> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bStartedArming")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bStartedArming = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fArmedTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fArmedTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bBombPlacedAnimation")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bBombPlacedAnimation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsPlantingViaUse")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsPlantingViaUse = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_entitySpottedState")
        {
            var innerDecoder = EntitySpottedState_t.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_entitySpottedState, path, ref buffer);
            };
        }
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CChicken : CDynamicProp
{
    internal CChicken(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CAttributeContainer m_AttributeManager { get; private set; } = new();

    public UInt32 m_OriginalOwnerXuidLow { get; private set; }

    public UInt32 m_OriginalOwnerXuidHigh { get; private set; }

    public bool m_jumpedThisFrame { get; private set; }

    public CHandle<CCSPlayerPawn> m_leader { get; private set; }

    internal new static SendNodeDecoder<CChicken> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_AttributeManager")
        {
            var innerDecoder = CAttributeContainer.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CChicken @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_AttributeManager, path, ref buffer);
            };
        }
        if (field.VarName == "m_OriginalOwnerXuidLow")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CChicken @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_OriginalOwnerXuidLow = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_OriginalOwnerXuidHigh")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CChicken @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_OriginalOwnerXuidHigh = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_jumpedThisFrame")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CChicken @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_jumpedThisFrame = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_leader")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CChicken @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_leader = decoder(ref buffer);
            };
        }
        return CDynamicProp.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCollisionProperty
{
    // MNetworkChangeCallback "CollisionAttributeChanged"
    public VPhysicsCollisionAttribute_t m_collisionAttribute { get; private set; } = new();

    // MNetworkChangeCallback "OnUpdateOBB"
    public Vector m_vecMins { get; private set; }

    // MNetworkChangeCallback "OnUpdateOBB"
    public Vector m_vecMaxs { get; private set; }

    // MNetworkChangeCallback "OnUpdateSolidFlags"
    public byte m_usSolidFlags { get; private set; }

    // MNetworkChangeCallback "OnUpdateSolidType"
    public SolidType_t m_nSolidType { get; private set; }

    // MNetworkChangeCallback "MarkSurroundingBoundsDirty"
    public byte m_triggerBloat { get; private set; }

    // MNetworkChangeCallback "MarkSurroundingBoundsDirty"
    public SurroundingBoundsType_t m_nSurroundType { get; private set; }

    public byte m_CollisionGroup { get; private set; }

    // MNetworkChangeCallback "OnUpdateEnablePhysics"
    public byte m_nEnablePhysics { get; private set; }

    // MNetworkChangeCallback "MarkSurroundingBoundsDirty"
    public Vector m_vecSpecifiedSurroundingMins { get; private set; }

    // MNetworkChangeCallback "MarkSurroundingBoundsDirty"
    public Vector m_vecSpecifiedSurroundingMaxs { get; private set; }

    public Vector m_vCapsuleCenter1 { get; private set; }

    public Vector m_vCapsuleCenter2 { get; private set; }

    public float m_flCapsuleRadius { get; private set; }

    internal static SendNodeDecoder<CCollisionProperty> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_collisionAttribute")
        {
            var innerDecoder = VPhysicsCollisionAttribute_t.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_collisionAttribute, path, ref buffer);
            };
        }
        if (field.VarName == "m_vecMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_usSolidFlags")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_usSolidFlags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSolidType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<SolidType_t>(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nSolidType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_triggerBloat")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_triggerBloat = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSurroundType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<SurroundingBoundsType_t>(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nSurroundType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_CollisionGroup")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_CollisionGroup = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEnablePhysics")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nEnablePhysics = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecSpecifiedSurroundingMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecSpecifiedSurroundingMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecSpecifiedSurroundingMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecSpecifiedSurroundingMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vCapsuleCenter1")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vCapsuleCenter1 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vCapsuleCenter2")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vCapsuleCenter2 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCapsuleRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCollisionProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flCapsuleRadius = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CColorCorrection : CBaseEntity
{
    internal CColorCorrection(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float m_flFadeInDuration { get; private set; }

    public float m_flFadeOutDuration { get; private set; }

    public float m_flMaxWeight { get; private set; }

    public bool m_bEnabled { get; private set; }

    public bool m_bMaster { get; private set; }

    public bool m_bClientSide { get; private set; }

    public bool m_bExclusive { get; private set; }

    public float m_MinFalloff { get; private set; }

    public float m_MaxFalloff { get; private set; }

    public float m_flCurWeight { get; private set; }

    public string m_netlookupFilename { get; private set; } = "";

    internal new static SendNodeDecoder<CColorCorrection> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flFadeInDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeInDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeOutDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeOutDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMaxWeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flMaxWeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMaster")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bMaster = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bClientSide")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bClientSide = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bExclusive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bExclusive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MinFalloff")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_MinFalloff = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MaxFalloff")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_MaxFalloff = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCurWeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flCurWeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_netlookupFilename")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CColorCorrection @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_netlookupFilename = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CColorCorrectionVolume : CBaseTrigger
{
    internal CColorCorrectionVolume(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bEnabled { get; private set; }

    public float m_MaxWeight { get; private set; }

    public float m_FadeDuration { get; private set; }

    public float m_Weight { get; private set; }

    public string m_lookupFilename { get; private set; } = "";

    internal new static SendNodeDecoder<CColorCorrectionVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CColorCorrectionVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MaxWeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrectionVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_MaxWeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_FadeDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrectionVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_FadeDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Weight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CColorCorrectionVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_Weight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_lookupFilename")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CColorCorrectionVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_lookupFilename = decoder(ref buffer);
            };
        }
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGameModeRules
{
    internal static SendNodeDecoder<CCSGameModeRules> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSGameModeRules> factory)
    {
        if (serializerKey.Name == "CCSGameModeRules")
        {
            factory = () => new CCSGameModeRules();
            return decoderSet.GetDecoder<CCSGameModeRules>(serializerKey);
        }
        else if (serializerKey.Name == "CCSGameModeRules_Deathmatch")
        {
            factory = () => new CCSGameModeRules_Deathmatch();
            var childClassDecoder = decoderSet.GetDecoder<CCSGameModeRules_Deathmatch>(serializerKey);
            return (CCSGameModeRules instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CCSGameModeRules_Deathmatch)instance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CCSGameModeRules_Noop")
        {
            factory = () => new CCSGameModeRules_Noop();
            var childClassDecoder = decoderSet.GetDecoder<CCSGameModeRules_Noop>(serializerKey);
            return (CCSGameModeRules instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CCSGameModeRules_Noop)instance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CCSGameModeRules_Scripted")
        {
            factory = () => new CCSGameModeRules_Scripted();
            var childClassDecoder = decoderSet.GetDecoder<CCSGameModeRules_Scripted>(serializerKey);
            return (CCSGameModeRules instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CCSGameModeRules_Scripted)instance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CCSGameModeRules: {serializerKey}");
    }

    internal static SendNodeDecoder<CCSGameModeRules> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CCSGameModeRules_Deathmatch : CCSGameModeRules
{
    public GameTime_t m_flDMBonusStartTime { get; private set; } = new();

    public float m_flDMBonusTimeLength { get; private set; }

    public Int16 m_nDMBonusWeaponLoadoutSlot { get; private set; }

    internal new static SendNodeDecoder<CCSGameModeRules_Deathmatch> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flDMBonusStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSGameModeRules_Deathmatch @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDMBonusStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDMBonusTimeLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSGameModeRules_Deathmatch @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDMBonusTimeLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDMBonusWeaponLoadoutSlot")
        {
            var decoder = FieldDecode.CreateDecoder_Int16(field.FieldEncodingInfo);
            return (CCSGameModeRules_Deathmatch @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nDMBonusWeaponLoadoutSlot = decoder(ref buffer);
            };
        }
        return CCSGameModeRules.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGameModeRules_Noop : CCSGameModeRules
{
    internal new static SendNodeDecoder<CCSGameModeRules_Noop> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGameModeRules.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGameModeRules_Scripted : CCSGameModeRules
{
    internal new static SendNodeDecoder<CCSGameModeRules_Scripted> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGameModeRules.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGameRules : CTeamplayRules
{
    internal static SendNodeDecoder<CCSGameRules> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSGameRules> factory)
    {
        if (serializerKey.Name == "CCSGameRules")
        {
            factory = () => new CCSGameRules();
            return decoderSet.GetDecoder<CCSGameRules>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSGameRules: {serializerKey}");
    }

    public bool m_bFreezePeriod { get; private set; }

    public bool m_bWarmupPeriod { get; private set; }

    public GameTime_t m_fWarmupPeriodEnd { get; private set; } = new();

    public GameTime_t m_fWarmupPeriodStart { get; private set; } = new();

    public Int32 m_nTotalPausedTicks { get; private set; }

    public Int32 m_nPauseStartTick { get; private set; }

    public bool m_bServerPaused { get; private set; }

    public bool m_bGamePaused { get; private set; }

    public bool m_bTerroristTimeOutActive { get; private set; }

    public bool m_bCTTimeOutActive { get; private set; }

    public float m_flTerroristTimeOutRemaining { get; private set; }

    public float m_flCTTimeOutRemaining { get; private set; }

    public Int32 m_nTerroristTimeOuts { get; private set; }

    public Int32 m_nCTTimeOuts { get; private set; }

    public bool m_bTechnicalTimeOut { get; private set; }

    public bool m_bMatchWaitingForResume { get; private set; }

    public Int32 m_iRoundTime { get; private set; }

    public float m_fMatchStartTime { get; private set; }

    public GameTime_t m_fRoundStartTime { get; private set; } = new();

    public GameTime_t m_flRestartRoundTime { get; private set; } = new();

    public bool m_bGameRestart { get; private set; }

    public float m_flGameStartTime { get; private set; }

    public float m_timeUntilNextPhaseStarts { get; private set; }

    // MNetworkChangeCallback "OnGamePhaseChanged"
    public Int32 m_gamePhase { get; private set; }

    public Int32 m_totalRoundsPlayed { get; private set; }

    public Int32 m_nRoundsPlayedThisPhase { get; private set; }

    public Int32 m_nOvertimePlaying { get; private set; }

    public Int32 m_iHostagesRemaining { get; private set; }

    public bool m_bAnyHostageReached { get; private set; }

    public bool m_bMapHasBombTarget { get; private set; }

    public bool m_bMapHasRescueZone { get; private set; }

    public bool m_bMapHasBuyZone { get; private set; }

    public bool m_bIsQueuedMatchmaking { get; private set; }

    public Int32 m_nQueuedMatchmakingMode { get; private set; }

    public bool m_bIsValveDS { get; private set; }

    public bool m_bLogoMap { get; private set; }

    public bool m_bPlayAllStepSoundsOnServer { get; private set; }

    public Int32 m_iSpectatorSlotCount { get; private set; }

    public Int32 m_MatchDevice { get; private set; }

    public bool m_bHasMatchStarted { get; private set; }

    public Int32 m_nNextMapInMapgroup { get; private set; }

    public string m_szTournamentEventName { get; private set; } = "";

    public string m_szTournamentEventStage { get; private set; } = "";

    public string m_szMatchStatTxt { get; private set; } = "";

    public string m_szTournamentPredictionsTxt { get; private set; } = "";

    public Int32 m_nTournamentPredictionsPct { get; private set; }

    public GameTime_t m_flCMMItemDropRevealStartTime { get; private set; } = new();

    public GameTime_t m_flCMMItemDropRevealEndTime { get; private set; } = new();

    public bool m_bIsDroppingItems { get; private set; }

    public bool m_bIsQuestEligible { get; private set; }

    public Int32 m_nGuardianModeWaveNumber { get; private set; }

    public Int32 m_nGuardianModeSpecialKillsRemaining { get; private set; }

    public Int32 m_nGuardianModeSpecialWeaponNeeded { get; private set; }

    public UInt32 m_numGlobalGiftsGiven { get; private set; }

    public UInt32 m_numGlobalGifters { get; private set; }

    public UInt32 m_numGlobalGiftsPeriodSeconds { get; private set; }

    public UInt32[] m_arrFeaturedGiftersAccounts { get; private set; } = Array.Empty<UInt32>();

    public UInt32[] m_arrFeaturedGiftersGifts { get; private set; } = Array.Empty<UInt32>();

    public UInt16[] m_arrProhibitedItemIndices { get; private set; } = Array.Empty<UInt16>();

    public UInt32[] m_arrTournamentActiveCasterAccounts { get; private set; } = Array.Empty<UInt32>();

    public Int32 m_numBestOfMaps { get; private set; }

    public Int32 m_nHalloweenMaskListSeed { get; private set; }

    public bool m_bBombDropped { get; private set; }

    public bool m_bBombPlanted { get; private set; }

    public Int32 m_iRoundWinStatus { get; private set; }

    public Int32 m_eRoundWinReason { get; private set; }

    public bool m_bTCantBuy { get; private set; }

    public bool m_bCTCantBuy { get; private set; }

    public GameTime_t m_flGuardianBuyUntilTime { get; private set; } = new();

    public Int32[] m_iMatchStats_RoundResults { get; private set; } = Array.Empty<Int32>();

    public Int32[] m_iMatchStats_PlayersAlive_CT { get; private set; } = Array.Empty<Int32>();

    public Int32[] m_iMatchStats_PlayersAlive_T { get; private set; } = Array.Empty<Int32>();

    public float[] m_TeamRespawnWaveTimes { get; private set; } = Array.Empty<float>();

    public GameTime_t[] m_flNextRespawnWave { get; private set; } = Array.Empty<GameTime_t>();

    public Int32 m_nServerQuestID { get; private set; }

    public Vector m_vMinimapMins { get; private set; }

    public Vector m_vMinimapMaxs { get; private set; }

    public float[] m_MinimapVerticalSectionHeights { get; private set; } = Array.Empty<float>();

    public Int32[] m_nEndMatchMapGroupVoteTypes { get; private set; } = Array.Empty<Int32>();

    public Int32[] m_nEndMatchMapGroupVoteOptions { get; private set; } = Array.Empty<Int32>();

    public Int32 m_nEndMatchMapVoteWinner { get; private set; }

    public Int32 m_iNumConsecutiveCTLoses { get; private set; }

    public Int32 m_iNumConsecutiveTerroristLoses { get; private set; }

    public bool m_bMatchAbortedDueToPlayerBan { get; private set; }

    // MNetworkPolymorphic
    public CCSGameModeRules? m_pGameModeRules { get; private set; }

    public CRetakeGameRules m_RetakeRules { get; private set; } = new();

    // MNetworkChangeCallback "OnMatchEndCountChanged"
    public byte m_nMatchEndCount { get; private set; }

    public Int32 m_nTTeamIntroVariant { get; private set; }

    public Int32 m_nCTTeamIntroVariant { get; private set; }

    // MNetworkChangeCallback "OnTeamIntroPeriodChanged"
    public bool m_bTeamIntroPeriod { get; private set; }

    internal new static SendNodeDecoder<CCSGameRules> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bFreezePeriod")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bFreezePeriod = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bWarmupPeriod")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bWarmupPeriod = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fWarmupPeriodEnd")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fWarmupPeriodEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fWarmupPeriodStart")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fWarmupPeriodStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTotalPausedTicks")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nTotalPausedTicks = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPauseStartTick")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nPauseStartTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bServerPaused")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bServerPaused = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bGamePaused")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bGamePaused = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bTerroristTimeOutActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bTerroristTimeOutActive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCTTimeOutActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bCTTimeOutActive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTerroristTimeOutRemaining")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flTerroristTimeOutRemaining = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCTTimeOutRemaining")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flCTTimeOutRemaining = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTerroristTimeOuts")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nTerroristTimeOuts = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCTTimeOuts")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nCTTimeOuts = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bTechnicalTimeOut")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bTechnicalTimeOut = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMatchWaitingForResume")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bMatchWaitingForResume = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRoundTime")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iRoundTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fMatchStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fMatchStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fRoundStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fRoundStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRestartRoundTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flRestartRoundTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bGameRestart")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bGameRestart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGameStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flGameStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_timeUntilNextPhaseStarts")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_timeUntilNextPhaseStarts = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_gamePhase")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_gamePhase = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_totalRoundsPlayed")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_totalRoundsPlayed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRoundsPlayedThisPhase")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nRoundsPlayedThisPhase = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nOvertimePlaying")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nOvertimePlaying = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iHostagesRemaining")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iHostagesRemaining = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAnyHostageReached")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bAnyHostageReached = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMapHasBombTarget")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bMapHasBombTarget = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMapHasRescueZone")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bMapHasRescueZone = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMapHasBuyZone")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bMapHasBuyZone = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsQueuedMatchmaking")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsQueuedMatchmaking = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nQueuedMatchmakingMode")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nQueuedMatchmakingMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsValveDS")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsValveDS = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bLogoMap")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bLogoMap = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPlayAllStepSoundsOnServer")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bPlayAllStepSoundsOnServer = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iSpectatorSlotCount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iSpectatorSlotCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MatchDevice")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_MatchDevice = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasMatchStarted")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bHasMatchStarted = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nNextMapInMapgroup")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nNextMapInMapgroup = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szTournamentEventName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szTournamentEventName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szTournamentEventStage")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szTournamentEventStage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szMatchStatTxt")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szMatchStatTxt = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szTournamentPredictionsTxt")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szTournamentPredictionsTxt = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTournamentPredictionsPct")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nTournamentPredictionsPct = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCMMItemDropRevealStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flCMMItemDropRevealStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCMMItemDropRevealEndTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flCMMItemDropRevealEndTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsDroppingItems")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsDroppingItems = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsQuestEligible")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsQuestEligible = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nGuardianModeWaveNumber")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nGuardianModeWaveNumber = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nGuardianModeSpecialKillsRemaining")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nGuardianModeSpecialKillsRemaining = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nGuardianModeSpecialWeaponNeeded")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nGuardianModeSpecialWeaponNeeded = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_numGlobalGiftsGiven")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_numGlobalGiftsGiven = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_numGlobalGifters")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_numGlobalGifters = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_numGlobalGiftsPeriodSeconds")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_numGlobalGiftsPeriodSeconds = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_arrFeaturedGiftersAccounts")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_arrFeaturedGiftersAccounts.Length == 0) @this.m_arrFeaturedGiftersAccounts = new UInt32[fixedArraySize];
                @this.m_arrFeaturedGiftersAccounts[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_arrFeaturedGiftersGifts")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_arrFeaturedGiftersGifts.Length == 0) @this.m_arrFeaturedGiftersGifts = new UInt32[fixedArraySize];
                @this.m_arrFeaturedGiftersGifts[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_arrProhibitedItemIndices")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_arrProhibitedItemIndices.Length == 0) @this.m_arrProhibitedItemIndices = new UInt16[fixedArraySize];
                @this.m_arrProhibitedItemIndices[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_arrTournamentActiveCasterAccounts")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_arrTournamentActiveCasterAccounts.Length == 0) @this.m_arrTournamentActiveCasterAccounts = new UInt32[fixedArraySize];
                @this.m_arrTournamentActiveCasterAccounts[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_numBestOfMaps")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_numBestOfMaps = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHalloweenMaskListSeed")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nHalloweenMaskListSeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bBombDropped")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bBombDropped = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bBombPlanted")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bBombPlanted = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRoundWinStatus")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iRoundWinStatus = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_eRoundWinReason")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_eRoundWinReason = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bTCantBuy")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bTCantBuy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCTCantBuy")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bCTCantBuy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGuardianBuyUntilTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flGuardianBuyUntilTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMatchStats_RoundResults")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_iMatchStats_RoundResults.Length == 0) @this.m_iMatchStats_RoundResults = new Int32[fixedArraySize];
                @this.m_iMatchStats_RoundResults[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMatchStats_PlayersAlive_CT")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_iMatchStats_PlayersAlive_CT.Length == 0) @this.m_iMatchStats_PlayersAlive_CT = new Int32[fixedArraySize];
                @this.m_iMatchStats_PlayersAlive_CT[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMatchStats_PlayersAlive_T")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_iMatchStats_PlayersAlive_T.Length == 0) @this.m_iMatchStats_PlayersAlive_T = new Int32[fixedArraySize];
                @this.m_iMatchStats_PlayersAlive_T[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_TeamRespawnWaveTimes")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_TeamRespawnWaveTimes.Length == 0) @this.m_TeamRespawnWaveTimes = new float[fixedArraySize];
                @this.m_TeamRespawnWaveTimes[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextRespawnWave")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_flNextRespawnWave.Length == 0) @this.m_flNextRespawnWave = new GameTime_t[fixedArraySize];
                @this.m_flNextRespawnWave[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nServerQuestID")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nServerQuestID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vMinimapMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vMinimapMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vMinimapMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vMinimapMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MinimapVerticalSectionHeights")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_MinimapVerticalSectionHeights.Length == 0) @this.m_MinimapVerticalSectionHeights = new float[fixedArraySize];
                @this.m_MinimapVerticalSectionHeights[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEndMatchMapGroupVoteTypes")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_nEndMatchMapGroupVoteTypes.Length == 0) @this.m_nEndMatchMapGroupVoteTypes = new Int32[fixedArraySize];
                @this.m_nEndMatchMapGroupVoteTypes[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEndMatchMapGroupVoteOptions")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_nEndMatchMapGroupVoteOptions.Length == 0) @this.m_nEndMatchMapGroupVoteOptions = new Int32[fixedArraySize];
                @this.m_nEndMatchMapGroupVoteOptions[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEndMatchMapVoteWinner")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nEndMatchMapVoteWinner = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iNumConsecutiveCTLoses")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iNumConsecutiveCTLoses = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iNumConsecutiveTerroristLoses")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iNumConsecutiveTerroristLoses = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMatchAbortedDueToPlayerBan")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bMatchAbortedDueToPlayerBan = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_pGameModeRules")
        {
            SendNodeDecoder<CCSGameModeRules>? innerDecoder = null;
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var childClassId = buffer.ReadUBits(7);
                    if (childClassId == 0)
                    {
                        innerDecoder = null;
                        @this.m_pGameModeRules = null;
                    }
                    if (!CCSGameModeRules.TryCreateDowncastDecoderById(decoderSet, childClassId, out innerDecoder))
                    {
                        throw new Exception($"Unknown polymorphic child class of CCSGameModeRules: {childClassId}");
                    }
                }
                else
                {
                    Debug.Assert(innerDecoder != null);
                    Debug.Assert(@this.m_pGameModeRules != null);
                    var inner = @this.m_pGameModeRules!;
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_RetakeRules")
        {
            var innerDecoder = CRetakeGameRules.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_RetakeRules, path, ref buffer);
            };
        }
        if (field.VarName == "m_nMatchEndCount")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nMatchEndCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTTeamIntroVariant")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nTTeamIntroVariant = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCTTeamIntroVariant")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nCTTeamIntroVariant = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bTeamIntroPeriod")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bTeamIntroPeriod = decoder(ref buffer);
            };
        }
        return CTeamplayRules.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGameRulesProxy : CGameRulesProxy
{
    internal CCSGameRulesProxy(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkTypeAlias "CCSGameRules*"
    // MNetworkPriority "32"
    public CCSGameRules? m_pGameRules { get; private set; }

    internal new static SendNodeDecoder<CCSGameRulesProxy> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_pGameRules")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSGameRules.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSGameRulesProxy @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pGameRules = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pGameRules ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        return CGameRulesProxy.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGO_TeamIntroCharacterPosition : CCSGO_TeamPreviewCharacterPosition
{
    internal CCSGO_TeamIntroCharacterPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSGO_TeamIntroCharacterPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGO_TeamPreviewCharacterPosition.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGO_TeamIntroCounterTerroristPosition : CCSGO_TeamIntroCharacterPosition
{
    internal CCSGO_TeamIntroCounterTerroristPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSGO_TeamIntroCounterTerroristPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGO_TeamIntroCharacterPosition.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGO_TeamIntroTerroristPosition : CCSGO_TeamIntroCharacterPosition
{
    internal CCSGO_TeamIntroTerroristPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSGO_TeamIntroTerroristPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGO_TeamIntroCharacterPosition.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGO_TeamPreviewCharacterPosition : CBaseEntity
{
    internal CCSGO_TeamPreviewCharacterPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 m_nVariant { get; private set; }

    public Int32 m_nRandom { get; private set; }

    public Int32 m_nOrdinal { get; private set; }

    public NetworkedString m_sWeaponName { get; private set; }

    public UInt64 m_xuid { get; private set; }

    public CEconItemView m_weaponItem { get; private set; } = new();

    internal new static SendNodeDecoder<CCSGO_TeamPreviewCharacterPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nVariant")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGO_TeamPreviewCharacterPosition @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nVariant = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRandom")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGO_TeamPreviewCharacterPosition @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nRandom = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nOrdinal")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSGO_TeamPreviewCharacterPosition @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nOrdinal = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_sWeaponName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CCSGO_TeamPreviewCharacterPosition @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_sWeaponName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_xuid")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CCSGO_TeamPreviewCharacterPosition @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_xuid = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_weaponItem")
        {
            var innerDecoder = CEconItemView.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCSGO_TeamPreviewCharacterPosition @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_weaponItem, path, ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGO_TeamSelectCharacterPosition : CCSGO_TeamPreviewCharacterPosition
{
    internal CCSGO_TeamSelectCharacterPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSGO_TeamSelectCharacterPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGO_TeamPreviewCharacterPosition.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGO_TeamSelectCounterTerroristPosition : CCSGO_TeamSelectCharacterPosition
{
    internal CCSGO_TeamSelectCounterTerroristPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSGO_TeamSelectCounterTerroristPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGO_TeamSelectCharacterPosition.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGO_TeamSelectTerroristPosition : CCSGO_TeamSelectCharacterPosition
{
    internal CCSGO_TeamSelectTerroristPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSGO_TeamSelectTerroristPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGO_TeamSelectCharacterPosition.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGO_WingmanIntroCharacterPosition : CCSGO_TeamIntroCharacterPosition
{
    internal CCSGO_WingmanIntroCharacterPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSGO_WingmanIntroCharacterPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGO_TeamIntroCharacterPosition.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGO_WingmanIntroCounterTerroristPosition : CCSGO_WingmanIntroCharacterPosition
{
    internal CCSGO_WingmanIntroCounterTerroristPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSGO_WingmanIntroCounterTerroristPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGO_WingmanIntroCharacterPosition.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGO_WingmanIntroTerroristPosition : CCSGO_WingmanIntroCharacterPosition
{
    internal CCSGO_WingmanIntroTerroristPosition(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSGO_WingmanIntroTerroristPosition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSGO_WingmanIntroCharacterPosition.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSGOViewModel : CPredictedViewModel
{
    internal CCSGOViewModel(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bShouldIgnoreOffsetAndAccuracy { get; private set; }

    public UInt32 m_nWeaponParity { get; private set; }

    internal new static SendNodeDecoder<CCSGOViewModel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bShouldIgnoreOffsetAndAccuracy")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSGOViewModel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bShouldIgnoreOffsetAndAccuracy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nWeaponParity")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSGOViewModel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nWeaponParity = decoder(ref buffer);
            };
        }
        return CPredictedViewModel.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSMinimapBoundary : CBaseEntity
{
    internal CCSMinimapBoundary(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSMinimapBoundary> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSObserver_CameraServices : CCSPlayerBase_CameraServices
{
    internal new static SendNodeDecoder<CCSObserver_CameraServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSPlayerBase_CameraServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSObserver_MovementServices : CPlayer_MovementServices
{
    internal new static SendNodeDecoder<CCSObserver_MovementServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayer_MovementServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSObserver_ObserverServices : CPlayer_ObserverServices
{
    internal new static SendNodeDecoder<CCSObserver_ObserverServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayer_ObserverServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSObserver_UseServices : CPlayer_UseServices
{
    internal new static SendNodeDecoder<CCSObserver_UseServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayer_UseServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSObserver_ViewModelServices : CPlayer_ViewModelServices
{
    internal new static SendNodeDecoder<CCSObserver_ViewModelServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayer_ViewModelServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSObserverPawn : CCSPlayerPawnBase
{
    internal CCSObserverPawn(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CCSObserverPawn> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSPlayerPawnBase.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_ActionTrackingServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CCSPlayer_ActionTrackingServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSPlayer_ActionTrackingServices> factory)
    {
        if (serializerKey.Name == "CCSPlayer_ActionTrackingServices")
        {
            factory = () => new CCSPlayer_ActionTrackingServices();
            return decoderSet.GetDecoder<CCSPlayer_ActionTrackingServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSPlayer_ActionTrackingServices: {serializerKey}");
    }

    public bool m_bIsRescuing { get; private set; }

    public WeaponPurchaseTracker_t m_weaponPurchasesThisMatch { get; private set; } = new();

    public WeaponPurchaseTracker_t m_weaponPurchasesThisRound { get; private set; } = new();

    internal new static SendNodeDecoder<CCSPlayer_ActionTrackingServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bIsRescuing")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayer_ActionTrackingServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsRescuing = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_weaponPurchasesThisMatch")
        {
            var innerDecoder = WeaponPurchaseTracker_t.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCSPlayer_ActionTrackingServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_weaponPurchasesThisMatch, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_weaponPurchasesThisRound")
        {
            var innerDecoder = WeaponPurchaseTracker_t.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCSPlayer_ActionTrackingServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_weaponPurchasesThisRound, path, ref buffer);
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_BulletServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CCSPlayer_BulletServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSPlayer_BulletServices> factory)
    {
        if (serializerKey.Name == "CCSPlayer_BulletServices")
        {
            factory = () => new CCSPlayer_BulletServices();
            return decoderSet.GetDecoder<CCSPlayer_BulletServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSPlayer_BulletServices: {serializerKey}");
    }

    public Int32 m_totalHitsOnServer { get; private set; }

    internal new static SendNodeDecoder<CCSPlayer_BulletServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_totalHitsOnServer")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayer_BulletServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_totalHitsOnServer = decoder(ref buffer);
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_BuyServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CCSPlayer_BuyServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSPlayer_BuyServices> factory)
    {
        if (serializerKey.Name == "CCSPlayer_BuyServices")
        {
            factory = () => new CCSPlayer_BuyServices();
            return decoderSet.GetDecoder<CCSPlayer_BuyServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSPlayer_BuyServices: {serializerKey}");
    }

    public NetworkedVector<SellbackPurchaseEntry_t> m_vecSellbackPurchaseEntries { get; private set; } = new NetworkedVector<SellbackPurchaseEntry_t>();

    internal new static SendNodeDecoder<CCSPlayer_BuyServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecSellbackPurchaseEntries")
        {
            var innerDecoder = decoderSet.GetDecoder<SellbackPurchaseEntry_t>(field.FieldSerializerKey!.Value);
            return (CCSPlayer_BuyServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_vecSellbackPurchaseEntries.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.m_vecSellbackPurchaseEntries.EnsureSize(index + 1);
                    var element = @this.m_vecSellbackPurchaseEntries[index] ??= new SellbackPurchaseEntry_t();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_CameraServices : CCSPlayerBase_CameraServices
{
    internal new static SendNodeDecoder<CCSPlayer_CameraServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSPlayerBase_CameraServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_HostageServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CCSPlayer_HostageServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSPlayer_HostageServices> factory)
    {
        if (serializerKey.Name == "CCSPlayer_HostageServices")
        {
            factory = () => new CCSPlayer_HostageServices();
            return decoderSet.GetDecoder<CCSPlayer_HostageServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSPlayer_HostageServices: {serializerKey}");
    }

    public CHandle<CBaseEntity> m_hCarriedHostage { get; private set; }

    public CHandle<CBaseEntity> m_hCarriedHostageProp { get; private set; }

    internal new static SendNodeDecoder<CCSPlayer_HostageServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hCarriedHostage")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CCSPlayer_HostageServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hCarriedHostage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hCarriedHostageProp")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CCSPlayer_HostageServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hCarriedHostageProp = decoder(ref buffer);
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_ItemServices : CPlayer_ItemServices
{
    public bool m_bHasDefuser { get; private set; }

    public bool m_bHasHelmet { get; private set; }

    public bool m_bHasHeavyArmor { get; private set; }

    internal new static SendNodeDecoder<CCSPlayer_ItemServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bHasDefuser")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayer_ItemServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bHasDefuser = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasHelmet")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayer_ItemServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bHasHelmet = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasHeavyArmor")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayer_ItemServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bHasHeavyArmor = decoder(ref buffer);
            };
        }
        return CPlayer_ItemServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_MovementServices : CPlayer_MovementServices_Humanoid
{
    public float m_flMaxFallVelocity { get; private set; }

    // MNetworkEncoder "normal"
    public Vector m_vecLadderNormal { get; private set; }

    public Int32 m_nLadderSurfacePropIndex { get; private set; }

    public float m_flDuckAmount { get; private set; }

    public float m_flDuckSpeed { get; private set; }

    public bool m_bDuckOverride { get; private set; }

    public bool m_bDesiresDuck { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    // MNetworkPriority "32"
    public UInt32 m_nDuckTimeMsecs { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public UInt32 m_nDuckJumpTimeMsecs { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public UInt32 m_nJumpTimeMsecs { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public float m_flLastDuckTime { get; private set; }

    public bool m_bOldJumpPressed { get; private set; }

    public float m_flJumpUntil { get; private set; }

    public float m_flJumpVel { get; private set; }

    public GameTime_t m_fStashGrenadeParameterWhen { get; private set; } = new();

    public UInt64 m_nButtonDownMaskPrev { get; private set; }

    public float m_flOffsetTickCompleteTime { get; private set; }

    public float m_flOffsetTickStashedSpeed { get; private set; }

    public float m_flStamina { get; private set; }

    internal new static SendNodeDecoder<CCSPlayer_MovementServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flMaxFallVelocity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flMaxFallVelocity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecLadderNormal")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecLadderNormal = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLadderSurfacePropIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nLadderSurfacePropIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDuckAmount")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDuckAmount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDuckSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDuckSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDuckOverride")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bDuckOverride = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDesiresDuck")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bDesiresDuck = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDuckTimeMsecs")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nDuckTimeMsecs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDuckJumpTimeMsecs")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nDuckJumpTimeMsecs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nJumpTimeMsecs")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nJumpTimeMsecs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLastDuckTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flLastDuckTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bOldJumpPressed")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bOldJumpPressed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flJumpUntil")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flJumpUntil = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flJumpVel")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flJumpVel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fStashGrenadeParameterWhen")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fStashGrenadeParameterWhen = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nButtonDownMaskPrev")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nButtonDownMaskPrev = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flOffsetTickCompleteTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flOffsetTickCompleteTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flOffsetTickStashedSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flOffsetTickStashedSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStamina")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flStamina = decoder(ref buffer);
            };
        }
        return CPlayer_MovementServices_Humanoid.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_PingServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CCSPlayer_PingServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSPlayer_PingServices> factory)
    {
        if (serializerKey.Name == "CCSPlayer_PingServices")
        {
            factory = () => new CCSPlayer_PingServices();
            return decoderSet.GetDecoder<CCSPlayer_PingServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSPlayer_PingServices: {serializerKey}");
    }

    public CHandle<CBaseEntity> m_hPlayerPing { get; private set; }

    internal new static SendNodeDecoder<CCSPlayer_PingServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hPlayerPing")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CCSPlayer_PingServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hPlayerPing = decoder(ref buffer);
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_UseServices : CPlayer_UseServices
{
    internal new static SendNodeDecoder<CCSPlayer_UseServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayer_UseServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_ViewModelServices : CPlayer_ViewModelServices
{
    public CHandle<CBaseViewModel>[] m_hViewModel { get; private set; } = Array.Empty<CHandle<CBaseViewModel>>();

    internal new static SendNodeDecoder<CCSPlayer_ViewModelServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hViewModel")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseViewModel>(field.FieldEncodingInfo);
            return (CCSPlayer_ViewModelServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_hViewModel.Length == 0) @this.m_hViewModel = new CHandle<CBaseViewModel>[fixedArraySize];
                @this.m_hViewModel[path[1]] = decoder(ref buffer);
            };
        }
        return CPlayer_ViewModelServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_WaterServices : CPlayer_WaterServices
{
    internal new static SendNodeDecoder<CCSPlayer_WaterServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayer_WaterServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayer_WeaponServices : CPlayer_WeaponServices
{
    // MNetworkUserGroup "LocalPlayerExclusive"
    public GameTime_t m_flNextAttack { get; private set; } = new();

    public bool m_bIsLookingAtWeapon { get; private set; }

    public bool m_bIsHoldingLookAtWeapon { get; private set; }

    internal new static SendNodeDecoder<CCSPlayer_WeaponServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flNextAttack")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSPlayer_WeaponServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flNextAttack = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsLookingAtWeapon")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayer_WeaponServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsLookingAtWeapon = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsHoldingLookAtWeapon")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayer_WeaponServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsHoldingLookAtWeapon = decoder(ref buffer);
            };
        }
        return CPlayer_WeaponServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayerBase_CameraServices : CPlayer_CameraServices
{
    public UInt32 m_iFOV { get; private set; }

    public UInt32 m_iFOVStart { get; private set; }

    public GameTime_t m_flFOVTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public float m_flFOVRate { get; private set; }

    public CHandle<CBaseEntity> m_hZoomOwner { get; private set; }

    internal new static SendNodeDecoder<CCSPlayerBase_CameraServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iFOV")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayerBase_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iFOV = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iFOVStart")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayerBase_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iFOVStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFOVTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSPlayerBase_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFOVTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFOVRate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerBase_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFOVRate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hZoomOwner")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CCSPlayerBase_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hZoomOwner = decoder(ref buffer);
            };
        }
        return CPlayer_CameraServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayerController : CBasePlayerController
{
    internal CCSPlayerController(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CCSPlayerController_InGameMoneyServices? m_pInGameMoneyServices { get; private set; }

    public CCSPlayerController_InventoryServices? m_pInventoryServices { get; private set; }

    public CCSPlayerController_ActionTrackingServices? m_pActionTrackingServices { get; private set; }

    public CCSPlayerController_DamageServices? m_pDamageServices { get; private set; }

    public UInt32 m_iPing { get; private set; }

    public bool m_bHasCommunicationAbuseMute { get; private set; }

    public NetworkedString m_szCrosshairCodes { get; private set; }

    public byte m_iPendingTeamNum { get; private set; }

    public GameTime_t m_flForceTeamTime { get; private set; } = new();

    // MNetworkChangeCallback "OnCompTeammateColorChanged"
    public Int32 m_iCompTeammateColor { get; private set; }

    public bool m_bEverPlayedOnTeam { get; private set; }

    public NetworkedString m_szClan { get; private set; }

    public Int32 m_iCoachingTeam { get; private set; }

    public UInt64 m_nPlayerDominated { get; private set; }

    public UInt64 m_nPlayerDominatingMe { get; private set; }

    public Int32 m_iCompetitiveRanking { get; private set; }

    public Int32 m_iCompetitiveWins { get; private set; }

    public sbyte m_iCompetitiveRankType { get; private set; }

    public Int32 m_iCompetitiveRankingPredicted_Win { get; private set; }

    public Int32 m_iCompetitiveRankingPredicted_Loss { get; private set; }

    public Int32 m_iCompetitiveRankingPredicted_Tie { get; private set; }

    public Int32 m_nEndMatchNextMapVote { get; private set; }

    public UInt16 m_unActiveQuestId { get; private set; }

    public QuestProgressReason m_nQuestProgressReason { get; private set; }

    public UInt32 m_unPlayerTvControlFlags { get; private set; }

    public Int32 m_nDisconnectionTick { get; private set; }

    public bool m_bControllingBot { get; private set; }

    public bool m_bHasControlledBotThisRound { get; private set; }

    public bool m_bCanControlObservedBot { get; private set; }

    public CHandle<CCSPlayerPawn> m_hPlayerPawn { get; private set; }

    public CHandle<CCSObserverPawn> m_hObserverPawn { get; private set; }

    public bool m_bPawnIsAlive { get; private set; }

    public UInt32 m_iPawnHealth { get; private set; }

    public Int32 m_iPawnArmor { get; private set; }

    public bool m_bPawnHasDefuser { get; private set; }

    public bool m_bPawnHasHelmet { get; private set; }

    public UInt16 m_nPawnCharacterDefIndex { get; private set; }

    public Int32 m_iPawnLifetimeStart { get; private set; }

    public Int32 m_iPawnLifetimeEnd { get; private set; }

    public Int32 m_iPawnBotDifficulty { get; private set; }

    public CHandle<CCSPlayerController> m_hOriginalControllerOfCurrentPawn { get; private set; }

    public Int32 m_iScore { get; private set; }

    public NetworkedVector<EKillTypes_t> m_vecKills { get; private set; } = new NetworkedVector<EKillTypes_t>();

    public Int32 m_iMVPs { get; private set; }

    internal new static SendNodeDecoder<CCSPlayerController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_pInGameMoneyServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSPlayerController_InGameMoneyServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pInGameMoneyServices = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pInGameMoneyServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pInventoryServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSPlayerController_InventoryServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pInventoryServices = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pInventoryServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pActionTrackingServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSPlayerController_ActionTrackingServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pActionTrackingServices = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pActionTrackingServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pDamageServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSPlayerController_DamageServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pDamageServices = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pDamageServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_iPing")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iPing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasCommunicationAbuseMute")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bHasCommunicationAbuseMute = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szCrosshairCodes")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szCrosshairCodes = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iPendingTeamNum")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iPendingTeamNum = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flForceTeamTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flForceTeamTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCompTeammateColor")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iCompTeammateColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEverPlayedOnTeam")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bEverPlayedOnTeam = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szClan")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szClan = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCoachingTeam")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iCoachingTeam = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPlayerDominated")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nPlayerDominated = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPlayerDominatingMe")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nPlayerDominatingMe = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCompetitiveRanking")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iCompetitiveRanking = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCompetitiveWins")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iCompetitiveWins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCompetitiveRankType")
        {
            var decoder = FieldDecode.CreateDecoder_sbyte(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iCompetitiveRankType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCompetitiveRankingPredicted_Win")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iCompetitiveRankingPredicted_Win = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCompetitiveRankingPredicted_Loss")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iCompetitiveRankingPredicted_Loss = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCompetitiveRankingPredicted_Tie")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iCompetitiveRankingPredicted_Tie = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEndMatchNextMapVote")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nEndMatchNextMapVote = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unActiveQuestId")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_unActiveQuestId = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nQuestProgressReason")
        {
            var decoder = FieldDecode.CreateDecoder_enum<QuestProgressReason>(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nQuestProgressReason = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unPlayerTvControlFlags")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_unPlayerTvControlFlags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDisconnectionTick")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nDisconnectionTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bControllingBot")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bControllingBot = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasControlledBotThisRound")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bHasControlledBotThisRound = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCanControlObservedBot")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bCanControlObservedBot = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hPlayerPawn")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hPlayerPawn = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hObserverPawn")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSObserverPawn>(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hObserverPawn = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPawnIsAlive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bPawnIsAlive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iPawnHealth")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iPawnHealth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iPawnArmor")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iPawnArmor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPawnHasDefuser")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bPawnHasDefuser = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPawnHasHelmet")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bPawnHasHelmet = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPawnCharacterDefIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nPawnCharacterDefIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iPawnLifetimeStart")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iPawnLifetimeStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iPawnLifetimeEnd")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iPawnLifetimeEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iPawnBotDifficulty")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iPawnBotDifficulty = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hOriginalControllerOfCurrentPawn")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerController>(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hOriginalControllerOfCurrentPawn = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iScore")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iScore = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecKills")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EKillTypes_t>(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_vecKills.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_vecKills.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_vecKills[index] = element;
                }
            };
        }
        if (field.VarName == "m_iMVPs")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iMVPs = decoder(ref buffer);
            };
        }
        return CBasePlayerController.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayerController_ActionTrackingServices : CPlayerControllerComponent
{
    internal static SendNodeDecoder<CCSPlayerController_ActionTrackingServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSPlayerController_ActionTrackingServices> factory)
    {
        if (serializerKey.Name == "CCSPlayerController_ActionTrackingServices")
        {
            factory = () => new CCSPlayerController_ActionTrackingServices();
            return decoderSet.GetDecoder<CCSPlayerController_ActionTrackingServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSPlayerController_ActionTrackingServices: {serializerKey}");
    }

    public NetworkedVector<CSPerRoundStats_t> m_perRoundStats { get; private set; } = new NetworkedVector<CSPerRoundStats_t>();

    public CSMatchStats_t m_matchStats { get; private set; } = new();

    public Int32 m_iNumRoundKills { get; private set; }

    public Int32 m_iNumRoundKillsHeadshots { get; private set; }

    internal new static SendNodeDecoder<CCSPlayerController_ActionTrackingServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_perRoundStats")
        {
            var innerDecoder = decoderSet.GetDecoder<CSPerRoundStats_t>(field.FieldSerializerKey!.Value);
            return (CCSPlayerController_ActionTrackingServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_perRoundStats.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.m_perRoundStats.EnsureSize(index + 1);
                    var element = @this.m_perRoundStats[index] ??= new CSPerRoundStats_t();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_matchStats")
        {
            var innerDecoder = CSMatchStats_t.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCSPlayerController_ActionTrackingServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_matchStats, path, ref buffer);
            };
        }
        if (field.VarName == "m_iNumRoundKills")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_ActionTrackingServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iNumRoundKills = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iNumRoundKillsHeadshots")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_ActionTrackingServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iNumRoundKillsHeadshots = decoder(ref buffer);
            };
        }
        return CPlayerControllerComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayerController_DamageServices : CPlayerControllerComponent
{
    internal static SendNodeDecoder<CCSPlayerController_DamageServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSPlayerController_DamageServices> factory)
    {
        if (serializerKey.Name == "CCSPlayerController_DamageServices")
        {
            factory = () => new CCSPlayerController_DamageServices();
            return decoderSet.GetDecoder<CCSPlayerController_DamageServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSPlayerController_DamageServices: {serializerKey}");
    }

    // MNetworkUserGroup "LocalPlayerExclusiveDuringRoundEnd"
    // MNetworkChangeCallback "OnDamageListUpdate"
    public Int32 m_nSendUpdate { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusiveDuringRoundEnd"
    public NetworkedVector<CDamageRecord> m_DamageList { get; private set; } = new NetworkedVector<CDamageRecord>();

    internal new static SendNodeDecoder<CCSPlayerController_DamageServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nSendUpdate")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_DamageServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nSendUpdate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_DamageList")
        {
            var innerDecoder = decoderSet.GetDecoder<CDamageRecord>(field.FieldSerializerKey!.Value);
            return (CCSPlayerController_DamageServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_DamageList.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.m_DamageList.EnsureSize(index + 1);
                    var element = @this.m_DamageList[index] ??= new CDamageRecord();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        return CPlayerControllerComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayerController_InGameMoneyServices : CPlayerControllerComponent
{
    internal static SendNodeDecoder<CCSPlayerController_InGameMoneyServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSPlayerController_InGameMoneyServices> factory)
    {
        if (serializerKey.Name == "CCSPlayerController_InGameMoneyServices")
        {
            factory = () => new CCSPlayerController_InGameMoneyServices();
            return decoderSet.GetDecoder<CCSPlayerController_InGameMoneyServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSPlayerController_InGameMoneyServices: {serializerKey}");
    }

    public Int32 m_iAccount { get; private set; }

    public Int32 m_iStartAccount { get; private set; }

    public Int32 m_iTotalCashSpent { get; private set; }

    public Int32 m_iCashSpentThisRound { get; private set; }

    internal new static SendNodeDecoder<CCSPlayerController_InGameMoneyServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iAccount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_InGameMoneyServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iAccount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iStartAccount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_InGameMoneyServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iStartAccount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iTotalCashSpent")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_InGameMoneyServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iTotalCashSpent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCashSpentThisRound")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_InGameMoneyServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iCashSpentThisRound = decoder(ref buffer);
            };
        }
        return CPlayerControllerComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayerController_InventoryServices : CPlayerControllerComponent
{
    internal static SendNodeDecoder<CCSPlayerController_InventoryServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CCSPlayerController_InventoryServices> factory)
    {
        if (serializerKey.Name == "CCSPlayerController_InventoryServices")
        {
            factory = () => new CCSPlayerController_InventoryServices();
            return decoderSet.GetDecoder<CCSPlayerController_InventoryServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CCSPlayerController_InventoryServices: {serializerKey}");
    }

    public UInt16 m_unMusicID { get; private set; }

    public MedalRank_t[] m_rank { get; private set; } = Array.Empty<MedalRank_t>();

    public Int32 m_nPersonaDataPublicLevel { get; private set; }

    public Int32 m_nPersonaDataPublicCommendsLeader { get; private set; }

    public Int32 m_nPersonaDataPublicCommendsTeacher { get; private set; }

    public Int32 m_nPersonaDataPublicCommendsFriendly { get; private set; }

    public NetworkedVector<CEconItemView> m_vecTerroristLoadoutCache { get; private set; } = new NetworkedVector<CEconItemView>();

    public NetworkedVector<CEconItemView> m_vecCounterTerroristLoadoutCache { get; private set; } = new NetworkedVector<CEconItemView>();

    internal new static SendNodeDecoder<CCSPlayerController_InventoryServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_unMusicID")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CCSPlayerController_InventoryServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_unMusicID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_rank")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_enum<MedalRank_t>(field.FieldEncodingInfo);
            return (CCSPlayerController_InventoryServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_rank.Length == 0) @this.m_rank = new MedalRank_t[fixedArraySize];
                @this.m_rank[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPersonaDataPublicLevel")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_InventoryServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nPersonaDataPublicLevel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPersonaDataPublicCommendsLeader")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_InventoryServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nPersonaDataPublicCommendsLeader = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPersonaDataPublicCommendsTeacher")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_InventoryServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nPersonaDataPublicCommendsTeacher = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPersonaDataPublicCommendsFriendly")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerController_InventoryServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nPersonaDataPublicCommendsFriendly = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecTerroristLoadoutCache")
        {
            var innerDecoder = decoderSet.GetDecoder<CEconItemView>(field.FieldSerializerKey!.Value);
            return (CCSPlayerController_InventoryServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_vecTerroristLoadoutCache.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.m_vecTerroristLoadoutCache.EnsureSize(index + 1);
                    var element = @this.m_vecTerroristLoadoutCache[index] ??= new CEconItemView();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_vecCounterTerroristLoadoutCache")
        {
            var innerDecoder = decoderSet.GetDecoder<CEconItemView>(field.FieldSerializerKey!.Value);
            return (CCSPlayerController_InventoryServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_vecCounterTerroristLoadoutCache.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.m_vecCounterTerroristLoadoutCache.EnsureSize(index + 1);
                    var element = @this.m_vecCounterTerroristLoadoutCache[index] ??= new CEconItemView();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        return CPlayerControllerComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayerPawn : CCSPlayerPawnBase
{
    internal CCSPlayerPawn(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CCSPlayer_BulletServices? m_pBulletServices { get; private set; }

    public CCSPlayer_HostageServices? m_pHostageServices { get; private set; }

    public CCSPlayer_BuyServices? m_pBuyServices { get; private set; }

    public CCSPlayer_ActionTrackingServices? m_pActionTrackingServices { get; private set; }

    public bool m_bHasFemaleVoice { get; private set; }

    public string m_szLastPlaceName { get; private set; } = "";

    public bool m_bInBuyZone { get; private set; }

    public bool m_bInHostageRescueZone { get; private set; }

    public bool m_bInBombZone { get; private set; }

    public Int32 m_iRetakesOffering { get; private set; }

    public Int32 m_iRetakesOfferingCard { get; private set; }

    public bool m_bRetakesHasDefuseKit { get; private set; }

    public bool m_bRetakesMVPLastRound { get; private set; }

    public Int32 m_iRetakesMVPBoostItem { get; private set; }

    public loadout_slot_t m_RetakesMVPBoostExtraUtility { get; private set; }

    public GameTime_t m_flHealthShotBoostExpirationTime { get; private set; } = new();

    // MNetworkBitCount "32"
    public QAngle m_aimPunchAngle { get; private set; }

    // MNetworkBitCount "32"
    public QAngle m_aimPunchAngleVel { get; private set; }

    public Int32 m_aimPunchTickBase { get; private set; }

    public float m_aimPunchTickFraction { get; private set; }

    public bool m_bIsBuyMenuOpen { get; private set; }

    public GameTime_t m_flTimeOfLastInjury { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public GameTime_t m_flNextSprayDecalTime { get; private set; } = new();

    public Int32 m_nRagdollDamageBone { get; private set; }

    public Vector m_vRagdollDamageForce { get; private set; }

    public Vector m_vRagdollDamagePosition { get; private set; }

    public string m_szRagdollDamageWeaponName { get; private set; } = "";

    public bool m_bRagdollDamageHeadshot { get; private set; }

    public CEconItemView m_EconGloves { get; private set; } = new();

    public QAngle m_qDeathEyeAngles { get; private set; }

    internal new static SendNodeDecoder<CCSPlayerPawn> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_pBulletServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSPlayer_BulletServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pBulletServices = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pBulletServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pHostageServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSPlayer_HostageServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pHostageServices = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pHostageServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pBuyServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSPlayer_BuyServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pBuyServices = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pBuyServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pActionTrackingServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSPlayer_ActionTrackingServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pActionTrackingServices = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pActionTrackingServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_bHasFemaleVoice")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bHasFemaleVoice = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szLastPlaceName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szLastPlaceName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInBuyZone")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bInBuyZone = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInHostageRescueZone")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bInHostageRescueZone = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInBombZone")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bInBombZone = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRetakesOffering")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iRetakesOffering = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRetakesOfferingCard")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iRetakesOfferingCard = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRetakesHasDefuseKit")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bRetakesHasDefuseKit = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRetakesMVPLastRound")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bRetakesMVPLastRound = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRetakesMVPBoostItem")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iRetakesMVPBoostItem = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_RetakesMVPBoostExtraUtility")
        {
            var decoder = FieldDecode.CreateDecoder_enum<loadout_slot_t>(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_RetakesMVPBoostExtraUtility = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHealthShotBoostExpirationTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flHealthShotBoostExpirationTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_aimPunchAngle")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_aimPunchAngle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_aimPunchAngleVel")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_aimPunchAngleVel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_aimPunchTickBase")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_aimPunchTickBase = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_aimPunchTickFraction")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_aimPunchTickFraction = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsBuyMenuOpen")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsBuyMenuOpen = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTimeOfLastInjury")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flTimeOfLastInjury = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNextSprayDecalTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flNextSprayDecalTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRagdollDamageBone")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nRagdollDamageBone = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vRagdollDamageForce")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vRagdollDamageForce = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vRagdollDamagePosition")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vRagdollDamagePosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szRagdollDamageWeaponName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szRagdollDamageWeaponName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRagdollDamageHeadshot")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bRagdollDamageHeadshot = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_EconGloves")
        {
            var innerDecoder = CEconItemView.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_EconGloves, path, ref buffer);
            };
        }
        if (field.VarName == "m_qDeathEyeAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCSPlayerPawn @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_qDeathEyeAngles = decoder(ref buffer);
            };
        }
        return CCSPlayerPawnBase.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayerPawnBase : CBasePlayerPawn
{
    internal CCSPlayerPawnBase(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CTouchExpansionComponent"
    // MNetworkAlias "CTouchExpansionComponent"
    // MNetworkTypeAlias "CTouchExpansionComponent"
    public CTouchExpansionComponent m_CTouchExpansionComponent { get; private set; } = new();

    public CCSPlayer_PingServices? m_pPingServices { get; private set; }

    public CPlayer_ViewModelServices? m_pViewModelServices { get; private set; }

    public CHandle<CCSPlayerController> m_hOriginalController { get; private set; }

    public EntitySpottedState_t m_entitySpottedState { get; private set; } = new();

    public CSPlayerState m_iPlayerState { get; private set; }

    public bool m_bIsScoped { get; private set; }

    public bool m_bIsWalking { get; private set; }

    public bool m_bResumeZoom { get; private set; }

    public bool m_bIsDefusing { get; private set; }

    public bool m_bIsGrabbingHostage { get; private set; }

    public CSPlayerBlockingUseAction_t m_iBlockingUseActionInProgress { get; private set; }

    public GameTime_t m_fImmuneToGunGameDamageTime { get; private set; } = new();

    public bool m_bGunGameImmunity { get; private set; }

    public UInt32 m_unTotalRoundDamageDealt { get; private set; }

    public float m_fMolotovDamageTime { get; private set; }

    public bool m_bHasMovedSinceSpawn { get; private set; }

    public bool m_bCanMoveDuringFreezePeriod { get; private set; }

    public float m_flGuardianTooFarDistFrac { get; private set; }

    public GameTime_t m_flDetectedByEnemySensorTime { get; private set; } = new();

    public Int32 m_nHeavyAssaultSuitCooldownRemaining { get; private set; }

    public GameTime_t m_flEmitSoundTime { get; private set; } = new();

    public bool m_bHasNightVision { get; private set; }

    public bool m_bNightVisionOn { get; private set; }

    public bool m_bInNoDefuseArea { get; private set; }

    public bool m_bKilledByTaser { get; private set; }

    public Int32 m_iMoveState { get; private set; }

    public Int32 m_nWhichBombZone { get; private set; }

    public Int32 m_iDirection { get; private set; }

    public Int32 m_iShotsFired { get; private set; }

    public Int32 m_ArmorValue { get; private set; }

    public float m_flVelocityModifier { get; private set; }

    public float m_flHitHeading { get; private set; }

    public Int32 m_nHitBodyPart { get; private set; }

    public float m_flFlashDuration { get; private set; }

    public float m_flFlashMaxAlpha { get; private set; }

    public float m_flProgressBarStartTime { get; private set; }

    public Int32 m_iProgressBarDuration { get; private set; }

    public bool m_bWaitForNoAttack { get; private set; }

    public float m_flLowerBodyYawTarget { get; private set; }

    public bool m_bStrafing { get; private set; }

    // MNetworkEncoder "qangle_precise"
    // MNetworkPriority "32"
    public QAngle m_thirdPersonHeading { get; private set; }

    // MNetworkPriority "32"
    public float m_flSlopeDropOffset { get; private set; }

    // MNetworkPriority "32"
    public float m_flSlopeDropHeight { get; private set; }

    // MNetworkPriority "32"
    public Vector m_vHeadConstraintOffset { get; private set; }

    // MNetworkEncoder "qangle_precise"
    // MNetworkPriority "32"
    public QAngle m_angEyeAngles { get; private set; }

    public bool m_bHideTargetID { get; private set; }

    public bool m_bHud_MiniScoreHidden { get; private set; }

    public bool m_bHud_RadarHidden { get; private set; }

    public CEntityIndex m_nLastKillerIndex { get; private set; }

    public Int32 m_nLastConcurrentKilled { get; private set; }

    public Int32 m_nDeathCamMusic { get; private set; }

    public Int32 m_iAddonBits { get; private set; }

    public Int32 m_iPrimaryAddon { get; private set; }

    public Int32 m_iSecondaryAddon { get; private set; }

    public UInt32[] m_vecPlayerPatchEconIndices { get; private set; } = Array.Empty<UInt32>();

    public UInt16 m_unCurrentEquipmentValue { get; private set; }

    public UInt16 m_unRoundStartEquipmentValue { get; private set; }

    public UInt16 m_unFreezetimeEndEquipmentValue { get; private set; }

    public Int32 m_nSurvivalTeamNumber { get; private set; }

    public bool m_bKilledByHeadshot { get; private set; }

    internal new static SendNodeDecoder<CCSPlayerPawnBase> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_CTouchExpansionComponent")
        {
            var innerDecoder = CTouchExpansionComponent.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_CTouchExpansionComponent, path, ref buffer);
            };
        }
        if (field.VarName == "m_pPingServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CCSPlayer_PingServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pPingServices = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pPingServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_pViewModelServices")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CPlayer_ViewModelServices.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pViewModelServices = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pViewModelServices ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_hOriginalController")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerController>(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hOriginalController = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_entitySpottedState")
        {
            var innerDecoder = EntitySpottedState_t.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_entitySpottedState, path, ref buffer);
            };
        }
        if (field.VarName == "m_iPlayerState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<CSPlayerState>(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iPlayerState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsScoped")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsScoped = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsWalking")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsWalking = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bResumeZoom")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bResumeZoom = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsDefusing")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsDefusing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsGrabbingHostage")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsGrabbingHostage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iBlockingUseActionInProgress")
        {
            var decoder = FieldDecode.CreateDecoder_enum<CSPlayerBlockingUseAction_t>(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iBlockingUseActionInProgress = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fImmuneToGunGameDamageTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fImmuneToGunGameDamageTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bGunGameImmunity")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bGunGameImmunity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unTotalRoundDamageDealt")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_unTotalRoundDamageDealt = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fMolotovDamageTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fMolotovDamageTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasMovedSinceSpawn")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bHasMovedSinceSpawn = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCanMoveDuringFreezePeriod")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bCanMoveDuringFreezePeriod = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGuardianTooFarDistFrac")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flGuardianTooFarDistFrac = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDetectedByEnemySensorTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDetectedByEnemySensorTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHeavyAssaultSuitCooldownRemaining")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nHeavyAssaultSuitCooldownRemaining = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flEmitSoundTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flEmitSoundTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasNightVision")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bHasNightVision = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNightVisionOn")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bNightVisionOn = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInNoDefuseArea")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bInNoDefuseArea = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bKilledByTaser")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bKilledByTaser = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMoveState")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iMoveState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nWhichBombZone")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nWhichBombZone = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iDirection")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iDirection = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iShotsFired")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iShotsFired = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ArmorValue")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_ArmorValue = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flVelocityModifier")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flVelocityModifier = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHitHeading")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flHitHeading = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHitBodyPart")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nHitBodyPart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFlashDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFlashDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFlashMaxAlpha")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFlashMaxAlpha = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flProgressBarStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flProgressBarStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iProgressBarDuration")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iProgressBarDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bWaitForNoAttack")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bWaitForNoAttack = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLowerBodyYawTarget")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flLowerBodyYawTarget = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStrafing")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bStrafing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_thirdPersonHeading")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_thirdPersonHeading = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSlopeDropOffset")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flSlopeDropOffset = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSlopeDropHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flSlopeDropHeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vHeadConstraintOffset")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vHeadConstraintOffset = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_angEyeAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_angEyeAngles = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHideTargetID")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bHideTargetID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHud_MiniScoreHidden")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bHud_MiniScoreHidden = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHud_RadarHidden")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bHud_RadarHidden = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLastKillerIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CEntityIndex(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nLastKillerIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLastConcurrentKilled")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nLastConcurrentKilled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDeathCamMusic")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nDeathCamMusic = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iAddonBits")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iAddonBits = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iPrimaryAddon")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iPrimaryAddon = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iSecondaryAddon")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iSecondaryAddon = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecPlayerPatchEconIndices")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_vecPlayerPatchEconIndices.Length == 0) @this.m_vecPlayerPatchEconIndices = new UInt32[fixedArraySize];
                @this.m_vecPlayerPatchEconIndices[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unCurrentEquipmentValue")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_unCurrentEquipmentValue = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unRoundStartEquipmentValue")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_unRoundStartEquipmentValue = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unFreezetimeEndEquipmentValue")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_unFreezetimeEndEquipmentValue = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSurvivalTeamNumber")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nSurvivalTeamNumber = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bKilledByHeadshot")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerPawnBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bKilledByHeadshot = decoder(ref buffer);
            };
        }
        return CBasePlayerPawn.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSPlayerResource : CBaseEntity
{
    internal CCSPlayerResource(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool[] m_bHostageAlive { get; private set; } = Array.Empty<bool>();

    public bool[] m_isHostageFollowingSomeone { get; private set; } = Array.Empty<bool>();

    public CEntityIndex[] m_iHostageEntityIDs { get; private set; } = Array.Empty<CEntityIndex>();

    public Vector m_bombsiteCenterA { get; private set; }

    public Vector m_bombsiteCenterB { get; private set; }

    public Int32[] m_hostageRescueX { get; private set; } = Array.Empty<Int32>();

    public Int32[] m_hostageRescueY { get; private set; } = Array.Empty<Int32>();

    public Int32[] m_hostageRescueZ { get; private set; } = Array.Empty<Int32>();

    public bool m_bEndMatchNextMapAllVoted { get; private set; }

    internal new static SendNodeDecoder<CCSPlayerResource> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bHostageAlive")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_bHostageAlive.Length == 0) @this.m_bHostageAlive = new bool[fixedArraySize];
                @this.m_bHostageAlive[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_isHostageFollowingSomeone")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_isHostageFollowingSomeone.Length == 0) @this.m_isHostageFollowingSomeone = new bool[fixedArraySize];
                @this.m_isHostageFollowingSomeone[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iHostageEntityIDs")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_CEntityIndex(field.FieldEncodingInfo);
            return (CCSPlayerResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_iHostageEntityIDs.Length == 0) @this.m_iHostageEntityIDs = new CEntityIndex[fixedArraySize];
                @this.m_iHostageEntityIDs[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bombsiteCenterA")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCSPlayerResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bombsiteCenterA = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bombsiteCenterB")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CCSPlayerResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bombsiteCenterB = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hostageRescueX")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_hostageRescueX.Length == 0) @this.m_hostageRescueX = new Int32[fixedArraySize];
                @this.m_hostageRescueX[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hostageRescueY")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_hostageRescueY.Length == 0) @this.m_hostageRescueY = new Int32[fixedArraySize];
                @this.m_hostageRescueY[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hostageRescueZ")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSPlayerResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_hostageRescueZ.Length == 0) @this.m_hostageRescueZ = new Int32[fixedArraySize];
                @this.m_hostageRescueZ[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEndMatchNextMapAllVoted")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSPlayerResource @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bEndMatchNextMapAllVoted = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSTeam : CTeam
{
    internal CCSTeam(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bSurrendered { get; private set; }

    public string m_szTeamMatchStat { get; private set; } = "";

    public Int32 m_numMapVictories { get; private set; }

    public Int32 m_scoreFirstHalf { get; private set; }

    public Int32 m_scoreSecondHalf { get; private set; }

    public Int32 m_scoreOvertime { get; private set; }

    public string m_szClanTeamname { get; private set; } = "";

    public UInt32 m_iClanID { get; private set; }

    public string m_szTeamFlagImage { get; private set; } = "";

    public string m_szTeamLogoImage { get; private set; } = "";

    internal new static SendNodeDecoder<CCSTeam> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bSurrendered")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bSurrendered = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szTeamMatchStat")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szTeamMatchStat = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_numMapVictories")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_numMapVictories = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_scoreFirstHalf")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_scoreFirstHalf = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_scoreSecondHalf")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_scoreSecondHalf = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_scoreOvertime")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_scoreOvertime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szClanTeamname")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szClanTeamname = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iClanID")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iClanID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szTeamFlagImage")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szTeamFlagImage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szTeamLogoImage")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CCSTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szTeamLogoImage = decoder(ref buffer);
            };
        }
        return CTeam.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSWeaponBase : CBasePlayerWeapon
{
    internal CCSWeaponBase(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float m_flFireSequenceStartTime { get; private set; }

    public Int32 m_nFireSequenceStartTimeChange { get; private set; }

    public bool m_bPlayerFireEventIsPrimary { get; private set; }

    // MNetworkChangeCallback "OnWeaponStateNetworkChange"
    public CSWeaponState_t m_iState { get; private set; }

    // MNetworkUserGroup "LocalWeaponExclusive"
    public UInt32 m_nViewModelIndex { get; private set; }

    // MNetworkUserGroup "LocalWeaponExclusive"
    // MNetworkPriority "32"
    public GameTime_t m_flTimeWeaponIdle { get; private set; } = new();

    public CSWeaponMode m_weaponMode { get; private set; }

    public float m_fAccuracyPenalty { get; private set; }

    public Int32 m_iRecoilIndex { get; private set; }

    public float m_flRecoilIndex { get; private set; }

    public bool m_bBurstMode { get; private set; }

    public GameTime_t m_flPostponeFireReadyTime { get; private set; } = new();

    public bool m_bInReload { get; private set; }

    public bool m_bReloadVisuallyComplete { get; private set; }

    public GameTime_t m_flDroppedAtTime { get; private set; } = new();

    public bool m_bIsHauledBack { get; private set; }

    public bool m_bSilencerOn { get; private set; }

    public GameTime_t m_flTimeSilencerSwitchComplete { get; private set; } = new();

    public Int32 m_iOriginalTeamNumber { get; private set; }

    public CHandle<CCSPlayerPawn> m_hPrevOwner { get; private set; }

    public GameTick_t m_nDropTick { get; private set; } = new();

    public GameTime_t m_fLastShotTime { get; private set; } = new();

    public Int32 m_iIronSightMode { get; private set; }

    public Int32 m_iNumEmptyAttacks { get; private set; }

    internal new static SendNodeDecoder<CCSWeaponBase> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flFireSequenceStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFireSequenceStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFireSequenceStartTimeChange")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nFireSequenceStartTimeChange = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPlayerFireEventIsPrimary")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bPlayerFireEventIsPrimary = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iState")
        {
            var decoder = FieldDecode.CreateDecoder_enum<CSWeaponState_t>(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nViewModelIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nViewModelIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTimeWeaponIdle")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flTimeWeaponIdle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_weaponMode")
        {
            var decoder = FieldDecode.CreateDecoder_enum<CSWeaponMode>(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_weaponMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fAccuracyPenalty")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fAccuracyPenalty = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRecoilIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iRecoilIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRecoilIndex")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flRecoilIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bBurstMode")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bBurstMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPostponeFireReadyTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flPostponeFireReadyTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInReload")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bInReload = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bReloadVisuallyComplete")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bReloadVisuallyComplete = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDroppedAtTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDroppedAtTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsHauledBack")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsHauledBack = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bSilencerOn")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bSilencerOn = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTimeSilencerSwitchComplete")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flTimeSilencerSwitchComplete = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iOriginalTeamNumber")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iOriginalTeamNumber = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hPrevOwner")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hPrevOwner = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDropTick")
        {
            var decoder = FieldDecode.CreateDecoder_GameTick_t(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nDropTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fLastShotTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fLastShotTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iIronSightMode")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iIronSightMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iNumEmptyAttacks")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSWeaponBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iNumEmptyAttacks = decoder(ref buffer);
            };
        }
        return CBasePlayerWeapon.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CCSWeaponBaseGun : CCSWeaponBase
{
    internal CCSWeaponBaseGun(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 m_zoomLevel { get; private set; }

    public Int32 m_iBurstShotsRemaining { get; private set; }

    public bool m_bNeedsBoltAction { get; private set; }

    internal new static SendNodeDecoder<CCSWeaponBaseGun> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_zoomLevel")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSWeaponBaseGun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_zoomLevel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iBurstShotsRemaining")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CCSWeaponBaseGun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iBurstShotsRemaining = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNeedsBoltAction")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CCSWeaponBaseGun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bNeedsBoltAction = decoder(ref buffer);
            };
        }
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CDamageRecord
{
    public CHandle<CCSPlayerPawnBase> m_PlayerDamager { get; private set; }

    public CHandle<CCSPlayerPawnBase> m_PlayerRecipient { get; private set; }

    public CHandle<CCSPlayerController> m_hPlayerControllerDamager { get; private set; }

    public CHandle<CCSPlayerController> m_hPlayerControllerRecipient { get; private set; }

    public NetworkedString m_szPlayerDamagerName { get; private set; }

    public NetworkedString m_szPlayerRecipientName { get; private set; }

    public UInt64 m_DamagerXuid { get; private set; }

    public UInt64 m_RecipientXuid { get; private set; }

    public Int32 m_iDamage { get; private set; }

    public Int32 m_iActualHealthRemoved { get; private set; }

    public Int32 m_iNumHits { get; private set; }

    public Int32 m_iLastBulletUpdate { get; private set; }

    public bool m_bIsOtherEnemy { get; private set; }

    public EKillTypes_t m_killType { get; private set; }

    internal static SendNodeDecoder<CDamageRecord> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_PlayerDamager")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawnBase>(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_PlayerDamager = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_PlayerRecipient")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawnBase>(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_PlayerRecipient = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hPlayerControllerDamager")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerController>(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hPlayerControllerDamager = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hPlayerControllerRecipient")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerController>(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hPlayerControllerRecipient = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szPlayerDamagerName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szPlayerDamagerName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szPlayerRecipientName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szPlayerRecipientName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_DamagerXuid")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_DamagerXuid = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_RecipientXuid")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_RecipientXuid = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iDamage")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iDamage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iActualHealthRemoved")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iActualHealthRemoved = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iNumHits")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iNumHits = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iLastBulletUpdate")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iLastBulletUpdate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsOtherEnemy")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsOtherEnemy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_killType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EKillTypes_t>(field.FieldEncodingInfo);
            return (CDamageRecord @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_killType = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CDEagle : CCSWeaponBaseGun
{
    internal CDEagle(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CDEagle> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CDecoyGrenade : CBaseCSGrenade
{
    internal CDecoyGrenade(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CDecoyGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCSGrenade.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CDecoyProjectile : CBaseCSGrenadeProjectile
{
    internal CDecoyProjectile(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CDecoyProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCSGrenadeProjectile.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CDynamicLight : CBaseModelEntity
{
    internal CDynamicLight(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public byte m_Flags { get; private set; }

    public byte m_LightStyle { get; private set; }

    public float m_Radius { get; private set; }

    public Int32 m_Exponent { get; private set; }

    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "360.000000"
    public float m_InnerAngle { get; private set; }

    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "360.000000"
    public float m_OuterAngle { get; private set; }

    public float m_SpotRadius { get; private set; }

    internal new static SendNodeDecoder<CDynamicLight> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Flags")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_Flags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_LightStyle")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_LightStyle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Radius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_Radius = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Exponent")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_Exponent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_InnerAngle")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_InnerAngle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_OuterAngle")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_OuterAngle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SpotRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CDynamicLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_SpotRadius = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CDynamicProp : CBreakableProp
{
    internal CDynamicProp(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bUseHitboxesForRenderBox { get; private set; }

    public bool m_bUseAnimGraph { get; private set; }

    internal new static SendNodeDecoder<CDynamicProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bUseHitboxesForRenderBox")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CDynamicProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bUseHitboxesForRenderBox = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseAnimGraph")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CDynamicProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bUseAnimGraph = decoder(ref buffer);
            };
        }
        return CBreakableProp.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEconEntity : CBaseFlex
{
    internal CEconEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CAttributeContainer m_AttributeManager { get; private set; } = new();

    public UInt32 m_OriginalOwnerXuidLow { get; private set; }

    public UInt32 m_OriginalOwnerXuidHigh { get; private set; }

    public Int32 m_nFallbackPaintKit { get; private set; }

    public Int32 m_nFallbackSeed { get; private set; }

    public float m_flFallbackWear { get; private set; }

    public Int32 m_nFallbackStatTrak { get; private set; }

    internal new static SendNodeDecoder<CEconEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_AttributeManager")
        {
            var innerDecoder = CAttributeContainer.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CEconEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_AttributeManager, path, ref buffer);
            };
        }
        if (field.VarName == "m_OriginalOwnerXuidLow")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEconEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_OriginalOwnerXuidLow = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_OriginalOwnerXuidHigh")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEconEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_OriginalOwnerXuidHigh = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFallbackPaintKit")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEconEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nFallbackPaintKit = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFallbackSeed")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEconEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nFallbackSeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFallbackWear")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEconEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFallbackWear = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFallbackStatTrak")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEconEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nFallbackStatTrak = decoder(ref buffer);
            };
        }
        return CBaseFlex.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEconItemAttribute
{
    public UInt16 m_iAttributeDefinitionIndex { get; private set; }

    // MNetworkAlias "m_iRawValue32"
    public float m_flValue { get; private set; }

    public float m_flInitialValue { get; private set; }

    public Int32 m_nRefundableCurrency { get; private set; }

    public bool m_bSetBonus { get; private set; }

    internal static SendNodeDecoder<CEconItemAttribute> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iAttributeDefinitionIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEconItemAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iAttributeDefinitionIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRawValue32")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEconItemAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flValue = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flInitialValue")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEconItemAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flInitialValue = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRefundableCurrency")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEconItemAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nRefundableCurrency = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bSetBonus")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEconItemAttribute @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bSetBonus = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CEconItemView : IEconItemInterface
{
    public UInt16 m_iItemDefinitionIndex { get; private set; }

    public Int32 m_iEntityQuality { get; private set; }

    public UInt32 m_iEntityLevel { get; private set; }

    public UInt32 m_iItemIDHigh { get; private set; }

    public UInt32 m_iItemIDLow { get; private set; }

    public UInt32 m_iAccountID { get; private set; }

    public UInt32 m_iInventoryPosition { get; private set; }

    public bool m_bInitialized { get; private set; }

    public CAttributeList m_AttributeList { get; private set; } = new();

    public CAttributeList m_NetworkedDynamicAttributes { get; private set; } = new();

    public string m_szCustomName { get; private set; } = "";

    internal new static SendNodeDecoder<CEconItemView> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iItemDefinitionIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iItemDefinitionIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEntityQuality")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iEntityQuality = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEntityLevel")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iEntityLevel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iItemIDHigh")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iItemIDHigh = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iItemIDLow")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iItemIDLow = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iAccountID")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iAccountID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iInventoryPosition")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iInventoryPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInitialized")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bInitialized = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_AttributeList")
        {
            var innerDecoder = CAttributeList.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_AttributeList, path, ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_NetworkedDynamicAttributes")
        {
            var innerDecoder = CAttributeList.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_NetworkedDynamicAttributes, path, ref buffer);
            };
        }
        if (field.VarName == "m_szCustomName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CEconItemView @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szCustomName = decoder(ref buffer);
            };
        }
        return IEconItemInterface.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEconWearable : CEconEntity
{
    internal CEconWearable(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CEconWearable> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CEconEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEntityComponent
{
    internal static SendNodeDecoder<CEntityComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CEntityDissolve : CBaseModelEntity
{
    internal CEntityDissolve(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float m_flFadeInStart { get; private set; }

    public float m_flFadeInLength { get; private set; }

    public float m_flFadeOutModelStart { get; private set; }

    public float m_flFadeOutModelLength { get; private set; }

    public float m_flFadeOutStart { get; private set; }

    public float m_flFadeOutLength { get; private set; }

    public GameTime_t m_flStartTime { get; private set; } = new();

    public EntityDisolveType_t m_nDissolveType { get; private set; }

    public Vector m_vDissolverOrigin { get; private set; }

    public UInt32 m_nMagnitude { get; private set; }

    internal new static SendNodeDecoder<CEntityDissolve> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flFadeInStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeInStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeInLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeInLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeOutModelStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeOutModelStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeOutModelLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeOutModelLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeOutStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeOutStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeOutLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeOutLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDissolveType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<EntityDisolveType_t>(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nDissolveType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vDissolverOrigin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vDissolverOrigin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMagnitude")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEntityDissolve @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nMagnitude = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEntityFlame : CBaseEntity
{
    internal CEntityFlame(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CBaseEntity> m_hEntAttached { get; private set; }

    public bool m_bCheapEffect { get; private set; }

    internal new static SendNodeDecoder<CEntityFlame> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hEntAttached")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CEntityFlame @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hEntAttached = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCheapEffect")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEntityFlame @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bCheapEffect = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEntityIdentity
{
    internal static SendNodeDecoder<CEntityIdentity> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CEntityIdentity> factory)
    {
        if (serializerKey.Name == "CEntityIdentity")
        {
            factory = () => new CEntityIdentity();
            return decoderSet.GetDecoder<CEntityIdentity>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CEntityIdentity: {serializerKey}");
    }

    // MNetworkChangeCallback "entityIdentityNameChanged"
    public Int32 m_nameStringableIndex { get; private set; }

    internal static SendNodeDecoder<CEntityIdentity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nameStringableIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEntityIdentity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nameStringableIndex = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CEntityInstance
{
    // MNetworkPriority "56"
    public CEntityIdentity? m_pEntity { get; private set; }

    // MNetworkDisable
    public CScriptComponent? m_CScriptComponent { get; private set; }

    internal static SendNodeDecoder<CEntityInstance> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_pEntity")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CEntityIdentity.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CEntityInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_pEntity = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_pEntity ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        if (field.VarName == "m_CScriptComponent")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CScriptComponent.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CEntityInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_CScriptComponent = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_CScriptComponent ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CEnvCombinedLightProbeVolume : CBaseEntity
{
    internal CEnvCombinedLightProbeVolume(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "StateChanged"
    public Color m_Color { get; private set; }

    // MNetworkChangeCallback "StateChanged"
    public float m_flBrightness { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> m_hCubemapTexture { get; private set; }

    public bool m_bCustomCubemapTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> m_hLightProbeTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> m_hLightProbeDirectLightIndicesTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> m_hLightProbeDirectLightScalarsTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> m_hLightProbeDirectLightShadowsTexture { get; private set; }

    public Vector m_vBoxMins { get; private set; }

    public Vector m_vBoxMaxs { get; private set; }

    public NetworkedString m_LightGroups { get; private set; }

    public bool m_bMoveable { get; private set; }

    public Int32 m_nHandshake { get; private set; }

    public Int32 m_nEnvCubeMapArrayIndex { get; private set; }

    public Int32 m_nPriority { get; private set; }

    public bool m_bStartDisabled { get; private set; }

    public float m_flEdgeFadeDist { get; private set; }

    public Vector m_vEdgeFadeDists { get; private set; }

    public Int32 m_nLightProbeSizeX { get; private set; }

    public Int32 m_nLightProbeSizeY { get; private set; }

    public Int32 m_nLightProbeSizeZ { get; private set; }

    public Int32 m_nLightProbeAtlasX { get; private set; }

    public Int32 m_nLightProbeAtlasY { get; private set; }

    public Int32 m_nLightProbeAtlasZ { get; private set; }

    public bool m_bEnabled { get; private set; }

    internal new static SendNodeDecoder<CEnvCombinedLightProbeVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Color")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_Color = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flBrightness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hCubemapTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hCubemapTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCustomCubemapTexture")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bCustomCubemapTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLightProbeTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hLightProbeTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLightProbeDirectLightIndicesTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hLightProbeDirectLightIndicesTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLightProbeDirectLightScalarsTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hLightProbeDirectLightScalarsTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLightProbeDirectLightShadowsTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hLightProbeDirectLightShadowsTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vBoxMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vBoxMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_LightGroups")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_LightGroups = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMoveable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bMoveable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHandshake")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nHandshake = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEnvCubeMapArrayIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nEnvCubeMapArrayIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPriority")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nPriority = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bStartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flEdgeFadeDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flEdgeFadeDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vEdgeFadeDists")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vEdgeFadeDists = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeSizeX")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nLightProbeSizeX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeSizeY")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nLightProbeSizeY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeSizeZ")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nLightProbeSizeZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeAtlasX")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nLightProbeAtlasX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeAtlasY")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nLightProbeAtlasY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeAtlasZ")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nLightProbeAtlasZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCombinedLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bEnabled = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEnvCubemap : CBaseEntity
{
    internal CEnvCubemap(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CStrongHandle<InfoForResourceTypeCTextureBase> m_hCubemapTexture { get; private set; }

    public bool m_bCustomCubemapTexture { get; private set; }

    public float m_flInfluenceRadius { get; private set; }

    public Vector m_vBoxProjectMins { get; private set; }

    public Vector m_vBoxProjectMaxs { get; private set; }

    public NetworkedString m_LightGroups { get; private set; }

    public bool m_bMoveable { get; private set; }

    public Int32 m_nHandshake { get; private set; }

    public Int32 m_nEnvCubeMapArrayIndex { get; private set; }

    public Int32 m_nPriority { get; private set; }

    public float m_flEdgeFadeDist { get; private set; }

    public Vector m_vEdgeFadeDists { get; private set; }

    public float m_flDiffuseScale { get; private set; }

    public bool m_bStartDisabled { get; private set; }

    public bool m_bDefaultEnvMap { get; private set; }

    public bool m_bDefaultSpecEnvMap { get; private set; }

    public bool m_bIndoorCubeMap { get; private set; }

    public bool m_bCopyDiffuseFromDefaultCubemap { get; private set; }

    public bool m_bEnabled { get; private set; }

    internal new static SendNodeDecoder<CEnvCubemap> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hCubemapTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hCubemapTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCustomCubemapTexture")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bCustomCubemapTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flInfluenceRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flInfluenceRadius = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxProjectMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vBoxProjectMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxProjectMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vBoxProjectMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_LightGroups")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_LightGroups = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMoveable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bMoveable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHandshake")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nHandshake = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEnvCubeMapArrayIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nEnvCubeMapArrayIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPriority")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nPriority = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flEdgeFadeDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flEdgeFadeDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vEdgeFadeDists")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vEdgeFadeDists = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDiffuseScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDiffuseScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bStartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDefaultEnvMap")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bDefaultEnvMap = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDefaultSpecEnvMap")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bDefaultSpecEnvMap = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIndoorCubeMap")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIndoorCubeMap = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCopyDiffuseFromDefaultCubemap")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bCopyDiffuseFromDefaultCubemap = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemap @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bEnabled = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEnvCubemapBox : CEnvCubemap
{
    internal CEnvCubemapBox(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CEnvCubemapBox> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CEnvCubemap.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEnvCubemapFog : CBaseEntity
{
    internal CEnvCubemapFog(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float m_flEndDistance { get; private set; }

    public float m_flStartDistance { get; private set; }

    public float m_flFogFalloffExponent { get; private set; }

    public bool m_bHeightFogEnabled { get; private set; }

    public float m_flFogHeightWidth { get; private set; }

    public float m_flFogHeightEnd { get; private set; }

    public float m_flFogHeightStart { get; private set; }

    public float m_flFogHeightExponent { get; private set; }

    public float m_flLODBias { get; private set; }

    public bool m_bActive { get; private set; }

    public bool m_bStartDisabled { get; private set; }

    public float m_flFogMaxOpacity { get; private set; }

    public Int32 m_nCubemapSourceType { get; private set; }

    public CStrongHandle<InfoForResourceTypeIMaterial2> m_hSkyMaterial { get; private set; }

    public NetworkedString m_iszSkyEntity { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> m_hFogCubemapTexture { get; private set; }

    public bool m_bHasHeightFogEnd { get; private set; }

    internal new static SendNodeDecoder<CEnvCubemapFog> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flEndDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flEndDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flStartDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogFalloffExponent")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogFalloffExponent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHeightFogEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bHeightFogEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogHeightWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogHeightWidth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogHeightEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogHeightEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogHeightStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogHeightStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogHeightExponent")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogHeightExponent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLODBias")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flLODBias = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bActive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bStartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMaxOpacity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogMaxOpacity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCubemapSourceType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nCubemapSourceType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hSkyMaterial")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hSkyMaterial = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszSkyEntity")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iszSkyEntity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hFogCubemapTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hFogCubemapTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasHeightFogEnd")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvCubemapFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bHasHeightFogEnd = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEnvDecal : CBaseModelEntity
{
    internal CEnvDecal(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CStrongHandle<InfoForResourceTypeIMaterial2> m_hDecalMaterial { get; private set; }

    // MNetworkChangeCallback "OnDecalDimensionsChanged"
    public float m_flWidth { get; private set; }

    // MNetworkChangeCallback "OnDecalDimensionsChanged"
    public float m_flHeight { get; private set; }

    // MNetworkChangeCallback "OnDecalDimensionsChanged"
    public float m_flDepth { get; private set; }

    public UInt32 m_nRenderOrder { get; private set; }

    public bool m_bProjectOnWorld { get; private set; }

    public bool m_bProjectOnCharacters { get; private set; }

    public bool m_bProjectOnWater { get; private set; }

    public float m_flDepthSortBias { get; private set; }

    internal new static SendNodeDecoder<CEnvDecal> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hDecalMaterial")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hDecalMaterial = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flWidth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flHeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDepth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDepth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRenderOrder")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nRenderOrder = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bProjectOnWorld")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bProjectOnWorld = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bProjectOnCharacters")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bProjectOnCharacters = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bProjectOnWater")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bProjectOnWater = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDepthSortBias")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDepthSortBias = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEnvDetailController : CBaseEntity
{
    internal CEnvDetailController(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float m_flFadeStartDist { get; private set; }

    public float m_flFadeEndDist { get; private set; }

    internal new static SendNodeDecoder<CEnvDetailController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flFadeStartDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvDetailController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeStartDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeEndDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvDetailController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeEndDist = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEnvLightProbeVolume : CBaseEntity
{
    internal CEnvLightProbeVolume(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CStrongHandle<InfoForResourceTypeCTextureBase> m_hLightProbeTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> m_hLightProbeDirectLightIndicesTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> m_hLightProbeDirectLightScalarsTexture { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> m_hLightProbeDirectLightShadowsTexture { get; private set; }

    public Vector m_vBoxMins { get; private set; }

    public Vector m_vBoxMaxs { get; private set; }

    public NetworkedString m_LightGroups { get; private set; }

    public bool m_bMoveable { get; private set; }

    public Int32 m_nHandshake { get; private set; }

    public Int32 m_nPriority { get; private set; }

    public bool m_bStartDisabled { get; private set; }

    public Int32 m_nLightProbeSizeX { get; private set; }

    public Int32 m_nLightProbeSizeY { get; private set; }

    public Int32 m_nLightProbeSizeZ { get; private set; }

    public Int32 m_nLightProbeAtlasX { get; private set; }

    public Int32 m_nLightProbeAtlasY { get; private set; }

    public Int32 m_nLightProbeAtlasZ { get; private set; }

    public bool m_bEnabled { get; private set; }

    internal new static SendNodeDecoder<CEnvLightProbeVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hLightProbeTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hLightProbeTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLightProbeDirectLightIndicesTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hLightProbeDirectLightIndicesTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLightProbeDirectLightScalarsTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hLightProbeDirectLightScalarsTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLightProbeDirectLightShadowsTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hLightProbeDirectLightShadowsTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vBoxMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vBoxMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_LightGroups")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_LightGroups = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMoveable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bMoveable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHandshake")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nHandshake = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPriority")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nPriority = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bStartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeSizeX")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nLightProbeSizeX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeSizeY")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nLightProbeSizeY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeSizeZ")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nLightProbeSizeZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeAtlasX")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nLightProbeAtlasX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeAtlasY")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nLightProbeAtlasY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nLightProbeAtlasZ")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nLightProbeAtlasZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvLightProbeVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bEnabled = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEnvParticleGlow : CParticleSystem
{
    internal CEnvParticleGlow(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float m_flAlphaScale { get; private set; }

    public float m_flRadiusScale { get; private set; }

    public float m_flSelfIllumScale { get; private set; }

    public Color m_ColorTint { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> m_hTextureOverride { get; private set; }

    internal new static SendNodeDecoder<CEnvParticleGlow> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flAlphaScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvParticleGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flAlphaScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRadiusScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvParticleGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flRadiusScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSelfIllumScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvParticleGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flSelfIllumScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ColorTint")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CEnvParticleGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_ColorTint = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTextureOverride")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvParticleGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hTextureOverride = decoder(ref buffer);
            };
        }
        return CParticleSystem.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEnvProjectedTexture : CModelPointEntity
{
    internal CEnvProjectedTexture(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CBaseEntity> m_hTargetEntity { get; private set; }

    public bool m_bState { get; private set; }

    public bool m_bAlwaysUpdate { get; private set; }

    public float m_flLightFOV { get; private set; }

    public bool m_bEnableShadows { get; private set; }

    public bool m_bSimpleProjection { get; private set; }

    public bool m_bLightOnlyTarget { get; private set; }

    public bool m_bLightWorld { get; private set; }

    public bool m_bCameraSpace { get; private set; }

    public float m_flBrightnessScale { get; private set; }

    public Color m_LightColor { get; private set; }

    public float m_flIntensity { get; private set; }

    public float m_flLinearAttenuation { get; private set; }

    public float m_flQuadraticAttenuation { get; private set; }

    public bool m_bVolumetric { get; private set; }

    public float m_flNoiseStrength { get; private set; }

    public float m_flFlashlightTime { get; private set; }

    public UInt32 m_nNumPlanes { get; private set; }

    public float m_flPlaneOffset { get; private set; }

    public float m_flVolumetricIntensity { get; private set; }

    public float m_flColorTransitionTime { get; private set; }

    public float m_flAmbient { get; private set; }

    public string m_SpotlightTextureName { get; private set; } = "";

    public Int32 m_nSpotlightTextureFrame { get; private set; }

    public UInt32 m_nShadowQuality { get; private set; }

    // MNetworkBitCount "16"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "500.000000"
    // MNetworkEncodeFlags "1"
    public float m_flNearZ { get; private set; }

    // MNetworkBitCount "18"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1500.000000"
    // MNetworkEncodeFlags "1"
    public float m_flFarZ { get; private set; }

    public float m_flProjectionSize { get; private set; }

    public float m_flRotation { get; private set; }

    public bool m_bFlipHorizontal { get; private set; }

    internal new static SendNodeDecoder<CEnvProjectedTexture> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hTargetEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hTargetEntity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bState")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAlwaysUpdate")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bAlwaysUpdate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLightFOV")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flLightFOV = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnableShadows")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bEnableShadows = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bSimpleProjection")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bSimpleProjection = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bLightOnlyTarget")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bLightOnlyTarget = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bLightWorld")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bLightWorld = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCameraSpace")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bCameraSpace = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightnessScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flBrightnessScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_LightColor")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_LightColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flIntensity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flIntensity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLinearAttenuation")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flLinearAttenuation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flQuadraticAttenuation")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flQuadraticAttenuation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bVolumetric")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bVolumetric = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNoiseStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flNoiseStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFlashlightTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFlashlightTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nNumPlanes")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nNumPlanes = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPlaneOffset")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flPlaneOffset = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flVolumetricIntensity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flVolumetricIntensity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flColorTransitionTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flColorTransitionTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAmbient")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flAmbient = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SpotlightTextureName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_SpotlightTextureName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSpotlightTextureFrame")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nSpotlightTextureFrame = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowQuality")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nShadowQuality = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNearZ")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flNearZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFarZ")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFarZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flProjectionSize")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flProjectionSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRotation")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flRotation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFlipHorizontal")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvProjectedTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bFlipHorizontal = decoder(ref buffer);
            };
        }
        return CModelPointEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEnvScreenOverlay : CPointEntity
{
    internal CEnvScreenOverlay(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString[] m_iszOverlayNames { get; private set; } = Array.Empty<NetworkedString>();

    // MNetworkBitCount "11"
    // MNetworkMinValue "-1.000000"
    // MNetworkMaxValue "63.000000"
    public float[] m_flOverlayTimes { get; private set; } = Array.Empty<float>();

    public GameTime_t m_flStartTime { get; private set; } = new();

    public Int32 m_iDesiredOverlay { get; private set; }

    public bool m_bIsActive { get; private set; }

    internal new static SendNodeDecoder<CEnvScreenOverlay> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iszOverlayNames")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CEnvScreenOverlay @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_iszOverlayNames.Length == 0) @this.m_iszOverlayNames = new NetworkedString[fixedArraySize];
                @this.m_iszOverlayNames[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flOverlayTimes")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvScreenOverlay @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_flOverlayTimes.Length == 0) @this.m_flOverlayTimes = new float[fixedArraySize];
                @this.m_flOverlayTimes[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CEnvScreenOverlay @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iDesiredOverlay")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvScreenOverlay @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iDesiredOverlay = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvScreenOverlay @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsActive = decoder(ref buffer);
            };
        }
        return CPointEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEnvSky : CBaseModelEntity
{
    internal CEnvSky(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "SkyStateChanged"
    public CStrongHandle<InfoForResourceTypeIMaterial2> m_hSkyMaterial { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public CStrongHandle<InfoForResourceTypeIMaterial2> m_hSkyMaterialLightingOnly { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public bool m_bStartDisabled { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public Color m_vTintColor { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public Color m_vTintColorLightingOnly { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public float m_flBrightnessScale { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public Int32 m_nFogType { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public float m_flFogMinStart { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public float m_flFogMinEnd { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public float m_flFogMaxStart { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public float m_flFogMaxEnd { get; private set; }

    // MNetworkChangeCallback "SkyStateChanged"
    public bool m_bEnabled { get; private set; }

    internal new static SendNodeDecoder<CEnvSky> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hSkyMaterial")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hSkyMaterial = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hSkyMaterialLightingOnly")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hSkyMaterialLightingOnly = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bStartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vTintColor")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vTintColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vTintColorLightingOnly")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vTintColorLightingOnly = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightnessScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flBrightnessScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFogType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nFogType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMinStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogMinStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMinEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogMinEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMaxStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogMaxStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMaxEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogMaxEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvSky @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bEnabled = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEnvVolumetricFogController : CBaseEntity
{
    internal CEnvVolumetricFogController(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float m_flScattering { get; private set; }

    public float m_flAnisotropy { get; private set; }

    public float m_flFadeSpeed { get; private set; }

    public float m_flDrawDistance { get; private set; }

    public float m_flFadeInStart { get; private set; }

    public float m_flFadeInEnd { get; private set; }

    public float m_flIndirectStrength { get; private set; }

    public Int32 m_nIndirectTextureDimX { get; private set; }

    public Int32 m_nIndirectTextureDimY { get; private set; }

    public Int32 m_nIndirectTextureDimZ { get; private set; }

    public Vector m_vBoxMins { get; private set; }

    public Vector m_vBoxMaxs { get; private set; }

    public bool m_bActive { get; private set; }

    public GameTime_t m_flStartAnisoTime { get; private set; } = new();

    public GameTime_t m_flStartScatterTime { get; private set; } = new();

    public GameTime_t m_flStartDrawDistanceTime { get; private set; } = new();

    public float m_flStartAnisotropy { get; private set; }

    public float m_flStartScattering { get; private set; }

    public float m_flStartDrawDistance { get; private set; }

    public float m_flDefaultAnisotropy { get; private set; }

    public float m_flDefaultScattering { get; private set; }

    public float m_flDefaultDrawDistance { get; private set; }

    public bool m_bStartDisabled { get; private set; }

    public bool m_bEnableIndirect { get; private set; }

    public bool m_bIsMaster { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> m_hFogIndirectTexture { get; private set; }

    public Int32 m_nForceRefreshCount { get; private set; }

    internal new static SendNodeDecoder<CEnvVolumetricFogController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flScattering")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flScattering = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAnisotropy")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flAnisotropy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDrawDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDrawDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeInStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeInStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeInEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeInEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flIndirectStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flIndirectStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nIndirectTextureDimX")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nIndirectTextureDimX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nIndirectTextureDimY")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nIndirectTextureDimY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nIndirectTextureDimZ")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nIndirectTextureDimZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vBoxMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vBoxMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bActive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartAnisoTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flStartAnisoTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartScatterTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flStartScatterTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartDrawDistanceTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flStartDrawDistanceTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartAnisotropy")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flStartAnisotropy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartScattering")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flStartScattering = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartDrawDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flStartDrawDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDefaultAnisotropy")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDefaultAnisotropy = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDefaultScattering")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDefaultScattering = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDefaultDrawDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDefaultDrawDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bStartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnableIndirect")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bEnableIndirect = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsMaster")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsMaster = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hFogIndirectTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hFogIndirectTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nForceRefreshCount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvVolumetricFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nForceRefreshCount = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEnvVolumetricFogVolume : CBaseEntity
{
    internal CEnvVolumetricFogVolume(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bActive { get; private set; }

    public Vector m_vBoxMins { get; private set; }

    public Vector m_vBoxMaxs { get; private set; }

    public bool m_bStartDisabled { get; private set; }

    public float m_flStrength { get; private set; }

    public Int32 m_nFalloffShape { get; private set; }

    public float m_flFalloffExponent { get; private set; }

    internal new static SendNodeDecoder<CEnvVolumetricFogVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bActive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vBoxMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vBoxMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bStartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFalloffShape")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nFalloffShape = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFalloffExponent")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvVolumetricFogVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFalloffExponent = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEnvWind : CBaseEntity
{
    internal CEnvWind(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CEnvWindShared m_EnvWindShared { get; private set; } = new();

    internal new static SendNodeDecoder<CEnvWind> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_EnvWindShared")
        {
            var innerDecoder = CEnvWindShared.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CEnvWind @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_EnvWindShared, path, ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CEnvWindShared
{
    public GameTime_t m_flStartTime { get; private set; } = new();

    public UInt32 m_iWindSeed { get; private set; }

    public UInt16 m_iMinWind { get; private set; }

    public UInt16 m_iMaxWind { get; private set; }

    public Int32 m_windRadius { get; private set; }

    public UInt16 m_iMinGust { get; private set; }

    public UInt16 m_iMaxGust { get; private set; }

    public float m_flMinGustDelay { get; private set; }

    public float m_flMaxGustDelay { get; private set; }

    public float m_flGustDuration { get; private set; }

    public UInt16 m_iGustDirChange { get; private set; }

    // MNetworkEncoder "coord"
    public Vector m_location { get; private set; }

    public UInt16 m_iInitialWindDir { get; private set; }

    public float m_flInitialWindSpeed { get; private set; }

    internal static SendNodeDecoder<CEnvWindShared> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iWindSeed")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iWindSeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMinWind")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iMinWind = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMaxWind")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iMaxWind = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_windRadius")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_windRadius = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMinGust")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iMinGust = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMaxGust")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iMaxGust = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMinGustDelay")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flMinGustDelay = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMaxGustDelay")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flMaxGustDelay = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGustDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flGustDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iGustDirChange")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iGustDirChange = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_location")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_location = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iInitialWindDir")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iInitialWindDir = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flInitialWindSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CEnvWindShared @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flInitialWindSpeed = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CFireCrackerBlast : CInferno
{
    internal CFireCrackerBlast(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFireCrackerBlast> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CInferno.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CFireSmoke : CBaseFire
{
    internal CFireSmoke(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 m_nFlameModelIndex { get; private set; }

    public Int32 m_nFlameFromAboveModelIndex { get; private set; }

    internal new static SendNodeDecoder<CFireSmoke> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nFlameModelIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CFireSmoke @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nFlameModelIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFlameFromAboveModelIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CFireSmoke @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nFlameFromAboveModelIndex = decoder(ref buffer);
            };
        }
        return CBaseFire.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CFish : CBaseAnimGraph
{
    internal CFish(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkSerializer "fish_pos_x"
    public float m_x { get; private set; }

    // MNetworkSerializer "fish_pos_y"
    public float m_y { get; private set; }

    // MNetworkSerializer "fish_pos_z"
    public float m_z { get; private set; }

    // MNetworkSerializer "angle_normalize_positive"
    // MNetworkBitCount "7"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "360.000000"
    // MNetworkEncodeFlags "1"
    public float m_angle { get; private set; }

    // MNetworkEncoder "coord"
    public Vector m_poolOrigin { get; private set; }

    public float m_waterLevel { get; private set; }

    internal new static SendNodeDecoder<CFish> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_x")
        {
            var decoder = CreateDecoder_fish_pos_x(field.FieldEncodingInfo);
            return (CFish @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_x = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_y")
        {
            var decoder = CreateDecoder_fish_pos_y(field.FieldEncodingInfo);
            return (CFish @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_y = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_z")
        {
            var decoder = CreateDecoder_fish_pos_z(field.FieldEncodingInfo);
            return (CFish @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_z = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_angle")
        {
            var decoder = CreateDecoder_angle_normalize_positive(field.FieldEncodingInfo);
            return (CFish @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_angle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_poolOrigin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CFish @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_poolOrigin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_waterLevel")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CFish @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_waterLevel = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CFists : CCSWeaponBase
{
    internal CFists(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bPlayingUninterruptableAct { get; private set; }

    // MNetworkChangeCallback "OnUninterruptChanged"
    public PlayerAnimEvent_t m_nUninterruptableActivity { get; private set; }

    internal new static SendNodeDecoder<CFists> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bPlayingUninterruptableAct")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CFists @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bPlayingUninterruptableAct = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nUninterruptableActivity")
        {
            var decoder = FieldDecode.CreateDecoder_enum<PlayerAnimEvent_t>(field.FieldEncodingInfo);
            return (CFists @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nUninterruptableActivity = decoder(ref buffer);
            };
        }
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CFlashbang : CBaseCSGrenade
{
    internal CFlashbang(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFlashbang> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCSGrenade.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CFogController : CBaseEntity
{
    internal CFogController(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public fogparams_t m_fog { get; private set; } = new();

    internal new static SendNodeDecoder<CFogController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_fog")
        {
            var innerDecoder = fogparams_t.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CFogController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_fog, path, ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CFootstepControl : CBaseTrigger
{
    internal CFootstepControl(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString m_source { get; private set; }

    public NetworkedString m_destination { get; private set; }

    internal new static SendNodeDecoder<CFootstepControl> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_source")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CFootstepControl @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_source = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_destination")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CFootstepControl @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_destination = decoder(ref buffer);
            };
        }
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CFuncBrush : CBaseModelEntity
{
    internal CFuncBrush(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFuncBrush> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CFuncConveyor : CBaseModelEntity
{
    internal CFuncConveyor(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Vector m_vecMoveDirEntitySpace { get; private set; }

    public float m_flTargetSpeed { get; private set; }

    public GameTick_t m_nTransitionStartTick { get; private set; } = new();

    public Int32 m_nTransitionDurationTicks { get; private set; }

    public float m_flTransitionStartSpeed { get; private set; }

    public NetworkedVector<CHandle<CBaseEntity>> m_hConveyorModels { get; private set; } = new NetworkedVector<CHandle<CBaseEntity>>();

    internal new static SendNodeDecoder<CFuncConveyor> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecMoveDirEntitySpace")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CFuncConveyor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecMoveDirEntitySpace = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTargetSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CFuncConveyor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flTargetSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTransitionStartTick")
        {
            var decoder = FieldDecode.CreateDecoder_GameTick_t(field.FieldEncodingInfo);
            return (CFuncConveyor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nTransitionStartTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTransitionDurationTicks")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CFuncConveyor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nTransitionDurationTicks = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTransitionStartSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CFuncConveyor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flTransitionStartSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hConveyorModels")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CFuncConveyor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_hConveyorModels.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_hConveyorModels.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_hConveyorModels[index] = element;
                }
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CFuncElectrifiedVolume : CFuncBrush
{
    internal CFuncElectrifiedVolume(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString m_EffectName { get; private set; }

    internal new static SendNodeDecoder<CFuncElectrifiedVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_EffectName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CFuncElectrifiedVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_EffectName = decoder(ref buffer);
            };
        }
        return CFuncBrush.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CFuncLadder : CBaseModelEntity
{
    internal CFuncLadder(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkEncoder "coord"
    public Vector m_vecLadderDir { get; private set; }

    // MNetworkEncoder "coord"
    public Vector m_vecPlayerMountPositionTop { get; private set; }

    // MNetworkEncoder "coord"
    public Vector m_vecPlayerMountPositionBottom { get; private set; }

    public float m_flAutoRideSpeed { get; private set; }

    public bool m_bFakeLadder { get; private set; }

    internal new static SendNodeDecoder<CFuncLadder> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecLadderDir")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CFuncLadder @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecLadderDir = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecPlayerMountPositionTop")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CFuncLadder @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecPlayerMountPositionTop = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecPlayerMountPositionBottom")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CFuncLadder @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecPlayerMountPositionBottom = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAutoRideSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CFuncLadder @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flAutoRideSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFakeLadder")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CFuncLadder @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bFakeLadder = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CFuncMonitor : CFuncBrush
{
    internal CFuncMonitor(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString m_targetCamera { get; private set; }

    public Int32 m_nResolutionEnum { get; private set; }

    public bool m_bRenderShadows { get; private set; }

    public bool m_bUseUniqueColorTarget { get; private set; }

    public NetworkedString m_brushModelName { get; private set; }

    public CHandle<CBaseEntity> m_hTargetCamera { get; private set; }

    public bool m_bEnabled { get; private set; }

    public bool m_bDraw3DSkybox { get; private set; }

    internal new static SendNodeDecoder<CFuncMonitor> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_targetCamera")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_targetCamera = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nResolutionEnum")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nResolutionEnum = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRenderShadows")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bRenderShadows = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseUniqueColorTarget")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bUseUniqueColorTarget = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_brushModelName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_brushModelName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTargetCamera")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hTargetCamera = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDraw3DSkybox")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CFuncMonitor @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bDraw3DSkybox = decoder(ref buffer);
            };
        }
        return CFuncBrush.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CFuncMoveLinear : CBaseToggle
{
    internal CFuncMoveLinear(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFuncMoveLinear> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseToggle.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CFuncRotating : CBaseModelEntity
{
    internal CFuncRotating(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFuncRotating> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CFuncTrackTrain : CBaseModelEntity
{
    internal CFuncTrackTrain(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFuncTrackTrain> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CFuncWater : CBaseModelEntity
{
    internal CFuncWater(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CFuncWater> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CGameRules
{
    internal static SendNodeDecoder<CGameRules> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CGameRulesProxy : CBaseEntity
{
    internal CGameRulesProxy(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CGameRulesProxy> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CGameSceneNode
{
    // MNetworkSerializer "gameSceneNode"
    // MNetworkChangeCallback "gameSceneNodeHierarchyParentChanged"
    // MNetworkPriority "32"
    // MNetworkVarEmbeddedFieldOffsetDelta "8"
    public CGameSceneNodeHandle m_hParent { get; private set; } = new();

    // MNetworkPriority "32"
    // MNetworkUserGroup "Origin"
    // MNetworkChangeCallback "gameSceneNodeLocalOriginChanged"
    public CNetworkOriginCellCoordQuantizedVector m_vecOrigin { get; private set; } = new();

    // MNetworkEncoder "qangle_precise"
    // MNetworkPriority "32"
    // MNetworkSerializer "gameSceneNodeStepSimulationAnglesSerializer"
    // MNetworkChangeCallback "gameSceneNodeLocalAnglesChanged"
    public QAngle m_angRotation { get; private set; }

    // MNetworkChangeCallback "gameSceneNodeLocalScaleChanged"
    // MNetworkPriority "32"
    public float m_flScale { get; private set; }

    public CUtlStringToken m_name { get; private set; }

    // MNetworkChangeCallback "gameSceneNodeHierarchyAttachmentChanged"
    public CUtlStringToken m_hierarchyAttachName { get; private set; }

    internal static SendNodeDecoder<CGameSceneNode> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hParent")
        {
            var decoder = CreateDecoder_gameSceneNode(field.FieldEncodingInfo);
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hParent = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_vecOrigin")
        {
            var innerDecoder = CNetworkOriginCellCoordQuantizedVector.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_vecOrigin, path, ref buffer);
            };
        }
        if (field.VarName == "m_angRotation")
        {
            var decoder = CreateDecoder_gameSceneNodeStepSimulationAnglesSerializer(field.FieldEncodingInfo);
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_angRotation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_name")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_name = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hierarchyAttachName")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CGameSceneNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hierarchyAttachName = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CGlowProperty
{
    // MNetworkChangeCallback "OnGlowTypeChanged"
    public Int32 m_iGlowType { get; private set; }

    public Int32 m_iGlowTeam { get; private set; }

    public Int32 m_nGlowRange { get; private set; }

    public Int32 m_nGlowRangeMin { get; private set; }

    // MNetworkChangeCallback "OnGlowColorChanged"
    public Color m_glowColorOverride { get; private set; }

    public bool m_bFlashing { get; private set; }

    public float m_flGlowTime { get; private set; }

    public float m_flGlowStartTime { get; private set; }

    public bool m_bEligibleForScreenHighlight { get; private set; }

    internal static SendNodeDecoder<CGlowProperty> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iGlowType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iGlowType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iGlowTeam")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iGlowTeam = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nGlowRange")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nGlowRange = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nGlowRangeMin")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nGlowRangeMin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_glowColorOverride")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_glowColorOverride = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFlashing")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bFlashing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGlowTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flGlowTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGlowStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flGlowStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEligibleForScreenHighlight")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CGlowProperty @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bEligibleForScreenHighlight = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CGradientFog : CBaseEntity
{
    internal CGradientFog(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CStrongHandle<InfoForResourceTypeCTextureBase> m_hGradientFogTexture { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float m_flFogStartDistance { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float m_flFogEndDistance { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public bool m_bHeightFogEnabled { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float m_flFogStartHeight { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float m_flFogEndHeight { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float m_flFarZ { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float m_flFogMaxOpacity { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float m_flFogFalloffExponent { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float m_flFogVerticalExponent { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public Color m_fogColor { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float m_flFogStrength { get; private set; }

    // MNetworkChangeCallback "FogStateChanged"
    public float m_flFadeTime { get; private set; }

    public bool m_bStartDisabled { get; private set; }

    public bool m_bIsEnabled { get; private set; }

    internal new static SendNodeDecoder<CGradientFog> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hGradientFogTexture")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hGradientFogTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogStartDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogStartDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogEndDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogEndDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHeightFogEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bHeightFogEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogStartHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogStartHeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogEndHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogEndHeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFarZ")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFarZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMaxOpacity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogMaxOpacity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogFalloffExponent")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogFalloffExponent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogVerticalExponent")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogVerticalExponent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fogColor")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fogColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bStartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CGradientFog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsEnabled = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CHandleTest : CBaseEntity
{
    internal CHandleTest(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CBaseEntity> m_Handle { get; private set; }

    public bool m_bSendHandle { get; private set; }

    internal new static SendNodeDecoder<CHandleTest> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Handle")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CHandleTest @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_Handle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bSendHandle")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CHandleTest @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bSendHandle = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CHEGrenade : CBaseCSGrenade
{
    internal CHEGrenade(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CHEGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCSGrenade.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CHitboxComponent : CEntityComponent
{
    public UInt32[] m_bvDisabledHitGroups { get; private set; } = Array.Empty<UInt32>();

    internal new static SendNodeDecoder<CHitboxComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bvDisabledHitGroups")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CHitboxComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_bvDisabledHitGroups.Length == 0) @this.m_bvDisabledHitGroups = new UInt32[fixedArraySize];
                @this.m_bvDisabledHitGroups[path[1]] = decoder(ref buffer);
            };
        }
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CHostage : CHostageExpresserShim
{
    internal CHostage(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public EntitySpottedState_t m_entitySpottedState { get; private set; } = new();

    public Vector m_vel { get; private set; }

    public bool m_isRescued { get; private set; }

    public bool m_jumpedThisFrame { get; private set; }

    public Int32 m_nHostageState { get; private set; }

    public CHandle<CBaseEntity> m_leader { get; private set; }

    public CountdownTimer m_reuseTimer { get; private set; } = new();

    public bool m_bHandsHaveBeenCut { get; private set; }

    public CHandle<CCSPlayerPawn> m_hHostageGrabber { get; private set; }

    public GameTime_t m_flRescueStartTime { get; private set; } = new();

    public GameTime_t m_flGrabSuccessTime { get; private set; } = new();

    public GameTime_t m_flDropStartTime { get; private set; } = new();

    internal new static SendNodeDecoder<CHostage> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_entitySpottedState")
        {
            var innerDecoder = EntitySpottedState_t.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_entitySpottedState, path, ref buffer);
            };
        }
        if (field.VarName == "m_vel")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_isRescued")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_isRescued = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_jumpedThisFrame")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_jumpedThisFrame = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHostageState")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nHostageState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_leader")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_leader = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_reuseTimer")
        {
            var innerDecoder = CountdownTimer.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_reuseTimer, path, ref buffer);
            };
        }
        if (field.VarName == "m_bHandsHaveBeenCut")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bHandsHaveBeenCut = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hHostageGrabber")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hHostageGrabber = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRescueStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flRescueStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGrabSuccessTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flGrabSuccessTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDropStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CHostage @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDropStartTime = decoder(ref buffer);
            };
        }
        return CHostageExpresserShim.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CHostageCarriableProp : CBaseAnimGraph
{
    internal CHostageCarriableProp(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CHostageCarriableProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CHostageExpresserShim : CBaseCombatCharacter
{
    internal CHostageExpresserShim(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CHostageExpresserShim> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCombatCharacter.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CHostageRescueZone : CHostageRescueZoneShim
{
    internal CHostageRescueZone(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CHostageRescueZone> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CHostageRescueZoneShim.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CHostageRescueZoneShim : CBaseTrigger
{
    internal CHostageRescueZoneShim(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CHostageRescueZoneShim> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CIncendiaryGrenade : CMolotovGrenade
{
    internal CIncendiaryGrenade(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CIncendiaryGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CMolotovGrenade.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CInferno : CBaseModelEntity
{
    internal CInferno(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32[] m_fireXDelta { get; private set; } = Array.Empty<Int32>();

    public Int32[] m_fireYDelta { get; private set; } = Array.Empty<Int32>();

    public Int32[] m_fireZDelta { get; private set; } = Array.Empty<Int32>();

    public Int32[] m_fireParentXDelta { get; private set; } = Array.Empty<Int32>();

    public Int32[] m_fireParentYDelta { get; private set; } = Array.Empty<Int32>();

    public Int32[] m_fireParentZDelta { get; private set; } = Array.Empty<Int32>();

    public bool[] m_bFireIsBurning { get; private set; } = Array.Empty<bool>();

    public Vector[] m_BurnNormal { get; private set; } = Array.Empty<Vector>();

    public Int32 m_fireCount { get; private set; }

    public Int32 m_nInfernoType { get; private set; }

    public Int32 m_nFireEffectTickBegin { get; private set; }

    public float m_nFireLifetime { get; private set; }

    public bool m_bInPostEffectTime { get; private set; }

    internal new static SendNodeDecoder<CInferno> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_fireXDelta")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_fireXDelta.Length == 0) @this.m_fireXDelta = new Int32[fixedArraySize];
                @this.m_fireXDelta[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fireYDelta")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_fireYDelta.Length == 0) @this.m_fireYDelta = new Int32[fixedArraySize];
                @this.m_fireYDelta[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fireZDelta")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_fireZDelta.Length == 0) @this.m_fireZDelta = new Int32[fixedArraySize];
                @this.m_fireZDelta[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fireParentXDelta")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_fireParentXDelta.Length == 0) @this.m_fireParentXDelta = new Int32[fixedArraySize];
                @this.m_fireParentXDelta[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fireParentYDelta")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_fireParentYDelta.Length == 0) @this.m_fireParentYDelta = new Int32[fixedArraySize];
                @this.m_fireParentYDelta[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fireParentZDelta")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_fireParentZDelta.Length == 0) @this.m_fireParentZDelta = new Int32[fixedArraySize];
                @this.m_fireParentZDelta[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFireIsBurning")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_bFireIsBurning.Length == 0) @this.m_bFireIsBurning = new bool[fixedArraySize];
                @this.m_bFireIsBurning[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_BurnNormal")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_BurnNormal.Length == 0) @this.m_BurnNormal = new Vector[fixedArraySize];
                @this.m_BurnNormal[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fireCount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fireCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nInfernoType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nInfernoType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFireEffectTickBegin")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nFireEffectTickBegin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFireLifetime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nFireLifetime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInPostEffectTime")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CInferno @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bInPostEffectTime = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CInfoInstructorHintHostageRescueZone : CPointEntity
{
    internal CInfoInstructorHintHostageRescueZone(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CInfoInstructorHintHostageRescueZone> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPointEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CInfoLadderDismount : CBaseEntity
{
    internal CInfoLadderDismount(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CInfoLadderDismount> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CInfoOffscreenPanoramaTexture : CPointEntity
{
    internal CInfoOffscreenPanoramaTexture(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bDisabled { get; private set; }

    public Int32 m_nResolutionX { get; private set; }

    public Int32 m_nResolutionY { get; private set; }

    public NetworkedString m_szLayoutFileName { get; private set; }

    public NetworkedString m_RenderAttrName { get; private set; }

    public NetworkedVector<CHandle<CBaseModelEntity>> m_TargetEntities { get; private set; } = new NetworkedVector<CHandle<CBaseModelEntity>>();

    public Int32 m_nTargetChangeCount { get; private set; }

    public NetworkedVector<NetworkedString> m_vecCSSClasses { get; private set; } = new NetworkedVector<NetworkedString>();

    internal new static SendNodeDecoder<CInfoOffscreenPanoramaTexture> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nResolutionX")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nResolutionX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nResolutionY")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nResolutionY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szLayoutFileName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szLayoutFileName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_RenderAttrName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_RenderAttrName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_TargetEntities")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseModelEntity>(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_TargetEntities.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_TargetEntities.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_TargetEntities[index] = element;
                }
            };
        }
        if (field.VarName == "m_nTargetChangeCount")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nTargetChangeCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecCSSClasses")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CInfoOffscreenPanoramaTexture @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_vecCSSClasses.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_vecCSSClasses.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_vecCSSClasses[index] = element;
                }
            };
        }
        return CPointEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CInfoVisibilityBox : CBaseEntity
{
    internal CInfoVisibilityBox(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 m_nMode { get; private set; }

    public Vector m_vBoxSize { get; private set; }

    public bool m_bEnabled { get; private set; }

    internal new static SendNodeDecoder<CInfoVisibilityBox> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nMode")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CInfoVisibilityBox @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vBoxSize")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CInfoVisibilityBox @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vBoxSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CInfoVisibilityBox @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bEnabled = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CInfoWorldLayer : CBaseEntity
{
    internal CInfoWorldLayer(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString m_worldName { get; private set; }

    public NetworkedString m_layerName { get; private set; }

    public bool m_bWorldLayerVisible { get; private set; }

    public bool m_bEntitiesSpawned { get; private set; }

    internal new static SendNodeDecoder<CInfoWorldLayer> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_worldName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CInfoWorldLayer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_worldName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_layerName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CInfoWorldLayer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_layerName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bWorldLayerVisible")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CInfoWorldLayer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bWorldLayerVisible = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEntitiesSpawned")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CInfoWorldLayer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bEntitiesSpawned = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CItem : CBaseAnimGraph
{
    internal CItem(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CItem> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CItem_Healthshot : CWeaponBaseItem
{
    internal CItem_Healthshot(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CItem_Healthshot> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CWeaponBaseItem.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CItemDogtags : CItem
{
    internal CItemDogtags(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CCSPlayerPawn> m_OwningPlayer { get; private set; }

    public CHandle<CCSPlayerPawn> m_KillingPlayer { get; private set; }

    internal new static SendNodeDecoder<CItemDogtags> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_OwningPlayer")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CItemDogtags @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_OwningPlayer = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_KillingPlayer")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CItemDogtags @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_KillingPlayer = decoder(ref buffer);
            };
        }
        return CItem.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CKnife : CCSWeaponBase
{
    internal CKnife(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CKnife> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CLightComponent : CEntityComponent
{
    internal static SendNodeDecoder<CLightComponent> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CLightComponent> factory)
    {
        if (serializerKey.Name == "CLightComponent")
        {
            factory = () => new CLightComponent();
            return decoderSet.GetDecoder<CLightComponent>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CLightComponent: {serializerKey}");
    }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Color m_Color { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Color m_SecondaryColor { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flBrightness { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flBrightnessScale { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flBrightnessMult { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flRange { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flFalloff { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flAttenuation0 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flAttenuation1 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flAttenuation2 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flTheta { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flPhi { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public CStrongHandle<InfoForResourceTypeCTextureBase> m_hLightCookie { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 m_nCascades { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 m_nCastShadows { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 m_nShadowWidth { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 m_nShadowHeight { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public bool m_bRenderDiffuse { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 m_nRenderSpecular { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public bool m_bRenderTransmissive { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flOrthoLightWidth { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flOrthoLightHeight { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 m_nStyle { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public NetworkedString m_Pattern { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 m_nCascadeRenderStaticObjects { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flShadowCascadeCrossFade { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flShadowCascadeDistanceFade { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flShadowCascadeDistance0 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flShadowCascadeDistance1 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flShadowCascadeDistance2 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flShadowCascadeDistance3 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 m_nShadowCascadeResolution0 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 m_nShadowCascadeResolution1 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 m_nShadowCascadeResolution2 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 m_nShadowCascadeResolution3 { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    // MNetworkAlias "m_bUsesIndexedBakedLighting"
    public bool m_bUsesBakedShadowing { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 m_nShadowPriority { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public Int32 m_nBakedShadowIndex { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public bool m_bRenderToCubemaps { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public NetworkedString m_LightGroups { get; private set; }

    public Int32 m_nDirectLight { get; private set; }

    public Int32 m_nIndirectLight { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flFadeMinDist { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flFadeMaxDist { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flShadowFadeMinDist { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flShadowFadeMaxDist { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public bool m_bEnabled { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public bool m_bFlicker { get; private set; }

    public bool m_bPrecomputedFieldsValid { get; private set; }

    public Vector m_vPrecomputedBoundsMins { get; private set; }

    public Vector m_vPrecomputedBoundsMaxs { get; private set; }

    public Vector m_vPrecomputedOBBOrigin { get; private set; }

    public QAngle m_vPrecomputedOBBAngles { get; private set; }

    public Vector m_vPrecomputedOBBExtent { get; private set; }

    public float m_flPrecomputedMaxRange { get; private set; }

    public Int32 m_nFogLightingMode { get; private set; }

    public float m_flFogContributionStength { get; private set; }

    public float m_flNearClipPlane { get; private set; }

    public Color m_SkyColor { get; private set; }

    public float m_flSkyIntensity { get; private set; }

    public Color m_SkyAmbientBounce { get; private set; }

    public bool m_bUseSecondaryColor { get; private set; }

    // MNetworkChangeCallback "MixedShadowsChanged"
    public bool m_bMixedShadows { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public GameTime_t m_flLightStyleStartTime { get; private set; } = new();

    public float m_flCapsuleLength { get; private set; }

    // MNetworkChangeCallback "LightRenderingChanged"
    public float m_flMinRoughness { get; private set; }

    internal new static SendNodeDecoder<CLightComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Color")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_Color = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SecondaryColor")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_SecondaryColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flBrightness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightnessScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flBrightnessScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightnessMult")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flBrightnessMult = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRange")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flRange = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFalloff")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFalloff = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAttenuation0")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flAttenuation0 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAttenuation1")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flAttenuation1 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAttenuation2")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flAttenuation2 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTheta")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flTheta = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPhi")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flPhi = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLightCookie")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hLightCookie = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCascades")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nCascades = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCastShadows")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nCastShadows = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowWidth")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nShadowWidth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowHeight")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nShadowHeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRenderDiffuse")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bRenderDiffuse = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRenderSpecular")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nRenderSpecular = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRenderTransmissive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bRenderTransmissive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flOrthoLightWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flOrthoLightWidth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flOrthoLightHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flOrthoLightHeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nStyle")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nStyle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Pattern")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_Pattern = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCascadeRenderStaticObjects")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nCascadeRenderStaticObjects = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowCascadeCrossFade")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flShadowCascadeCrossFade = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowCascadeDistanceFade")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flShadowCascadeDistanceFade = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowCascadeDistance0")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flShadowCascadeDistance0 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowCascadeDistance1")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flShadowCascadeDistance1 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowCascadeDistance2")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flShadowCascadeDistance2 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowCascadeDistance3")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flShadowCascadeDistance3 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowCascadeResolution0")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nShadowCascadeResolution0 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowCascadeResolution1")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nShadowCascadeResolution1 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowCascadeResolution2")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nShadowCascadeResolution2 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowCascadeResolution3")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nShadowCascadeResolution3 = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUsesIndexedBakedLighting")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bUsesBakedShadowing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nShadowPriority")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nShadowPriority = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBakedShadowIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nBakedShadowIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRenderToCubemaps")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bRenderToCubemaps = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_LightGroups")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_LightGroups = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nDirectLight")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nDirectLight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nIndirectLight")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nIndirectLight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeMinDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeMinDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeMaxDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeMaxDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowFadeMinDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flShadowFadeMinDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flShadowFadeMaxDist")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flShadowFadeMaxDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFlicker")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bFlicker = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPrecomputedFieldsValid")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bPrecomputedFieldsValid = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedBoundsMins")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vPrecomputedBoundsMins = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedBoundsMaxs")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vPrecomputedBoundsMaxs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBOrigin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vPrecomputedOBBOrigin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vPrecomputedOBBAngles = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPrecomputedOBBExtent")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vPrecomputedOBBExtent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPrecomputedMaxRange")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flPrecomputedMaxRange = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nFogLightingMode")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nFogLightingMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogContributionStength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogContributionStength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flNearClipPlane")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flNearClipPlane = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SkyColor")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_SkyColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSkyIntensity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flSkyIntensity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SkyAmbientBounce")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_SkyAmbientBounce = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseSecondaryColor")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bUseSecondaryColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMixedShadows")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bMixedShadows = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flLightStyleStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flLightStyleStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCapsuleLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flCapsuleLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMinRoughness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightComponent @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flMinRoughness = decoder(ref buffer);
            };
        }
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CLightDirectionalEntity : CLightEntity
{
    internal CLightDirectionalEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CLightDirectionalEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CLightEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CLightEntity : CBaseModelEntity
{
    internal CLightEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkUserGroup "CLightComponent"
    // MNetworkAlias "CLightComponent"
    // MNetworkTypeAlias "CLightComponent"
    public CLightComponent? m_CLightComponent { get; private set; }

    internal new static SendNodeDecoder<CLightEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "CLightComponent")
        {
            Debug.Assert(field.FieldSerializerKey.HasValue);
            var serializerKey = field.FieldSerializerKey.Value;
            var innerDecoder = CLightComponent.CreateDowncastDecoder(serializerKey, decoderSet, out var factory);
            return (CLightEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    @this.m_CLightComponent = buffer.ReadOneBit() ? factory() : null;
                }
                else
                {
                    var inner = @this.m_CLightComponent ??= factory();
                    innerDecoder(inner, path[1..], ref buffer);
                }
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CLightEnvironmentEntity : CLightDirectionalEntity
{
    internal CLightEnvironmentEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CLightEnvironmentEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CLightDirectionalEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CLightGlow : CBaseModelEntity
{
    internal CLightGlow(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public UInt32 m_nHorizontalSize { get; private set; }

    public UInt32 m_nVerticalSize { get; private set; }

    public UInt32 m_nMinDist { get; private set; }

    public UInt32 m_nMaxDist { get; private set; }

    public UInt32 m_nOuterMaxDist { get; private set; }

    // MNetworkBitCount "6"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "64.000000"
    // MNetworkEncodeFlags "2"
    public float m_flGlowProxySize { get; private set; }

    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "100.000000"
    public float m_flHDRColorScale { get; private set; }

    internal new static SendNodeDecoder<CLightGlow> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nHorizontalSize")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nHorizontalSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nVerticalSize")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nVerticalSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMinDist")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nMinDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMaxDist")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nMaxDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nOuterMaxDist")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nOuterMaxDist = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGlowProxySize")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flGlowProxySize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHDRColorScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CLightGlow @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flHDRColorScale = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CLightOrthoEntity : CLightEntity
{
    internal CLightOrthoEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CLightOrthoEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CLightEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CLightSpotEntity : CLightEntity
{
    internal CLightSpotEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CLightSpotEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CLightEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CMapVetoPickController : CBaseEntity
{
    internal CMapVetoPickController(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 m_nDraftType { get; private set; }

    public Int32 m_nTeamWinningCoinToss { get; private set; }

    public Int32[] m_nTeamWithFirstChoice { get; private set; } = Array.Empty<Int32>();

    public Int32[] m_nVoteMapIdsList { get; private set; } = Array.Empty<Int32>();

    public Int32[] m_nAccountIDs { get; private set; } = Array.Empty<Int32>();

    public Int32[] m_nMapId0 { get; private set; } = Array.Empty<Int32>();

    public Int32[] m_nMapId1 { get; private set; } = Array.Empty<Int32>();

    public Int32[] m_nMapId2 { get; private set; } = Array.Empty<Int32>();

    public Int32[] m_nMapId3 { get; private set; } = Array.Empty<Int32>();

    public Int32[] m_nMapId4 { get; private set; } = Array.Empty<Int32>();

    public Int32[] m_nMapId5 { get; private set; } = Array.Empty<Int32>();

    public Int32[] m_nStartingSide0 { get; private set; } = Array.Empty<Int32>();

    public Int32 m_nCurrentPhase { get; private set; }

    public Int32 m_nPhaseStartTick { get; private set; }

    public Int32 m_nPhaseDurationTicks { get; private set; }

    internal new static SendNodeDecoder<CMapVetoPickController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nDraftType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nDraftType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTeamWinningCoinToss")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nTeamWinningCoinToss = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTeamWithFirstChoice")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_nTeamWithFirstChoice.Length == 0) @this.m_nTeamWithFirstChoice = new Int32[fixedArraySize];
                @this.m_nTeamWithFirstChoice[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nVoteMapIdsList")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_nVoteMapIdsList.Length == 0) @this.m_nVoteMapIdsList = new Int32[fixedArraySize];
                @this.m_nVoteMapIdsList[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nAccountIDs")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_nAccountIDs.Length == 0) @this.m_nAccountIDs = new Int32[fixedArraySize];
                @this.m_nAccountIDs[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMapId0")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_nMapId0.Length == 0) @this.m_nMapId0 = new Int32[fixedArraySize];
                @this.m_nMapId0[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMapId1")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_nMapId1.Length == 0) @this.m_nMapId1 = new Int32[fixedArraySize];
                @this.m_nMapId1[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMapId2")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_nMapId2.Length == 0) @this.m_nMapId2 = new Int32[fixedArraySize];
                @this.m_nMapId2[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMapId3")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_nMapId3.Length == 0) @this.m_nMapId3 = new Int32[fixedArraySize];
                @this.m_nMapId3[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMapId4")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_nMapId4.Length == 0) @this.m_nMapId4 = new Int32[fixedArraySize];
                @this.m_nMapId4[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMapId5")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_nMapId5.Length == 0) @this.m_nMapId5 = new Int32[fixedArraySize];
                @this.m_nMapId5[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nStartingSide0")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_nStartingSide0.Length == 0) @this.m_nStartingSide0 = new Int32[fixedArraySize];
                @this.m_nStartingSide0[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCurrentPhase")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nCurrentPhase = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPhaseStartTick")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nPhaseStartTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPhaseDurationTicks")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CMapVetoPickController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nPhaseDurationTicks = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CMelee : CCSWeaponBase
{
    internal CMelee(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public GameTime_t m_flThrowAt { get; private set; } = new();

    internal new static SendNodeDecoder<CMelee> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flThrowAt")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CMelee @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flThrowAt = decoder(ref buffer);
            };
        }
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CModelPointEntity : CBaseModelEntity
{
    internal CModelPointEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CModelPointEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CModelState
{
    // MNetworkChangeCallback "skeletonModelChanged"
    public CStrongHandle<InfoForResourceTypeCModel> m_hModel { get; private set; }

    public bool m_bClientClothCreationSuppressed { get; private set; }

    // MNetworkChangeCallback "skeletonMeshGroupMaskChanged"
    public UInt64 m_MeshGroupMask { get; private set; }

    // MNetworkChangeCallback "skeletonMotionTypeChanged"
    public sbyte m_nIdealMotionType { get; private set; }

    internal static SendNodeDecoder<CModelState> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hModel")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCModel>(field.FieldEncodingInfo);
            return (CModelState @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hModel = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bClientClothCreationSuppressed")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CModelState @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bClientClothCreationSuppressed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_MeshGroupMask")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CModelState @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_MeshGroupMask = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nIdealMotionType")
        {
            var decoder = FieldDecode.CreateDecoder_sbyte(field.FieldEncodingInfo);
            return (CModelState @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nIdealMotionType = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CMolotovGrenade : CBaseCSGrenade
{
    internal CMolotovGrenade(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CMolotovGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCSGrenade.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CMolotovProjectile : CBaseCSGrenadeProjectile
{
    internal CMolotovProjectile(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bIsIncGrenade { get; private set; }

    internal new static SendNodeDecoder<CMolotovProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bIsIncGrenade")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CMolotovProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsIncGrenade = decoder(ref buffer);
            };
        }
        return CBaseCSGrenadeProjectile.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CMultiplayRules : CGameRules
{
    internal new static SendNodeDecoder<CMultiplayRules> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CGameRules.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CNetworkedSequenceOperation
{
    // MNetworkSerializer "minusone"
    // MNetworkChangeCallback "sequenceOpSequenceChanged"
    // MNetworkPriority "32"
    public HSequence m_hSequence { get; private set; } = new();

    // MNetworkBitCount "15"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1.000000"
    // MNetworkEncodeFlags "8"
    // MNetworkPriority "32"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkUserGroup "m_flCycle"
    public float m_flPrevCycle { get; private set; }

    // MNetworkBitCount "15"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1.000000"
    // MNetworkEncodeFlags "8"
    // MNetworkPriority "32"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkUserGroup "m_flCycle"
    // MNetworkChangeCallback "sequenceOpCycleChanged"
    public float m_flCycle { get; private set; }

    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1.000000"
    // MNetworkEncodeFlags "0"
    public float m_flWeight { get; private set; }

    internal static SendNodeDecoder<CNetworkedSequenceOperation> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hSequence")
        {
            var decoder = CreateDecoder_minusone(field.FieldEncodingInfo);
            return (CNetworkedSequenceOperation @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hSequence = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPrevCycle")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkedSequenceOperation @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flPrevCycle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCycle")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkedSequenceOperation @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flCycle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flWeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkedSequenceOperation @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flWeight = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CNetworkOriginCellCoordQuantizedVector
{
    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority "31"
    // MNetworkSerializer "cellx"
    public UInt16 m_cellX { get; private set; }

    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority "31"
    // MNetworkSerializer "celly"
    public UInt16 m_cellY { get; private set; }

    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority "31"
    // MNetworkSerializer "cellz"
    public UInt16 m_cellZ { get; private set; }

    public UInt16 m_nOutsideWorld { get; private set; }

    // MNetworkBitCount "15"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1024.000000"
    // MNetworkEncodeFlags "1"
    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority "31"
    // MNetworkSerializer "posx"
    public float m_vecX { get; private set; }

    // MNetworkBitCount "15"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1024.000000"
    // MNetworkEncodeFlags "1"
    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority "31"
    // MNetworkSerializer "posy"
    public float m_vecY { get; private set; }

    // MNetworkBitCount "15"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1024.000000"
    // MNetworkEncodeFlags "1"
    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority "31"
    // MNetworkSerializer "posz"
    public float m_vecZ { get; private set; }

    internal static SendNodeDecoder<CNetworkOriginCellCoordQuantizedVector> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_cellX")
        {
            var decoder = CreateDecoder_cellx(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_cellX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_cellY")
        {
            var decoder = CreateDecoder_celly(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_cellY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_cellZ")
        {
            var decoder = CreateDecoder_cellz(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_cellZ = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nOutsideWorld")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nOutsideWorld = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecX")
        {
            var decoder = CreateDecoder_posx(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecY")
        {
            var decoder = CreateDecoder_posy(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecZ")
        {
            var decoder = CreateDecoder_posz(field.FieldEncodingInfo);
            return (CNetworkOriginCellCoordQuantizedVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecZ = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CNetworkVelocityVector
{
    // MNetworkBitCount "18"
    // MNetworkMinValue "-4096.000000"
    // MNetworkMaxValue "4096.000000"
    // MNetworkEncodeFlags "4"
    // MNetworkChangeCallback "CNetworkVelocityVector"
    public float m_vecX { get; private set; }

    // MNetworkBitCount "18"
    // MNetworkMinValue "-4096.000000"
    // MNetworkMaxValue "4096.000000"
    // MNetworkEncodeFlags "4"
    // MNetworkChangeCallback "CNetworkVelocityVector"
    public float m_vecY { get; private set; }

    // MNetworkBitCount "18"
    // MNetworkMinValue "-4096.000000"
    // MNetworkMaxValue "4096.000000"
    // MNetworkEncodeFlags "4"
    // MNetworkChangeCallback "CNetworkVelocityVector"
    public float m_vecZ { get; private set; }

    internal static SendNodeDecoder<CNetworkVelocityVector> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecX")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkVelocityVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecY")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkVelocityVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecZ")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkVelocityVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecZ = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CNetworkViewOffsetVector
{
    // MNetworkBitCount "10"
    // MNetworkMinValue "-64.000000"
    // MNetworkMaxValue "64.000000"
    // MNetworkEncodeFlags "4"
    // MNetworkChangeCallback "CNetworkViewOffsetVector"
    public float m_vecX { get; private set; }

    // MNetworkBitCount "10"
    // MNetworkMinValue "-64.000000"
    // MNetworkMaxValue "64.000000"
    // MNetworkEncodeFlags "4"
    // MNetworkChangeCallback "CNetworkViewOffsetVector"
    public float m_vecY { get; private set; }

    // MNetworkBitCount "20"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "128.000000"
    // MNetworkEncodeFlags "4"
    // MNetworkChangeCallback "CNetworkViewOffsetVector"
    public float m_vecZ { get; private set; }

    internal static SendNodeDecoder<CNetworkViewOffsetVector> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecX")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkViewOffsetVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecX = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecY")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkViewOffsetVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecY = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecZ")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CNetworkViewOffsetVector @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecZ = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class COmniLight : CBarnLight
{
    internal COmniLight(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "RenderingChanged"
    public float m_flInnerAngle { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public float m_flOuterAngle { get; private set; }

    // MNetworkChangeCallback "RenderingChanged"
    public bool m_bShowLight { get; private set; }

    internal new static SendNodeDecoder<COmniLight> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flInnerAngle")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (COmniLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flInnerAngle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flOuterAngle")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (COmniLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flOuterAngle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bShowLight")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (COmniLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bShowLight = decoder(ref buffer);
            };
        }
        return CBarnLight.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CountdownTimer
{
    public float m_duration { get; private set; }

    public GameTime_t m_timestamp { get; private set; } = new();

    public float m_timescale { get; private set; }

    public WorldGroupId_t m_nWorldGroupId { get; private set; }

    internal static SendNodeDecoder<CountdownTimer> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_duration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CountdownTimer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_duration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_timestamp")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CountdownTimer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_timestamp = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_timescale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CountdownTimer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_timescale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nWorldGroupId")
        {
            var decoder = FieldDecode.CreateDecoder_WorldGroupId_t(field.FieldEncodingInfo);
            return (CountdownTimer @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nWorldGroupId = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CParticleSystem : CBaseModelEntity
{
    internal CParticleSystem(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public string m_szSnapshotFileName { get; private set; } = "";

    public bool m_bActive { get; private set; }

    public bool m_bFrozen { get; private set; }

    public float m_flFreezeTransitionDuration { get; private set; }

    public Int32 m_nStopType { get; private set; }

    public bool m_bAnimateDuringGameplayPause { get; private set; }

    public CStrongHandle<InfoForResourceTypeIParticleSystemDefinition> m_iEffectIndex { get; private set; }

    public GameTime_t m_flStartTime { get; private set; } = new();

    public float m_flPreSimTime { get; private set; }

    public Vector[] m_vServerControlPoints { get; private set; } = Array.Empty<Vector>();

    public byte[] m_iServerControlPointAssignments { get; private set; } = Array.Empty<byte>();

    public CHandle<CBaseEntity>[] m_hControlPointEnts { get; private set; } = Array.Empty<CHandle<CBaseEntity>>();

    public bool m_bNoSave { get; private set; }

    public bool m_bNoFreeze { get; private set; }

    public bool m_bNoRamp { get; private set; }

    internal new static SendNodeDecoder<CParticleSystem> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_szSnapshotFileName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szSnapshotFileName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bActive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFrozen")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bFrozen = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFreezeTransitionDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFreezeTransitionDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nStopType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nStopType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAnimateDuringGameplayPause")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bAnimateDuringGameplayPause = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEffectIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iEffectIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flPreSimTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flPreSimTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vServerControlPoints")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_vServerControlPoints.Length == 0) @this.m_vServerControlPoints = new Vector[fixedArraySize];
                @this.m_vServerControlPoints[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iServerControlPointAssignments")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_iServerControlPointAssignments.Length == 0) @this.m_iServerControlPointAssignments = new byte[fixedArraySize];
                @this.m_iServerControlPointAssignments[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hControlPointEnts")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_hControlPointEnts.Length == 0) @this.m_hControlPointEnts = new CHandle<CBaseEntity>[fixedArraySize];
                @this.m_hControlPointEnts[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoSave")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bNoSave = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoFreeze")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bNoFreeze = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoRamp")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CParticleSystem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bNoRamp = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPathParticleRope : CBaseEntity
{
    internal CPathParticleRope(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float m_flParticleSpacing { get; private set; }

    // MNetworkChangeCallback "parametersChanged"
    public float m_flSlack { get; private set; }

    // MNetworkChangeCallback "parametersChanged"
    public float m_flRadius { get; private set; }

    // MNetworkChangeCallback "parametersChanged"
    public Color m_ColorTint { get; private set; }

    // MNetworkChangeCallback "effectStateChanged"
    public Int32 m_nEffectState { get; private set; }

    public CStrongHandle<InfoForResourceTypeIParticleSystemDefinition> m_iEffectIndex { get; private set; }

    public NetworkedVector<Vector> m_PathNodes_Position { get; private set; } = new NetworkedVector<Vector>();

    public NetworkedVector<Vector> m_PathNodes_TangentIn { get; private set; } = new NetworkedVector<Vector>();

    public NetworkedVector<Vector> m_PathNodes_TangentOut { get; private set; } = new NetworkedVector<Vector>();

    public NetworkedVector<Vector> m_PathNodes_Color { get; private set; } = new NetworkedVector<Vector>();

    // MNetworkChangeCallback "pinStateChanged"
    public NetworkedVector<bool> m_PathNodes_PinEnabled { get; private set; } = new NetworkedVector<bool>();

    public NetworkedVector<float> m_PathNodes_RadiusScale { get; private set; } = new NetworkedVector<float>();

    internal new static SendNodeDecoder<CPathParticleRope> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flParticleSpacing")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flParticleSpacing = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSlack")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flSlack = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flRadius = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ColorTint")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_ColorTint = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEffectState")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nEffectState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEffectIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iEffectIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_PathNodes_Position")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_PathNodes_Position.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_PathNodes_Position.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_PathNodes_Position[index] = element;
                }
            };
        }
        if (field.VarName == "m_PathNodes_TangentIn")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_PathNodes_TangentIn.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_PathNodes_TangentIn.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_PathNodes_TangentIn[index] = element;
                }
            };
        }
        if (field.VarName == "m_PathNodes_TangentOut")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_PathNodes_TangentOut.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_PathNodes_TangentOut.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_PathNodes_TangentOut[index] = element;
                }
            };
        }
        if (field.VarName == "m_PathNodes_Color")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_PathNodes_Color.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_PathNodes_Color.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_PathNodes_Color[index] = element;
                }
            };
        }
        if (field.VarName == "m_PathNodes_PinEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_PathNodes_PinEnabled.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_PathNodes_PinEnabled.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_PathNodes_PinEnabled[index] = element;
                }
            };
        }
        if (field.VarName == "m_PathNodes_RadiusScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPathParticleRope @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_PathNodes_RadiusScale.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_PathNodes_RadiusScale.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_PathNodes_RadiusScale[index] = element;
                }
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPhysBox : CBreakable
{
    internal CPhysBox(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPhysBox> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBreakable.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPhysicsProp : CBreakableProp
{
    internal CPhysicsProp(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bAwake { get; private set; }

    internal new static SendNodeDecoder<CPhysicsProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bAwake")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPhysicsProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bAwake = decoder(ref buffer);
            };
        }
        return CBreakableProp.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPhysicsPropMultiplayer : CPhysicsProp
{
    internal CPhysicsPropMultiplayer(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPhysicsPropMultiplayer> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPhysicsProp.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPhysMagnet : CBaseAnimGraph
{
    internal CPhysMagnet(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPhysMagnet> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlantedC4 : CBaseAnimGraph
{
    internal CPlantedC4(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bBombTicking { get; private set; }

    public GameTime_t m_flC4Blow { get; private set; } = new();

    public Int32 m_nBombSite { get; private set; }

    public Int32 m_nSourceSoundscapeHash { get; private set; }

    public bool m_bCannotBeDefused { get; private set; }

    public EntitySpottedState_t m_entitySpottedState { get; private set; } = new();

    public bool m_bHasExploded { get; private set; }

    public float m_flTimerLength { get; private set; }

    public bool m_bBeingDefused { get; private set; }

    public float m_flDefuseLength { get; private set; }

    public GameTime_t m_flDefuseCountDown { get; private set; } = new();

    public bool m_bBombDefused { get; private set; }

    public CHandle<CCSPlayerPawn> m_hBombDefuser { get; private set; }

    public CHandle<CBaseEntity> m_hControlPanel { get; private set; }

    internal new static SendNodeDecoder<CPlantedC4> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bBombTicking")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bBombTicking = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flC4Blow")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flC4Blow = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBombSite")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nBombSite = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSourceSoundscapeHash")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nSourceSoundscapeHash = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCannotBeDefused")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bCannotBeDefused = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_entitySpottedState")
        {
            var innerDecoder = EntitySpottedState_t.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_entitySpottedState, path, ref buffer);
            };
        }
        if (field.VarName == "m_bHasExploded")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bHasExploded = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTimerLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flTimerLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bBeingDefused")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bBeingDefused = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDefuseLength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDefuseLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDefuseCountDown")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDefuseCountDown = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bBombDefused")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bBombDefused = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hBombDefuser")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hBombDefuser = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hControlPanel")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CPlantedC4 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hControlPanel = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_AutoaimServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_AutoaimServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_AutoaimServices> factory)
    {
        if (serializerKey.Name == "CPlayer_AutoaimServices")
        {
            factory = () => new CPlayer_AutoaimServices();
            return decoderSet.GetDecoder<CPlayer_AutoaimServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_AutoaimServices: {serializerKey}");
    }

    internal new static SendNodeDecoder<CPlayer_AutoaimServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_CameraServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_CameraServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_CameraServices> factory)
    {
        if (serializerKey.Name == "CPlayer_CameraServices")
        {
            factory = () => new CPlayer_CameraServices();
            return decoderSet.GetDecoder<CPlayer_CameraServices>(serializerKey);
        }
        else if (serializerKey.Name == "CCSPlayerBase_CameraServices")
        {
            factory = () => new CCSPlayerBase_CameraServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSPlayerBase_CameraServices>(serializerKey);
            return (CPlayer_CameraServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CCSPlayerBase_CameraServices)instance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CCSObserver_CameraServices")
        {
            factory = () => new CCSObserver_CameraServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSObserver_CameraServices>(serializerKey);
            return (CPlayer_CameraServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CCSObserver_CameraServices)instance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CCSPlayer_CameraServices")
        {
            factory = () => new CCSPlayer_CameraServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSPlayer_CameraServices>(serializerKey);
            return (CPlayer_CameraServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CCSPlayer_CameraServices)instance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_CameraServices: {serializerKey}");
    }

    // MNetworkEncoder "qangle_precise"
    public QAngle m_vecCsViewPunchAngle { get; private set; }

    public GameTick_t m_nCsViewPunchAngleTick { get; private set; } = new();

    public float m_flCsViewPunchAngleTickRatio { get; private set; }

    public fogplayerparams_t m_PlayerFog { get; private set; } = new();

    public CHandle<CColorCorrection> m_hColorCorrectionCtrl { get; private set; }

    public CHandle<CBaseEntity> m_hViewEntity { get; private set; }

    // MNetworkUserGroup "LocalPlayerAndObserversExclusive"
    public CHandle<CTonemapController2> m_hTonemapController { get; private set; }

    // MNetworkUserGroup "LocalPlayerAndObserversExclusive"
    public audioparams_t m_audio { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerAndObserversExclusive"
    public NetworkedVector<CHandle<CPostProcessingVolume>> m_PostProcessingVolumes { get; private set; } = new NetworkedVector<CHandle<CPostProcessingVolume>>();

    internal new static SendNodeDecoder<CPlayer_CameraServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vecCsViewPunchAngle")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecCsViewPunchAngle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCsViewPunchAngleTick")
        {
            var decoder = FieldDecode.CreateDecoder_GameTick_t(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nCsViewPunchAngleTick = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCsViewPunchAngleTickRatio")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flCsViewPunchAngleTickRatio = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_PlayerFog")
        {
            var innerDecoder = fogplayerparams_t.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_PlayerFog, path, ref buffer);
            };
        }
        if (field.VarName == "m_hColorCorrectionCtrl")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CColorCorrection>(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hColorCorrectionCtrl = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hViewEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hViewEntity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hTonemapController")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CTonemapController2>(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hTonemapController = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_audio")
        {
            var innerDecoder = audioparams_t.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_audio, path, ref buffer);
            };
        }
        if (field.VarName == "m_PostProcessingVolumes")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CPostProcessingVolume>(field.FieldEncodingInfo);
            return (CPlayer_CameraServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_PostProcessingVolumes.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_PostProcessingVolumes.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_PostProcessingVolumes[index] = element;
                }
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_FlashlightServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_FlashlightServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_FlashlightServices> factory)
    {
        if (serializerKey.Name == "CPlayer_FlashlightServices")
        {
            factory = () => new CPlayer_FlashlightServices();
            return decoderSet.GetDecoder<CPlayer_FlashlightServices>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_FlashlightServices: {serializerKey}");
    }

    internal new static SendNodeDecoder<CPlayer_FlashlightServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_ItemServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_ItemServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_ItemServices> factory)
    {
        if (serializerKey.Name == "CPlayer_ItemServices")
        {
            factory = () => new CPlayer_ItemServices();
            return decoderSet.GetDecoder<CPlayer_ItemServices>(serializerKey);
        }
        else if (serializerKey.Name == "CCSPlayer_ItemServices")
        {
            factory = () => new CCSPlayer_ItemServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSPlayer_ItemServices>(serializerKey);
            return (CPlayer_ItemServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CCSPlayer_ItemServices)instance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_ItemServices: {serializerKey}");
    }

    internal new static SendNodeDecoder<CPlayer_ItemServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_MovementServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_MovementServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_MovementServices> factory)
    {
        if (serializerKey.Name == "CPlayer_MovementServices")
        {
            factory = () => new CPlayer_MovementServices();
            return decoderSet.GetDecoder<CPlayer_MovementServices>(serializerKey);
        }
        else if (serializerKey.Name == "CCSObserver_MovementServices")
        {
            factory = () => new CCSObserver_MovementServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSObserver_MovementServices>(serializerKey);
            return (CPlayer_MovementServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CCSObserver_MovementServices)instance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CPlayer_MovementServices_Humanoid")
        {
            factory = () => new CPlayer_MovementServices_Humanoid();
            var childClassDecoder = decoderSet.GetDecoder<CPlayer_MovementServices_Humanoid>(serializerKey);
            return (CPlayer_MovementServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CPlayer_MovementServices_Humanoid)instance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CCSPlayer_MovementServices")
        {
            factory = () => new CCSPlayer_MovementServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSPlayer_MovementServices>(serializerKey);
            return (CPlayer_MovementServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CCSPlayer_MovementServices)instance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_MovementServices: {serializerKey}");
    }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public UInt64 m_nToggleButtonDownMask { get; private set; }

    // MNetworkBitCount "12"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "2048.000000"
    // MNetworkEncodeFlags "1"
    public float m_flMaxspeed { get; private set; }

    public float[] m_arrForceSubtickMoveWhen { get; private set; } = Array.Empty<float>();

    internal new static SendNodeDecoder<CPlayer_MovementServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nToggleButtonDownMask")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (CPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nToggleButtonDownMask = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMaxspeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flMaxspeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_arrForceSubtickMoveWhen")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayer_MovementServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_arrForceSubtickMoveWhen.Length == 0) @this.m_arrForceSubtickMoveWhen = new float[fixedArraySize];
                @this.m_arrForceSubtickMoveWhen[path[1]] = decoder(ref buffer);
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_MovementServices_Humanoid : CPlayer_MovementServices
{
    // MNetworkUserGroup "LocalPlayerExclusive"
    // MNetworkBitCount "17"
    // MNetworkMinValue "-4096.000000"
    // MNetworkMaxValue "4096.000000"
    // MNetworkEncodeFlags "4"
    public float m_flFallVelocity { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool m_bInCrouch { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public UInt32 m_nCrouchState { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public GameTime_t m_flCrouchTransitionStartTime { get; private set; } = new();

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool m_bDucked { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool m_bDucking { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public bool m_bInDuckJump { get; private set; }

    internal new static SendNodeDecoder<CPlayer_MovementServices_Humanoid> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flFallVelocity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFallVelocity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInCrouch")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bInCrouch = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCrouchState")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nCrouchState = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCrouchTransitionStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flCrouchTransitionStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDucked")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bDucked = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDucking")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bDucking = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bInDuckJump")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayer_MovementServices_Humanoid @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bInDuckJump = decoder(ref buffer);
            };
        }
        return CPlayer_MovementServices.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_ObserverServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_ObserverServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_ObserverServices> factory)
    {
        if (serializerKey.Name == "CPlayer_ObserverServices")
        {
            factory = () => new CPlayer_ObserverServices();
            return decoderSet.GetDecoder<CPlayer_ObserverServices>(serializerKey);
        }
        else if (serializerKey.Name == "CCSObserver_ObserverServices")
        {
            factory = () => new CCSObserver_ObserverServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSObserver_ObserverServices>(serializerKey);
            return (CPlayer_ObserverServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CCSObserver_ObserverServices)instance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_ObserverServices: {serializerKey}");
    }

    // MNetworkChangeCallback "OnObserverModeChanged"
    public byte m_iObserverMode { get; private set; }

    // MNetworkChangeCallback "OnObserverTargetChanged"
    public CHandle<CBaseEntity> m_hObserverTarget { get; private set; }

    internal new static SendNodeDecoder<CPlayer_ObserverServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iObserverMode")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CPlayer_ObserverServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iObserverMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hObserverTarget")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CPlayer_ObserverServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hObserverTarget = decoder(ref buffer);
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_UseServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_UseServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_UseServices> factory)
    {
        if (serializerKey.Name == "CPlayer_UseServices")
        {
            factory = () => new CPlayer_UseServices();
            return decoderSet.GetDecoder<CPlayer_UseServices>(serializerKey);
        }
        else if (serializerKey.Name == "CCSObserver_UseServices")
        {
            factory = () => new CCSObserver_UseServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSObserver_UseServices>(serializerKey);
            return (CPlayer_UseServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CCSObserver_UseServices)instance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CCSPlayer_UseServices")
        {
            factory = () => new CCSPlayer_UseServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSPlayer_UseServices>(serializerKey);
            return (CPlayer_UseServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CCSPlayer_UseServices)instance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_UseServices: {serializerKey}");
    }

    internal new static SendNodeDecoder<CPlayer_UseServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_ViewModelServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_ViewModelServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_ViewModelServices> factory)
    {
        if (serializerKey.Name == "CPlayer_ViewModelServices")
        {
            factory = () => new CPlayer_ViewModelServices();
            return decoderSet.GetDecoder<CPlayer_ViewModelServices>(serializerKey);
        }
        else if (serializerKey.Name == "CCSObserver_ViewModelServices")
        {
            factory = () => new CCSObserver_ViewModelServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSObserver_ViewModelServices>(serializerKey);
            return (CPlayer_ViewModelServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CCSObserver_ViewModelServices)instance, path, ref buffer);
            };
        }
        else if (serializerKey.Name == "CCSPlayer_ViewModelServices")
        {
            factory = () => new CCSPlayer_ViewModelServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSPlayer_ViewModelServices>(serializerKey);
            return (CPlayer_ViewModelServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CCSPlayer_ViewModelServices)instance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_ViewModelServices: {serializerKey}");
    }

    internal new static SendNodeDecoder<CPlayer_ViewModelServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_WaterServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_WaterServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_WaterServices> factory)
    {
        if (serializerKey.Name == "CPlayer_WaterServices")
        {
            factory = () => new CPlayer_WaterServices();
            return decoderSet.GetDecoder<CPlayer_WaterServices>(serializerKey);
        }
        else if (serializerKey.Name == "CCSPlayer_WaterServices")
        {
            factory = () => new CCSPlayer_WaterServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSPlayer_WaterServices>(serializerKey);
            return (CPlayer_WaterServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CCSPlayer_WaterServices)instance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_WaterServices: {serializerKey}");
    }

    internal new static SendNodeDecoder<CPlayer_WaterServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayer_WeaponServices : CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayer_WeaponServices> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CPlayer_WeaponServices> factory)
    {
        if (serializerKey.Name == "CPlayer_WeaponServices")
        {
            factory = () => new CPlayer_WeaponServices();
            return decoderSet.GetDecoder<CPlayer_WeaponServices>(serializerKey);
        }
        else if (serializerKey.Name == "CCSPlayer_WeaponServices")
        {
            factory = () => new CCSPlayer_WeaponServices();
            var childClassDecoder = decoderSet.GetDecoder<CCSPlayer_WeaponServices>(serializerKey);
            return (CPlayer_WeaponServices instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                childClassDecoder((CCSPlayer_WeaponServices)instance, path, ref buffer);
            };
        }
        throw new NotImplementedException($"Unknown derived class of CPlayer_WeaponServices: {serializerKey}");
    }

    public NetworkedVector<CHandle<CBasePlayerWeapon>> m_hMyWeapons { get; private set; } = new NetworkedVector<CHandle<CBasePlayerWeapon>>();

    public CHandle<CBasePlayerWeapon> m_hActiveWeapon { get; private set; }

    // MNetworkUserGroup "LocalPlayerExclusive"
    public CHandle<CBasePlayerWeapon> m_hLastWeapon { get; private set; }

    public UInt16[] m_iAmmo { get; private set; } = Array.Empty<UInt16>();

    internal new static SendNodeDecoder<CPlayer_WeaponServices> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hMyWeapons")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerWeapon>(field.FieldEncodingInfo);
            return (CPlayer_WeaponServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_hMyWeapons.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_hMyWeapons.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_hMyWeapons[index] = element;
                }
            };
        }
        if (field.VarName == "m_hActiveWeapon")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerWeapon>(field.FieldEncodingInfo);
            return (CPlayer_WeaponServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hActiveWeapon = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hLastWeapon")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerWeapon>(field.FieldEncodingInfo);
            return (CPlayer_WeaponServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hLastWeapon = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iAmmo")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CPlayer_WeaponServices @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_iAmmo.Length == 0) @this.m_iAmmo = new UInt16[fixedArraySize];
                @this.m_iAmmo[path[1]] = decoder(ref buffer);
            };
        }
        return CPlayerPawnComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayerControllerComponent
{
    internal static SendNodeDecoder<CPlayerControllerComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CPlayerPawnComponent
{
    internal static SendNodeDecoder<CPlayerPawnComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CPlayerPing : CBaseEntity
{
    internal CPlayerPing(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CHandle<CCSPlayerPawn> m_hPlayer { get; private set; }

    public CHandle<CBaseEntity> m_hPingedEntity { get; private set; }

    public Int32 m_iType { get; private set; }

    public bool m_bUrgent { get; private set; }

    public string m_szPlaceName { get; private set; } = "";

    internal new static SendNodeDecoder<CPlayerPing> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hPlayer")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CCSPlayerPawn>(field.FieldEncodingInfo);
            return (CPlayerPing @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hPlayer = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hPingedEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CPlayerPing @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hPingedEntity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iType")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPlayerPing @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUrgent")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayerPing @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bUrgent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szPlaceName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CPlayerPing @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szPlaceName = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayerSprayDecal : CModelPointEntity
{
    internal CPlayerSprayDecal(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 m_nUniqueID { get; private set; }

    public UInt32 m_unAccountID { get; private set; }

    public UInt32 m_unTraceID { get; private set; }

    public UInt32 m_rtGcTime { get; private set; }

    public Vector m_vecEndPos { get; private set; }

    public Vector m_vecStart { get; private set; }

    public Vector m_vecLeft { get; private set; }

    public Vector m_vecNormal { get; private set; }

    public Int32 m_nPlayer { get; private set; }

    public Int32 m_nEntity { get; private set; }

    public Int32 m_nHitbox { get; private set; }

    public float m_flCreationTime { get; private set; }

    public Int32 m_nTintID { get; private set; }

    public byte m_nVersion { get; private set; }

    public byte[] m_ubSignature { get; private set; } = Array.Empty<byte>();

    internal new static SendNodeDecoder<CPlayerSprayDecal> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nUniqueID")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nUniqueID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unAccountID")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_unAccountID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unTraceID")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_unTraceID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_rtGcTime")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_rtGcTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecEndPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecEndPos = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecStart")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecLeft")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecLeft = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecNormal")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecNormal = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPlayer")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nPlayer = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEntity")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nEntity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHitbox")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nHitbox = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flCreationTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flCreationTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nTintID")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nTintID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nVersion")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nVersion = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ubSignature")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CPlayerSprayDecal @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_ubSignature.Length == 0) @this.m_ubSignature = new byte[fixedArraySize];
                @this.m_ubSignature[path[1]] = decoder(ref buffer);
            };
        }
        return CModelPointEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPlayerVisibility : CBaseEntity
{
    internal CPlayerVisibility(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "PlayerVisibilityStateChanged"
    public float m_flVisibilityStrength { get; private set; }

    // MNetworkChangeCallback "PlayerVisibilityStateChanged"
    public float m_flFogDistanceMultiplier { get; private set; }

    // MNetworkChangeCallback "PlayerVisibilityStateChanged"
    public float m_flFogMaxDensityMultiplier { get; private set; }

    // MNetworkChangeCallback "PlayerVisibilityStateChanged"
    public float m_flFadeTime { get; private set; }

    public bool m_bStartDisabled { get; private set; }

    public bool m_bIsEnabled { get; private set; }

    internal new static SendNodeDecoder<CPlayerVisibility> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flVisibilityStrength")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayerVisibility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flVisibilityStrength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogDistanceMultiplier")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayerVisibility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogDistanceMultiplier = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMaxDensityMultiplier")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayerVisibility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogMaxDensityMultiplier = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPlayerVisibility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bStartDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayerVisibility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bStartDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPlayerVisibility @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsEnabled = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPointCamera : CBaseEntity
{
    internal CPointCamera(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float m_FOV { get; private set; }

    public float m_Resolution { get; private set; }

    public bool m_bFogEnable { get; private set; }

    public Color m_FogColor { get; private set; }

    public float m_flFogStart { get; private set; }

    public float m_flFogEnd { get; private set; }

    public float m_flFogMaxDensity { get; private set; }

    public bool m_bActive { get; private set; }

    public bool m_bUseScreenAspectRatio { get; private set; }

    public float m_flAspectRatio { get; private set; }

    public bool m_bNoSky { get; private set; }

    public float m_fBrightness { get; private set; }

    public float m_flZFar { get; private set; }

    public float m_flZNear { get; private set; }

    public bool m_bCanHLTVUse { get; private set; }

    public bool m_bDofEnabled { get; private set; }

    public float m_flDofNearBlurry { get; private set; }

    public float m_flDofNearCrisp { get; private set; }

    public float m_flDofFarCrisp { get; private set; }

    public float m_flDofFarBlurry { get; private set; }

    public float m_flDofTiltToGround { get; private set; }

    internal new static SendNodeDecoder<CPointCamera> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_FOV")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_FOV = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Resolution")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_Resolution = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFogEnable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bFogEnable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_FogColor")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_FogColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogStart")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogEnd")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFogMaxDensity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFogMaxDensity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bActive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseScreenAspectRatio")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bUseScreenAspectRatio = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAspectRatio")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flAspectRatio = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoSky")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bNoSky = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fBrightness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fBrightness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flZFar")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flZFar = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flZNear")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flZNear = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bCanHLTVUse")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bCanHLTVUse = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDofEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bDofEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDofNearBlurry")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDofNearBlurry = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDofNearCrisp")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDofNearCrisp = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDofFarCrisp")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDofFarCrisp = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDofFarBlurry")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDofFarBlurry = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDofTiltToGround")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDofTiltToGround = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPointClientUIDialog : CBaseClientUIEntity
{
    internal CPointClientUIDialog(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "OnDialogActivatorChanged"
    public CHandle<CBaseEntity> m_hActivator { get; private set; }

    internal new static SendNodeDecoder<CPointClientUIDialog> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hActivator")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CPointClientUIDialog @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hActivator = decoder(ref buffer);
            };
        }
        return CBaseClientUIEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPointClientUIWorldPanel : CBaseClientUIEntity
{
    internal CPointClientUIWorldPanel(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bIgnoreInput { get; private set; }

    public bool m_bLit { get; private set; }

    public bool m_bFollowPlayerAcrossTeleport { get; private set; }

    public float m_flWidth { get; private set; }

    public float m_flHeight { get; private set; }

    public float m_flDPI { get; private set; }

    public float m_flInteractDistance { get; private set; }

    public float m_flDepthOffset { get; private set; }

    public UInt32 m_unOwnerContext { get; private set; }

    public UInt32 m_unHorizontalAlign { get; private set; }

    public UInt32 m_unVerticalAlign { get; private set; }

    public UInt32 m_unOrientation { get; private set; }

    public bool m_bAllowInteractionFromAllSceneWorlds { get; private set; }

    public NetworkedVector<NetworkedString> m_vecCSSClasses { get; private set; } = new NetworkedVector<NetworkedString>();

    public bool m_bOpaque { get; private set; }

    public bool m_bNoDepth { get; private set; }

    public bool m_bRenderBackface { get; private set; }

    public bool m_bUseOffScreenIndicator { get; private set; }

    public bool m_bExcludeFromSaveGames { get; private set; }

    public bool m_bGrabbable { get; private set; }

    public bool m_bOnlyRenderToTexture { get; private set; }

    public bool m_bDisableMipGen { get; private set; }

    public Int32 m_nExplicitImageLayout { get; private set; }

    internal new static SendNodeDecoder<CPointClientUIWorldPanel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bIgnoreInput")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIgnoreInput = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bLit")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bLit = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFollowPlayerAcrossTeleport")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bFollowPlayerAcrossTeleport = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flWidth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flWidth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flHeight = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDPI")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDPI = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flInteractDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flInteractDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDepthOffset")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDepthOffset = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unOwnerContext")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_unOwnerContext = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unHorizontalAlign")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_unHorizontalAlign = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unVerticalAlign")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_unVerticalAlign = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_unOrientation")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_unOrientation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAllowInteractionFromAllSceneWorlds")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bAllowInteractionFromAllSceneWorlds = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecCSSClasses")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_vecCSSClasses.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_vecCSSClasses.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_vecCSSClasses[index] = element;
                }
            };
        }
        if (field.VarName == "m_bOpaque")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bOpaque = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoDepth")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bNoDepth = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRenderBackface")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bRenderBackface = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseOffScreenIndicator")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bUseOffScreenIndicator = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bExcludeFromSaveGames")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bExcludeFromSaveGames = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bGrabbable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bGrabbable = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bOnlyRenderToTexture")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bOnlyRenderToTexture = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDisableMipGen")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bDisableMipGen = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nExplicitImageLayout")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPointClientUIWorldPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nExplicitImageLayout = decoder(ref buffer);
            };
        }
        return CBaseClientUIEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPointClientUIWorldTextPanel : CPointClientUIWorldPanel
{
    internal CPointClientUIWorldTextPanel(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public string m_messageText { get; private set; } = "";

    internal new static SendNodeDecoder<CPointClientUIWorldTextPanel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_messageText")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CPointClientUIWorldTextPanel @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_messageText = decoder(ref buffer);
            };
        }
        return CPointClientUIWorldPanel.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPointCommentaryNode : CBaseAnimGraph
{
    internal CPointCommentaryNode(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString m_iszCommentaryFile { get; private set; }

    public CHandle<CBaseEntity> m_hViewPosition { get; private set; }

    public bool m_bActive { get; private set; }

    public GameTime_t m_flStartTime { get; private set; } = new();

    public float m_flStartTimeInCommentary { get; private set; }

    public NetworkedString m_iszTitle { get; private set; }

    public NetworkedString m_iszSpeakers { get; private set; }

    public Int32 m_iNodeNumber { get; private set; }

    public Int32 m_iNodeNumberMax { get; private set; }

    public bool m_bListenedTo { get; private set; }

    internal new static SendNodeDecoder<CPointCommentaryNode> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iszCommentaryFile")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iszCommentaryFile = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hViewPosition")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hViewPosition = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bActive")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bActive = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTimeInCommentary")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flStartTimeInCommentary = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszTitle")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iszTitle = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszSpeakers")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iszSpeakers = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iNodeNumber")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iNodeNumber = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iNodeNumberMax")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iNodeNumberMax = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bListenedTo")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointCommentaryNode @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bListenedTo = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPointEntity : CBaseEntity
{
    internal CPointEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPointEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPointValueRemapper : CBaseEntity
{
    internal CPointValueRemapper(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bDisabled { get; private set; }

    public bool m_bUpdateOnClient { get; private set; }

    public ValueRemapperInputType_t m_nInputType { get; private set; }

    public CHandle<CBaseEntity> m_hRemapLineStart { get; private set; }

    public CHandle<CBaseEntity> m_hRemapLineEnd { get; private set; }

    public float m_flMaximumChangePerSecond { get; private set; }

    public float m_flDisengageDistance { get; private set; }

    public float m_flEngageDistance { get; private set; }

    public bool m_bRequiresUseKey { get; private set; }

    public ValueRemapperOutputType_t m_nOutputType { get; private set; }

    public NetworkedVector<CHandle<CBaseEntity>> m_hOutputEntities { get; private set; } = new NetworkedVector<CHandle<CBaseEntity>>();

    public ValueRemapperHapticsType_t m_nHapticsType { get; private set; }

    public ValueRemapperMomentumType_t m_nMomentumType { get; private set; }

    public float m_flMomentumModifier { get; private set; }

    public float m_flSnapValue { get; private set; }

    public ValueRemapperRatchetType_t m_nRatchetType { get; private set; }

    public float m_flInputOffset { get; private set; }

    internal new static SendNodeDecoder<CPointValueRemapper> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUpdateOnClient")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bUpdateOnClient = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nInputType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ValueRemapperInputType_t>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nInputType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hRemapLineStart")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hRemapLineStart = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hRemapLineEnd")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hRemapLineEnd = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMaximumChangePerSecond")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flMaximumChangePerSecond = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDisengageDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDisengageDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flEngageDistance")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flEngageDistance = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRequiresUseKey")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bRequiresUseKey = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nOutputType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ValueRemapperOutputType_t>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nOutputType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hOutputEntities")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_hOutputEntities.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_hOutputEntities.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_hOutputEntities[index] = element;
                }
            };
        }
        if (field.VarName == "m_nHapticsType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ValueRemapperHapticsType_t>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nHapticsType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nMomentumType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ValueRemapperMomentumType_t>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nMomentumType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMomentumModifier")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flMomentumModifier = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSnapValue")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flSnapValue = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRatchetType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ValueRemapperRatchetType_t>(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nRatchetType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flInputOffset")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointValueRemapper @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flInputOffset = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPointWorldText : CModelPointEntity
{
    internal CPointWorldText(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public string m_messageText { get; private set; } = "";

    public string m_FontName { get; private set; } = "";

    public bool m_bEnabled { get; private set; }

    public bool m_bFullbright { get; private set; }

    public float m_flWorldUnitsPerPx { get; private set; }

    public float m_flFontSize { get; private set; }

    public float m_flDepthOffset { get; private set; }

    public Color m_Color { get; private set; }

    public PointWorldTextJustifyHorizontal_t m_nJustifyHorizontal { get; private set; }

    public PointWorldTextJustifyVertical_t m_nJustifyVertical { get; private set; }

    public PointWorldTextReorientMode_t m_nReorientMode { get; private set; }

    internal new static SendNodeDecoder<CPointWorldText> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_messageText")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_messageText = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_FontName")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_FontName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bFullbright")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bFullbright = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flWorldUnitsPerPx")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flWorldUnitsPerPx = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFontSize")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFontSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flDepthOffset")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDepthOffset = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Color")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_Color = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nJustifyHorizontal")
        {
            var decoder = FieldDecode.CreateDecoder_enum<PointWorldTextJustifyHorizontal_t>(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nJustifyHorizontal = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nJustifyVertical")
        {
            var decoder = FieldDecode.CreateDecoder_enum<PointWorldTextJustifyVertical_t>(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nJustifyVertical = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nReorientMode")
        {
            var decoder = FieldDecode.CreateDecoder_enum<PointWorldTextReorientMode_t>(field.FieldEncodingInfo);
            return (CPointWorldText @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nReorientMode = decoder(ref buffer);
            };
        }
        return CModelPointEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPostProcessingVolume : CBaseTrigger
{
    internal CPostProcessingVolume(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CStrongHandle<InfoForResourceTypeCPostProcessingResource> m_hPostSettings { get; private set; }

    public float m_flFadeDuration { get; private set; }

    public float m_flMinLogExposure { get; private set; }

    public float m_flMaxLogExposure { get; private set; }

    public float m_flMinExposure { get; private set; }

    public float m_flMaxExposure { get; private set; }

    public float m_flExposureCompensation { get; private set; }

    public float m_flExposureFadeSpeedUp { get; private set; }

    public float m_flExposureFadeSpeedDown { get; private set; }

    public float m_flTonemapEVSmoothingRange { get; private set; }

    public bool m_bMaster { get; private set; }

    public bool m_bExposureControl { get; private set; }

    public float m_flRate { get; private set; }

    public float m_flTonemapPercentTarget { get; private set; }

    public float m_flTonemapPercentBrightPixels { get; private set; }

    public float m_flTonemapMinAvgLum { get; private set; }

    internal new static SendNodeDecoder<CPostProcessingVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hPostSettings")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCPostProcessingResource>(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hPostSettings = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFadeDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFadeDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMinLogExposure")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flMinLogExposure = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMaxLogExposure")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flMaxLogExposure = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMinExposure")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flMinExposure = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flMaxExposure")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flMaxExposure = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flExposureCompensation")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flExposureCompensation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flExposureFadeSpeedUp")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flExposureFadeSpeedUp = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flExposureFadeSpeedDown")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flExposureFadeSpeedDown = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapEVSmoothingRange")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flTonemapEVSmoothingRange = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMaster")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bMaster = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bExposureControl")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bExposureControl = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flRate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapPercentTarget")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flTonemapPercentTarget = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapPercentBrightPixels")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flTonemapPercentBrightPixels = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapMinAvgLum")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CPostProcessingVolume @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flTonemapMinAvgLum = decoder(ref buffer);
            };
        }
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPrecipitation : CBaseTrigger
{
    internal CPrecipitation(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPrecipitation> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPrecipitationBlocker : CBaseModelEntity
{
    internal CPrecipitationBlocker(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPrecipitationBlocker> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CPredictedViewModel : CBaseViewModel
{
    internal CPredictedViewModel(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CPredictedViewModel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseViewModel.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CRagdollManager : CBaseEntity
{
    internal CRagdollManager(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public sbyte m_iCurrentMaxRagdollCount { get; private set; }

    internal new static SendNodeDecoder<CRagdollManager> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iCurrentMaxRagdollCount")
        {
            var decoder = FieldDecode.CreateDecoder_sbyte(field.FieldEncodingInfo);
            return (CRagdollManager @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iCurrentMaxRagdollCount = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CRagdollProp : CBaseAnimGraph
{
    internal CRagdollProp(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkEncoder "coord"
    public NetworkedVector<Vector> m_ragPos { get; private set; } = new NetworkedVector<Vector>();

    // MNetworkEncoder "qangle"
    // MNetworkBitCount "13"
    public NetworkedVector<QAngle> m_ragAngles { get; private set; } = new NetworkedVector<QAngle>();

    public CHandle<CBaseEntity> m_hRagdollSource { get; private set; }

    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1.000000"
    // MNetworkEncodeFlags "1"
    public float m_flBlendWeight { get; private set; }

    internal new static SendNodeDecoder<CRagdollProp> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_ragPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CRagdollProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_ragPos.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_ragPos.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_ragPos[index] = element;
                }
            };
        }
        if (field.VarName == "m_ragAngles")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (CRagdollProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_ragAngles.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_ragAngles.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_ragAngles[index] = element;
                }
            };
        }
        if (field.VarName == "m_hRagdollSource")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CRagdollProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hRagdollSource = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBlendWeight")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CRagdollProp @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flBlendWeight = decoder(ref buffer);
            };
        }
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CRagdollPropAttached : CRagdollProp
{
    internal CRagdollPropAttached(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public UInt32 m_boneIndexAttached { get; private set; }

    public UInt32 m_ragdollAttachedObjectIndex { get; private set; }

    // MNetworkEncoder "coord"
    public Vector m_attachmentPointBoneSpace { get; private set; }

    // MNetworkEncoder "coord"
    public Vector m_attachmentPointRagdollSpace { get; private set; }

    internal new static SendNodeDecoder<CRagdollPropAttached> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_boneIndexAttached")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CRagdollPropAttached @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_boneIndexAttached = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ragdollAttachedObjectIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CRagdollPropAttached @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_ragdollAttachedObjectIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_attachmentPointBoneSpace")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CRagdollPropAttached @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_attachmentPointBoneSpace = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_attachmentPointRagdollSpace")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CRagdollPropAttached @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_attachmentPointRagdollSpace = decoder(ref buffer);
            };
        }
        return CRagdollProp.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CRectLight : CBarnLight
{
    internal CRectLight(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkChangeCallback "RenderingChanged"
    public bool m_bShowLight { get; private set; }

    internal new static SendNodeDecoder<CRectLight> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bShowLight")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CRectLight @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bShowLight = decoder(ref buffer);
            };
        }
        return CBarnLight.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CRenderComponent : CEntityComponent
{
    internal static SendNodeDecoder<CRenderComponent> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CRenderComponent> factory)
    {
        if (serializerKey.Name == "CRenderComponent")
        {
            factory = () => new CRenderComponent();
            return decoderSet.GetDecoder<CRenderComponent>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CRenderComponent: {serializerKey}");
    }

    internal new static SendNodeDecoder<CRenderComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CRetakeGameRules
{
    public Int32 m_nMatchSeed { get; private set; }

    public bool m_bBlockersPresent { get; private set; }

    public bool m_bRoundInProgress { get; private set; }

    public Int32 m_iFirstSecondHalfRound { get; private set; }

    public Int32 m_iBombSite { get; private set; }

    internal static SendNodeDecoder<CRetakeGameRules> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nMatchSeed")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CRetakeGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nMatchSeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bBlockersPresent")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CRetakeGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bBlockersPresent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bRoundInProgress")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CRetakeGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bRoundInProgress = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iFirstSecondHalfRound")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CRetakeGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iFirstSecondHalfRound = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iBombSite")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CRetakeGameRules @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iBombSite = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CRopeKeyframe : CBaseModelEntity
{
    internal CRopeKeyframe(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public UInt16 m_RopeFlags { get; private set; }

    public Int16 m_Slack { get; private set; }

    public float m_Width { get; private set; }

    // MNetworkBitCount "10"
    // MNetworkMinValue "0.100000"
    // MNetworkMaxValue "10.000000"
    public float m_TextureScale { get; private set; }

    public byte m_nSegments { get; private set; }

    public bool m_bConstrainBetweenEndpoints { get; private set; }

    public CStrongHandle<InfoForResourceTypeIMaterial2> m_iRopeMaterialModelIndex { get; private set; }

    public byte m_Subdiv { get; private set; }

    public byte m_nChangeCount { get; private set; }

    public Int16 m_RopeLength { get; private set; }

    public byte m_fLockedPoints { get; private set; }

    public float m_flScrollSpeed { get; private set; }

    public CHandle<CBaseEntity> m_hStartPoint { get; private set; }

    public CHandle<CBaseEntity> m_hEndPoint { get; private set; }

    public AttachmentHandle_t m_iStartAttachment { get; private set; } = new();

    public AttachmentHandle_t m_iEndAttachment { get; private set; } = new();

    internal new static SendNodeDecoder<CRopeKeyframe> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_RopeFlags")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_RopeFlags = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Slack")
        {
            var decoder = FieldDecode.CreateDecoder_Int16(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_Slack = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Width")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_Width = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_TextureScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_TextureScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nSegments")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nSegments = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bConstrainBetweenEndpoints")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bConstrainBetweenEndpoints = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iRopeMaterialModelIndex")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iRopeMaterialModelIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Subdiv")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_Subdiv = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nChangeCount")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nChangeCount = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_RopeLength")
        {
            var decoder = FieldDecode.CreateDecoder_Int16(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_RopeLength = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_fLockedPoints")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fLockedPoints = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flScrollSpeed")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flScrollSpeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hStartPoint")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hStartPoint = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hEndPoint")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hEndPoint = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iStartAttachment")
        {
            var decoder = FieldDecode.CreateDecoder_AttachmentHandle_t(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iStartAttachment = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEndAttachment")
        {
            var decoder = FieldDecode.CreateDecoder_AttachmentHandle_t(field.FieldEncodingInfo);
            return (CRopeKeyframe @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iEndAttachment = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSceneEntity : CPointEntity
{
    internal CSceneEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bIsPlayingBack { get; private set; }

    public bool m_bPaused { get; private set; }

    public bool m_bMultiplayer { get; private set; }

    public bool m_bAutogenerated { get; private set; }

    public float m_flForceClientTime { get; private set; }

    public NetworkedVector<CHandle<CBaseFlex>> m_hActorList { get; private set; } = new NetworkedVector<CHandle<CBaseFlex>>();

    public UInt16 m_nSceneStringIndex { get; private set; }

    internal new static SendNodeDecoder<CSceneEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bIsPlayingBack")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsPlayingBack = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPaused")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bPaused = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bMultiplayer")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bMultiplayer = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bAutogenerated")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bAutogenerated = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flForceClientTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flForceClientTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hActorList")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseFlex>(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_hActorList.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_hActorList.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_hActorList[index] = element;
                }
            };
        }
        if (field.VarName == "m_nSceneStringIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (CSceneEntity @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nSceneStringIndex = decoder(ref buffer);
            };
        }
        return CPointEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CScriptComponent : CEntityComponent
{
    internal static SendNodeDecoder<CScriptComponent> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<CScriptComponent> factory)
    {
        if (serializerKey.Name == "CScriptComponent")
        {
            factory = () => new CScriptComponent();
            return decoderSet.GetDecoder<CScriptComponent>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of CScriptComponent: {serializerKey}");
    }

    internal new static SendNodeDecoder<CScriptComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSensorGrenade : CBaseCSGrenade
{
    internal CSensorGrenade(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSensorGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCSGrenade.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSensorGrenadeProjectile : CBaseCSGrenadeProjectile
{
    internal CSensorGrenadeProjectile(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSensorGrenadeProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCSGrenadeProjectile.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CShatterGlassShardPhysics : CPhysicsProp
{
    internal CShatterGlassShardPhysics(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public shard_model_desc_t m_ShardDesc { get; private set; } = new();

    internal new static SendNodeDecoder<CShatterGlassShardPhysics> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_ShardDesc")
        {
            var innerDecoder = shard_model_desc_t.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CShatterGlassShardPhysics @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_ShardDesc, path, ref buffer);
            };
        }
        return CPhysicsProp.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSkeletonAnimationController : ISkeletonAnimationController
{
    internal new static SendNodeDecoder<CSkeletonAnimationController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return ISkeletonAnimationController.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSkeletonInstance : CGameSceneNode
{
    public CModelState m_modelState { get; private set; } = new();

    public bool m_bIsAnimationEnabled { get; private set; }

    public bool m_bUseParentRenderBounds { get; private set; }

    // MNetworkChangeCallback "skeletonMaterialGroupChanged"
    public CUtlStringToken m_materialGroup { get; private set; }

    public byte m_nHitboxSet { get; private set; }

    internal new static SendNodeDecoder<CSkeletonInstance> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_modelState")
        {
            var innerDecoder = CModelState.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CSkeletonInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_modelState, path, ref buffer);
            };
        }
        if (field.VarName == "m_bIsAnimationEnabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSkeletonInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsAnimationEnabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseParentRenderBounds")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSkeletonInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bUseParentRenderBounds = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_materialGroup")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CSkeletonInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_materialGroup = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHitboxSet")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CSkeletonInstance @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nHitboxSet = decoder(ref buffer);
            };
        }
        return CGameSceneNode.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSkyCamera : CBaseEntity
{
    internal CSkyCamera(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public sky3dparams_t m_skyboxData { get; private set; } = new();

    public CUtlStringToken m_skyboxSlotToken { get; private set; }

    internal new static SendNodeDecoder<CSkyCamera> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_skyboxData")
        {
            var innerDecoder = sky3dparams_t.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CSkyCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_skyboxData, path, ref buffer);
            };
        }
        if (field.VarName == "m_skyboxSlotToken")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (CSkyCamera @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_skyboxSlotToken = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSMatchStats_t : CSPerRoundStats_t
{
    public Int32 m_iEnemy5Ks { get; private set; }

    public Int32 m_iEnemy4Ks { get; private set; }

    public Int32 m_iEnemy3Ks { get; private set; }

    internal new static SendNodeDecoder<CSMatchStats_t> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iEnemy5Ks")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSMatchStats_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iEnemy5Ks = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEnemy4Ks")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSMatchStats_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iEnemy4Ks = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEnemy3Ks")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSMatchStats_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iEnemy3Ks = decoder(ref buffer);
            };
        }
        return CSPerRoundStats_t.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSmokeGrenade : CBaseCSGrenade
{
    internal CSmokeGrenade(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSmokeGrenade> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCSGrenade.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSmokeGrenadeProjectile : CBaseCSGrenadeProjectile
{
    internal CSmokeGrenadeProjectile(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 m_nSmokeEffectTickBegin { get; private set; }

    public bool m_bDidSmokeEffect { get; private set; }

    public Int32 m_nRandomSeed { get; private set; }

    public Vector m_vSmokeColor { get; private set; }

    public Vector m_vSmokeDetonationPos { get; private set; }

    public NetworkedVector<byte> m_VoxelFrameData { get; private set; } = new NetworkedVector<byte>();

    internal new static SendNodeDecoder<CSmokeGrenadeProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nSmokeEffectTickBegin")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSmokeGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nSmokeEffectTickBegin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bDidSmokeEffect")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSmokeGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bDidSmokeEffect = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nRandomSeed")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSmokeGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nRandomSeed = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vSmokeColor")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSmokeGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vSmokeColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vSmokeDetonationPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSmokeGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vSmokeDetonationPos = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_VoxelFrameData")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (CSmokeGrenadeProjectile @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_VoxelFrameData.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_VoxelFrameData.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_VoxelFrameData[index] = element;
                }
            };
        }
        return CBaseCSGrenadeProjectile.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSoundAreaEntityBase : CBaseEntity
{
    internal CSoundAreaEntityBase(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bDisabled { get; private set; }

    public NetworkedString m_iszSoundAreaType { get; private set; }

    public Vector m_vPos { get; private set; }

    internal new static SendNodeDecoder<CSoundAreaEntityBase> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bDisabled")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSoundAreaEntityBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bDisabled = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszSoundAreaType")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CSoundAreaEntityBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iszSoundAreaType = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vPos")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSoundAreaEntityBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vPos = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSoundAreaEntityOrientedBox : CSoundAreaEntityBase
{
    internal CSoundAreaEntityOrientedBox(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Vector m_vMin { get; private set; }

    public Vector m_vMax { get; private set; }

    internal new static SendNodeDecoder<CSoundAreaEntityOrientedBox> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vMin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSoundAreaEntityOrientedBox @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vMin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vMax")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSoundAreaEntityOrientedBox @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vMax = decoder(ref buffer);
            };
        }
        return CSoundAreaEntityBase.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSoundAreaEntitySphere : CSoundAreaEntityBase
{
    internal CSoundAreaEntitySphere(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float m_flRadius { get; private set; }

    internal new static SendNodeDecoder<CSoundAreaEntitySphere> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flRadius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSoundAreaEntitySphere @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flRadius = decoder(ref buffer);
            };
        }
        return CSoundAreaEntityBase.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSoundOpvarSetAABBEntity : CSoundOpvarSetPointEntity
{
    internal CSoundOpvarSetAABBEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSoundOpvarSetAABBEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSoundOpvarSetPointEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSoundOpvarSetOBBEntity : CSoundOpvarSetAABBEntity
{
    internal CSoundOpvarSetOBBEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSoundOpvarSetOBBEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSoundOpvarSetAABBEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSoundOpvarSetOBBWindEntity : CSoundOpvarSetPointBase
{
    internal CSoundOpvarSetOBBWindEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSoundOpvarSetOBBWindEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSoundOpvarSetPointBase.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSoundOpvarSetPathCornerEntity : CSoundOpvarSetPointEntity
{
    internal CSoundOpvarSetPathCornerEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSoundOpvarSetPathCornerEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSoundOpvarSetPointEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSoundOpvarSetPointBase : CBaseEntity
{
    internal CSoundOpvarSetPointBase(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public NetworkedString m_iszStackName { get; private set; }

    public NetworkedString m_iszOperatorName { get; private set; }

    public NetworkedString m_iszOpvarName { get; private set; }

    public Int32 m_iOpvarIndex { get; private set; }

    public bool m_bUseAutoCompare { get; private set; }

    internal new static SendNodeDecoder<CSoundOpvarSetPointBase> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iszStackName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CSoundOpvarSetPointBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iszStackName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszOperatorName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CSoundOpvarSetPointBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iszOperatorName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszOpvarName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CSoundOpvarSetPointBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iszOpvarName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iOpvarIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSoundOpvarSetPointBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iOpvarIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bUseAutoCompare")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSoundOpvarSetPointBase @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bUseAutoCompare = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSoundOpvarSetPointEntity : CSoundOpvarSetPointBase
{
    internal CSoundOpvarSetPointEntity(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSoundOpvarSetPointEntity> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSoundOpvarSetPointBase.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSPerRoundStats_t
{
    public Int32 m_iKills { get; private set; }

    public Int32 m_iDeaths { get; private set; }

    public Int32 m_iAssists { get; private set; }

    // MNetworkUserGroup "AllPlayersDuringFreezePeriod"
    public Int32 m_iDamage { get; private set; }

    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public Int32 m_iEquipmentValue { get; private set; }

    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public Int32 m_iMoneySaved { get; private set; }

    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public Int32 m_iKillReward { get; private set; }

    public Int32 m_iLiveTime { get; private set; }

    public Int32 m_iHeadShotKills { get; private set; }

    // MNetworkUserGroup "AllPlayersDuringFreezePeriod"
    public Int32 m_iObjective { get; private set; }

    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public Int32 m_iCashEarned { get; private set; }

    // MNetworkUserGroup "AllPlayersDuringFreezePeriod"
    public Int32 m_iUtilityDamage { get; private set; }

    // MNetworkUserGroup "AllPlayersDuringFreezePeriod"
    public Int32 m_iEnemiesFlashed { get; private set; }

    internal static SendNodeDecoder<CSPerRoundStats_t> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iKills")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iKills = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iDeaths")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iDeaths = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iAssists")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iAssists = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iDamage")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iDamage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEquipmentValue")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iEquipmentValue = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iMoneySaved")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iMoneySaved = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iKillReward")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iKillReward = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iLiveTime")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iLiveTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iHeadShotKills")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iHeadShotKills = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iObjective")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iObjective = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iCashEarned")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iCashEarned = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iUtilityDamage")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iUtilityDamage = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iEnemiesFlashed")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CSPerRoundStats_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iEnemiesFlashed = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class CSpotlightEnd : CBaseModelEntity
{
    internal CSpotlightEnd(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float m_flLightScale { get; private set; }

    public float m_Radius { get; private set; }

    internal new static SendNodeDecoder<CSpotlightEnd> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flLightScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSpotlightEnd @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flLightScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Radius")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSpotlightEnd @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_Radius = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSprite : CBaseModelEntity
{
    internal CSprite(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CStrongHandle<InfoForResourceTypeIMaterial2> m_hSpriteMaterial { get; private set; }

    public CHandle<CBaseEntity> m_hAttachedToEntity { get; private set; }

    public AttachmentHandle_t m_nAttachment { get; private set; } = new();

    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "60.000000"
    // MNetworkEncodeFlags "2"
    public float m_flSpriteFramerate { get; private set; }

    // MNetworkBitCount "20"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "256.000000"
    // MNetworkEncodeFlags "1"
    public float m_flFrame { get; private set; }

    public UInt32 m_nBrightness { get; private set; }

    public float m_flBrightnessDuration { get; private set; }

    // MNetworkChangeCallback "OnSpriteScaleChanged"
    public float m_flSpriteScale { get; private set; }

    public float m_flScaleDuration { get; private set; }

    public bool m_bWorldSpaceScale { get; private set; }

    // MNetworkBitCount "6"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "64.000000"
    // MNetworkEncodeFlags "2"
    public float m_flGlowProxySize { get; private set; }

    public float m_flHDRColorScale { get; private set; }

    internal new static SendNodeDecoder<CSprite> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hSpriteMaterial")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hSpriteMaterial = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hAttachedToEntity")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hAttachedToEntity = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nAttachment")
        {
            var decoder = FieldDecode.CreateDecoder_AttachmentHandle_t(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nAttachment = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSpriteFramerate")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flSpriteFramerate = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFrame")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFrame = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nBrightness")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nBrightness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flBrightnessDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flBrightnessDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSpriteScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flSpriteScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flScaleDuration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flScaleDuration = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bWorldSpaceScale")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bWorldSpaceScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flGlowProxySize")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flGlowProxySize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHDRColorScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSprite @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flHDRColorScale = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSpriteOriented : CSprite
{
    internal CSpriteOriented(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CSpriteOriented> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CSprite.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CSun : CBaseModelEntity
{
    internal CSun(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Vector m_vDirection { get; private set; }

    public Color m_clrOverlay { get; private set; }

    public NetworkedString m_iszEffectName { get; private set; }

    public NetworkedString m_iszSSEffectName { get; private set; }

    public bool m_bOn { get; private set; }

    public bool m_bmaxColor { get; private set; }

    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "100.000000"
    public float m_flSize { get; private set; }

    // MNetworkMinValue "-360.000000"
    // MNetworkMaxValue "360.000000"
    public float m_flRotation { get; private set; }

    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "100.000000"
    public float m_flHazeScale { get; private set; }

    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "2.000000"
    public float m_flAlphaHaze { get; private set; }

    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "2.000000"
    public float m_flAlphaHdr { get; private set; }

    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "2.000000"
    public float m_flAlphaScale { get; private set; }

    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "100.000000"
    public float m_flHDRColorScale { get; private set; }

    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1.000000"
    public float m_flFarZScale { get; private set; }

    internal new static SendNodeDecoder<CSun> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_vDirection")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vDirection = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_clrOverlay")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_clrOverlay = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszEffectName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iszEffectName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iszSSEffectName")
        {
            var decoder = FieldDecode.CreateDecoder_NetworkedString(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iszSSEffectName = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bOn")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bOn = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bmaxColor")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bmaxColor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flSize")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flRotation")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flRotation = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHazeScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flHazeScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAlphaHaze")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flAlphaHaze = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAlphaHdr")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flAlphaHdr = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAlphaScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flAlphaScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flHDRColorScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flHDRColorScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFarZScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CSun @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFarZScale = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CTablet : CCSWeaponBase
{
    internal CTablet(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CTablet> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CTeam : CBaseEntity
{
    internal CTeam(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    // MNetworkAlias "m_aPlayers"
    public NetworkedVector<CHandle<CBasePlayerController>> m_aPlayerControllers { get; private set; } = new NetworkedVector<CHandle<CBasePlayerController>>();

    // MNetworkAlias "m_aPawns"
    public NetworkedVector<CHandle<CBasePlayerPawn>> m_aPlayers { get; private set; } = new NetworkedVector<CHandle<CBasePlayerPawn>>();

    public Int32 m_iScore { get; private set; }

    public string m_szTeamname { get; private set; } = "";

    internal new static SendNodeDecoder<CTeam> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_aPlayers")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerController>(field.FieldEncodingInfo);
            return (CTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_aPlayerControllers.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_aPlayerControllers.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_aPlayerControllers[index] = element;
                }
            };
        }
        if (field.VarName == "m_aPawns")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBasePlayerPawn>(field.FieldEncodingInfo);
            return (CTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_aPlayers.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_aPlayers.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_aPlayers[index] = element;
                }
            };
        }
        if (field.VarName == "m_iScore")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iScore = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_szTeamname")
        {
            var decoder = FieldDecode.CreateDecoder_string(field.FieldEncodingInfo);
            return (CTeam @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_szTeamname = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CTeamplayRules : CMultiplayRules
{
    internal new static SendNodeDecoder<CTeamplayRules> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CMultiplayRules.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CTextureBasedAnimatable : CBaseModelEntity
{
    internal CTextureBasedAnimatable(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public bool m_bLoop { get; private set; }

    public float m_flFPS { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> m_hPositionKeys { get; private set; }

    public CStrongHandle<InfoForResourceTypeCTextureBase> m_hRotationKeys { get; private set; }

    public Vector m_vAnimationBoundsMin { get; private set; }

    public Vector m_vAnimationBoundsMax { get; private set; }

    public float m_flStartTime { get; private set; }

    public float m_flStartFrame { get; private set; }

    internal new static SendNodeDecoder<CTextureBasedAnimatable> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bLoop")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bLoop = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flFPS")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFPS = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hPositionKeys")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hPositionKeys = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hRotationKeys")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeCTextureBase>(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hRotationKeys = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vAnimationBoundsMin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vAnimationBoundsMin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vAnimationBoundsMax")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vAnimationBoundsMax = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartTime")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flStartTime = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flStartFrame")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTextureBasedAnimatable @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flStartFrame = decoder(ref buffer);
            };
        }
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CTonemapController2 : CBaseEntity
{
    internal CTonemapController2(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float m_flAutoExposureMin { get; private set; }

    public float m_flAutoExposureMax { get; private set; }

    public float m_flTonemapPercentTarget { get; private set; }

    public float m_flTonemapPercentBrightPixels { get; private set; }

    public float m_flTonemapMinAvgLum { get; private set; }

    public float m_flExposureAdaptationSpeedUp { get; private set; }

    public float m_flExposureAdaptationSpeedDown { get; private set; }

    public float m_flTonemapEVSmoothingRange { get; private set; }

    internal new static SendNodeDecoder<CTonemapController2> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flAutoExposureMin")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flAutoExposureMin = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flAutoExposureMax")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flAutoExposureMax = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapPercentTarget")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flTonemapPercentTarget = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapPercentBrightPixels")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flTonemapPercentBrightPixels = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapMinAvgLum")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flTonemapMinAvgLum = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flExposureAdaptationSpeedUp")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flExposureAdaptationSpeedUp = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flExposureAdaptationSpeedDown")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flExposureAdaptationSpeedDown = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_flTonemapEVSmoothingRange")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTonemapController2 @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flTonemapEVSmoothingRange = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CTouchExpansionComponent : CEntityComponent
{
    internal new static SendNodeDecoder<CTouchExpansionComponent> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CEntityComponent.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CTriggerBuoyancy : CBaseTrigger
{
    internal CTriggerBuoyancy(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float m_flFluidDensity { get; private set; }

    internal new static SendNodeDecoder<CTriggerBuoyancy> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flFluidDensity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CTriggerBuoyancy @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flFluidDensity = decoder(ref buffer);
            };
        }
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CTriggerTripWire : CBaseTrigger
{
    internal CTriggerTripWire(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CTriggerTripWire> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseTrigger.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CTriggerVolume : CBaseModelEntity
{
    internal CTriggerVolume(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CTriggerVolume> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CTripWireFire : CBaseCSGrenade
{
    internal CTripWireFire(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CTripWireFire> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseCSGrenade.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CTripWireFireProjectile : CBaseGrenade
{
    internal CTripWireFireProjectile(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CTripWireFireProjectile> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseGrenade.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CVoteController : CBaseEntity
{
    internal CVoteController(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public Int32 m_iActiveIssueIndex { get; private set; }

    public Int32 m_iOnlyTeamToVote { get; private set; }

    public Int32[] m_nVoteOptionCount { get; private set; } = Array.Empty<Int32>();

    public Int32 m_nPotentialVotes { get; private set; }

    public bool m_bIsYesNoVote { get; private set; }

    internal new static SendNodeDecoder<CVoteController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_iActiveIssueIndex")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CVoteController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iActiveIssueIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_iOnlyTeamToVote")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CVoteController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_iOnlyTeamToVote = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nVoteOptionCount")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CVoteController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_nVoteOptionCount.Length == 0) @this.m_nVoteOptionCount = new Int32[fixedArraySize];
                @this.m_nVoteOptionCount[path[1]] = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPotentialVotes")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (CVoteController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nPotentialVotes = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bIsYesNoVote")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CVoteController @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bIsYesNoVote = decoder(ref buffer);
            };
        }
        return CBaseEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWaterBullet : CBaseAnimGraph
{
    internal CWaterBullet(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWaterBullet> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseAnimGraph.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponAug : CCSWeaponBaseGun
{
    internal CWeaponAug(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponAug> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponAWP : CCSWeaponBaseGun
{
    internal CWeaponAWP(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponAWP> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponBaseItem : CCSWeaponBase
{
    internal CWeaponBaseItem(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public CountdownTimer m_SequenceCompleteTimer { get; private set; } = new();

    public bool m_bRedraw { get; private set; }

    internal new static SendNodeDecoder<CWeaponBaseItem> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "m_SequenceCompleteTimer")
        {
            var innerDecoder = CountdownTimer.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (CWeaponBaseItem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.m_SequenceCompleteTimer, path, ref buffer);
            };
        }
        if (field.VarName == "m_bRedraw")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (CWeaponBaseItem @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bRedraw = decoder(ref buffer);
            };
        }
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponBizon : CCSWeaponBaseGun
{
    internal CWeaponBizon(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponBizon> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponElite : CCSWeaponBaseGun
{
    internal CWeaponElite(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponElite> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponFamas : CCSWeaponBaseGun
{
    internal CWeaponFamas(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponFamas> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponFiveSeven : CCSWeaponBaseGun
{
    internal CWeaponFiveSeven(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponFiveSeven> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponG3SG1 : CCSWeaponBaseGun
{
    internal CWeaponG3SG1(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponG3SG1> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponGalilAR : CCSWeaponBaseGun
{
    internal CWeaponGalilAR(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponGalilAR> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponGlock : CCSWeaponBaseGun
{
    internal CWeaponGlock(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponGlock> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponHKP2000 : CCSWeaponBaseGun
{
    internal CWeaponHKP2000(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponHKP2000> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponM249 : CCSWeaponBaseGun
{
    internal CWeaponM249(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponM249> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponM4A1 : CCSWeaponBaseGun
{
    internal CWeaponM4A1(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponM4A1> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponMAC10 : CCSWeaponBaseGun
{
    internal CWeaponMAC10(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponMAC10> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponMag7 : CCSWeaponBaseGun
{
    internal CWeaponMag7(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponMag7> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponMP7 : CCSWeaponBaseGun
{
    internal CWeaponMP7(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponMP7> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponMP9 : CCSWeaponBaseGun
{
    internal CWeaponMP9(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponMP9> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponNegev : CCSWeaponBaseGun
{
    internal CWeaponNegev(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponNegev> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponNOVA : CCSWeaponBase
{
    internal CWeaponNOVA(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponNOVA> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponP250 : CCSWeaponBaseGun
{
    internal CWeaponP250(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponP250> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponP90 : CCSWeaponBaseGun
{
    internal CWeaponP90(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponP90> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponSawedoff : CCSWeaponBase
{
    internal CWeaponSawedoff(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponSawedoff> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponSCAR20 : CCSWeaponBaseGun
{
    internal CWeaponSCAR20(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponSCAR20> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponSG556 : CCSWeaponBaseGun
{
    internal CWeaponSG556(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponSG556> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponShield : CCSWeaponBaseGun
{
    internal CWeaponShield(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public float m_flDisplayHealth { get; private set; }

    internal new static SendNodeDecoder<CWeaponShield> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_flDisplayHealth")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (CWeaponShield @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flDisplayHealth = decoder(ref buffer);
            };
        }
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponSSG08 : CCSWeaponBaseGun
{
    internal CWeaponSSG08(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponSSG08> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponTaser : CCSWeaponBaseGun
{
    internal CWeaponTaser(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    public GameTime_t m_fFireTime { get; private set; } = new();

    internal new static SendNodeDecoder<CWeaponTaser> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_fFireTime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (CWeaponTaser @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_fFireTime = decoder(ref buffer);
            };
        }
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponTec9 : CCSWeaponBaseGun
{
    internal CWeaponTec9(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponTec9> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponUMP45 : CCSWeaponBaseGun
{
    internal CWeaponUMP45(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponUMP45> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponXM1014 : CCSWeaponBase
{
    internal CWeaponXM1014(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponXM1014> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBase.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWeaponZoneRepulsor : CCSWeaponBaseGun
{
    internal CWeaponZoneRepulsor(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWeaponZoneRepulsor> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CCSWeaponBaseGun.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class CWorld : CBaseModelEntity
{
    internal CWorld(EntityContext context, SendNodeDecoder<object> decoder) : base(context, decoder) {}

    internal new static SendNodeDecoder<CWorld> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        return CBaseModelEntity.CreateFieldDecoder(field, decoderSet);
    }
}

public partial class EntityRenderAttribute_t
{
    public CUtlStringToken m_ID { get; private set; }

    public Vector4D m_Values { get; private set; }

    internal static SendNodeDecoder<EntityRenderAttribute_t> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_ID")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (EntityRenderAttribute_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_ID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_Values")
        {
            var decoder = FieldDecode.CreateDecoder_Vector4D(field.FieldEncodingInfo);
            return (EntityRenderAttribute_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_Values = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class EntitySpottedState_t
{
    // MNetworkChangeCallback "OnIsSpottedChanged"
    public bool m_bSpotted { get; private set; }

    // MNetworkChangeCallback "OnIsSpottedChanged"
    public UInt32[] m_bSpottedByMask { get; private set; } = Array.Empty<UInt32>();

    internal static SendNodeDecoder<EntitySpottedState_t> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_bSpotted")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (EntitySpottedState_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bSpotted = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bSpottedByMask")
        {
            var fixedArraySize = field.VarType.ArrayLength;
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (EntitySpottedState_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (@this.m_bSpottedByMask.Length == 0) @this.m_bSpottedByMask = new UInt32[fixedArraySize];
                @this.m_bSpottedByMask[path[1]] = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class fogparams_t
{
    // MNetworkEncoder "coord"
    public Vector dirPrimary { get; private set; }

    public Color colorPrimary { get; private set; }

    public Color colorSecondary { get; private set; }

    // MNetworkUserGroup "FogController"
    public Color colorPrimaryLerpTo { get; private set; }

    // MNetworkUserGroup "FogController"
    public Color colorSecondaryLerpTo { get; private set; }

    public float start { get; private set; }

    public float end { get; private set; }

    // MNetworkUserGroup "FogController"
    public float farz { get; private set; }

    public float maxdensity { get; private set; }

    public float exponent { get; private set; }

    public float HDRColorScale { get; private set; }

    // MNetworkUserGroup "FogController"
    public float skyboxFogFactor { get; private set; }

    // MNetworkUserGroup "FogController"
    public float skyboxFogFactorLerpTo { get; private set; }

    // MNetworkUserGroup "FogController"
    public float startLerpTo { get; private set; }

    // MNetworkUserGroup "FogController"
    public float endLerpTo { get; private set; }

    // MNetworkUserGroup "FogController"
    public float maxdensityLerpTo { get; private set; }

    // MNetworkUserGroup "FogController"
    public GameTime_t lerptime { get; private set; } = new();

    // MNetworkUserGroup "FogController"
    public float duration { get; private set; }

    // MNetworkUserGroup "FogController"
    public float blendtobackground { get; private set; }

    // MNetworkUserGroup "FogController"
    public float scattering { get; private set; }

    // MNetworkUserGroup "FogController"
    public float locallightscale { get; private set; }

    public bool enable { get; private set; }

    public bool blend { get; private set; }

    public bool m_bNoReflectionFog { get; private set; }

    internal static SendNodeDecoder<fogparams_t> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "dirPrimary")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.dirPrimary = decoder(ref buffer);
            };
        }
        if (field.VarName == "colorPrimary")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.colorPrimary = decoder(ref buffer);
            };
        }
        if (field.VarName == "colorSecondary")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.colorSecondary = decoder(ref buffer);
            };
        }
        if (field.VarName == "colorPrimaryLerpTo")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.colorPrimaryLerpTo = decoder(ref buffer);
            };
        }
        if (field.VarName == "colorSecondaryLerpTo")
        {
            var decoder = FieldDecode.CreateDecoder_Color(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.colorSecondaryLerpTo = decoder(ref buffer);
            };
        }
        if (field.VarName == "start")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.start = decoder(ref buffer);
            };
        }
        if (field.VarName == "end")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.end = decoder(ref buffer);
            };
        }
        if (field.VarName == "farz")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.farz = decoder(ref buffer);
            };
        }
        if (field.VarName == "maxdensity")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.maxdensity = decoder(ref buffer);
            };
        }
        if (field.VarName == "exponent")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.exponent = decoder(ref buffer);
            };
        }
        if (field.VarName == "HDRColorScale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.HDRColorScale = decoder(ref buffer);
            };
        }
        if (field.VarName == "skyboxFogFactor")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.skyboxFogFactor = decoder(ref buffer);
            };
        }
        if (field.VarName == "skyboxFogFactorLerpTo")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.skyboxFogFactorLerpTo = decoder(ref buffer);
            };
        }
        if (field.VarName == "startLerpTo")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.startLerpTo = decoder(ref buffer);
            };
        }
        if (field.VarName == "endLerpTo")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.endLerpTo = decoder(ref buffer);
            };
        }
        if (field.VarName == "maxdensityLerpTo")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.maxdensityLerpTo = decoder(ref buffer);
            };
        }
        if (field.VarName == "lerptime")
        {
            var decoder = FieldDecode.CreateDecoder_GameTime_t(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.lerptime = decoder(ref buffer);
            };
        }
        if (field.VarName == "duration")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.duration = decoder(ref buffer);
            };
        }
        if (field.VarName == "blendtobackground")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.blendtobackground = decoder(ref buffer);
            };
        }
        if (field.VarName == "scattering")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.scattering = decoder(ref buffer);
            };
        }
        if (field.VarName == "locallightscale")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.locallightscale = decoder(ref buffer);
            };
        }
        if (field.VarName == "enable")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.enable = decoder(ref buffer);
            };
        }
        if (field.VarName == "blend")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.blend = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bNoReflectionFog")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (fogparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bNoReflectionFog = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class fogplayerparams_t
{
    // MNetworkUserGroup "PlayerFogController"
    public CHandle<CFogController> m_hCtrl { get; private set; }

    internal static SendNodeDecoder<fogplayerparams_t> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_hCtrl")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CFogController>(field.FieldEncodingInfo);
            return (fogplayerparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hCtrl = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class IEconItemInterface
{
    internal static SendNodeDecoder<IEconItemInterface> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class InfoForResourceTypeCModel
{
    internal static SendNodeDecoder<InfoForResourceTypeCModel> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class InfoForResourceTypeCPostProcessingResource
{
    internal static SendNodeDecoder<InfoForResourceTypeCPostProcessingResource> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class InfoForResourceTypeCTextureBase
{
    internal static SendNodeDecoder<InfoForResourceTypeCTextureBase> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class InfoForResourceTypeIMaterial2
{
    internal static SendNodeDecoder<InfoForResourceTypeIMaterial2> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class InfoForResourceTypeIParticleSystemDefinition
{
    internal static SendNodeDecoder<InfoForResourceTypeIParticleSystemDefinition> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class ISkeletonAnimationController
{
    internal static SendNodeDecoder<ISkeletonAnimationController> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class PhysicsRagdollPose_t
{
    internal static SendNodeDecoder<PhysicsRagdollPose_t> CreateDowncastDecoder(SerializerKey serializerKey, DecoderSet decoderSet, out Func<PhysicsRagdollPose_t> factory)
    {
        if (serializerKey.Name == "PhysicsRagdollPose_t")
        {
            factory = () => new PhysicsRagdollPose_t();
            return decoderSet.GetDecoder<PhysicsRagdollPose_t>(serializerKey);
        }
        throw new NotImplementedException($"Unknown derived class of PhysicsRagdollPose_t: {serializerKey}");
    }

    // MNetworkChangeCallback "OnTransformChanged"
    public NetworkedVector<CTransform> m_Transforms { get; private set; } = new NetworkedVector<CTransform>();

    public CHandle<CBaseEntity> m_hOwner { get; private set; }

    internal static SendNodeDecoder<PhysicsRagdollPose_t> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_Transforms")
        {
            var decoder = FieldDecode.CreateDecoder_CTransform(field.FieldEncodingInfo);
            return (PhysicsRagdollPose_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_Transforms.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_Transforms.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_Transforms[index] = element;
                }
            };
        }
        if (field.VarName == "m_hOwner")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CBaseEntity>(field.FieldEncodingInfo);
            return (PhysicsRagdollPose_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hOwner = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class SellbackPurchaseEntry_t
{
    public UInt16 m_unDefIdx { get; private set; }

    public Int32 m_nCost { get; private set; }

    public Int32 m_nPrevArmor { get; private set; }

    public bool m_bPrevHelmet { get; private set; }

    public CHandle<CEntityInstance> m_hItem { get; private set; }

    internal static SendNodeDecoder<SellbackPurchaseEntry_t> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_unDefIdx")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (SellbackPurchaseEntry_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_unDefIdx = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCost")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (SellbackPurchaseEntry_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nCost = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nPrevArmor")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (SellbackPurchaseEntry_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nPrevArmor = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bPrevHelmet")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (SellbackPurchaseEntry_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bPrevHelmet = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hItem")
        {
            var decoder = FieldDecode.CreateDecoder_CHandle<CEntityInstance>(field.FieldEncodingInfo);
            return (SellbackPurchaseEntry_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hItem = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class shard_model_desc_t
{
    public Int32 m_nModelID { get; private set; }

    public CStrongHandle<InfoForResourceTypeIMaterial2> m_hMaterial { get; private set; }

    public ShardSolid_t m_solid { get; private set; }

    public ShatterPanelMode m_ShatterPanelMode { get; private set; }

    public Vector2D m_vecPanelSize { get; private set; }

    public Vector2D m_vecStressPositionA { get; private set; }

    public Vector2D m_vecStressPositionB { get; private set; }

    public NetworkedVector<Vector2D> m_vecPanelVertices { get; private set; } = new NetworkedVector<Vector2D>();

    public float m_flGlassHalfThickness { get; private set; }

    public bool m_bHasParent { get; private set; }

    public bool m_bParentFrozen { get; private set; }

    public CUtlStringToken m_SurfacePropStringToken { get; private set; }

    public CUtlStringToken m_LightGroup { get; private set; }

    internal static SendNodeDecoder<shard_model_desc_t> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nModelID")
        {
            var decoder = FieldDecode.CreateDecoder_Int32(field.FieldEncodingInfo);
            return (shard_model_desc_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nModelID = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_hMaterial")
        {
            var decoder = FieldDecode.CreateDecoder_CStrongHandle<InfoForResourceTypeIMaterial2>(field.FieldEncodingInfo);
            return (shard_model_desc_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_hMaterial = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_solid")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ShardSolid_t>(field.FieldEncodingInfo);
            return (shard_model_desc_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_solid = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_ShatterPanelMode")
        {
            var decoder = FieldDecode.CreateDecoder_enum<ShatterPanelMode>(field.FieldEncodingInfo);
            return (shard_model_desc_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_ShatterPanelMode = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecPanelSize")
        {
            var decoder = FieldDecode.CreateDecoder_Vector2D(field.FieldEncodingInfo);
            return (shard_model_desc_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecPanelSize = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecStressPositionA")
        {
            var decoder = FieldDecode.CreateDecoder_Vector2D(field.FieldEncodingInfo);
            return (shard_model_desc_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecStressPositionA = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecStressPositionB")
        {
            var decoder = FieldDecode.CreateDecoder_Vector2D(field.FieldEncodingInfo);
            return (shard_model_desc_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_vecStressPositionB = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_vecPanelVertices")
        {
            var decoder = FieldDecode.CreateDecoder_Vector2D(field.FieldEncodingInfo);
            return (shard_model_desc_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_vecPanelVertices.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length == 2);
                    var index = path[1];
                    @this.m_vecPanelVertices.EnsureSize(index + 1);
                    var element = decoder(ref buffer);
                    @this.m_vecPanelVertices[index] = element;
                }
            };
        }
        if (field.VarName == "m_flGlassHalfThickness")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (shard_model_desc_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_flGlassHalfThickness = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bHasParent")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (shard_model_desc_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bHasParent = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_bParentFrozen")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (shard_model_desc_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_bParentFrozen = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_SurfacePropStringToken")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (shard_model_desc_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_SurfacePropStringToken = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_LightGroup")
        {
            var decoder = FieldDecode.CreateDecoder_CUtlStringToken(field.FieldEncodingInfo);
            return (shard_model_desc_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_LightGroup = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class sky3dparams_t
{
    public Int16 scale { get; private set; }

    // MNetworkEncoder "coord"
    public Vector origin { get; private set; }

    public bool bClip3DSkyBoxNearToWorldFar { get; private set; }

    public float flClip3DSkyBoxNearToWorldFarOffset { get; private set; }

    public fogparams_t fog { get; private set; } = new();

    public WorldGroupId_t m_nWorldGroupID { get; private set; }

    internal static SendNodeDecoder<sky3dparams_t> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "scale")
        {
            var decoder = FieldDecode.CreateDecoder_Int16(field.FieldEncodingInfo);
            return (sky3dparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.scale = decoder(ref buffer);
            };
        }
        if (field.VarName == "origin")
        {
            var decoder = FieldDecode.CreateDecoder_Vector(field.FieldEncodingInfo);
            return (sky3dparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.origin = decoder(ref buffer);
            };
        }
        if (field.VarName == "bClip3DSkyBoxNearToWorldFar")
        {
            var decoder = FieldDecode.CreateDecoder_bool(field.FieldEncodingInfo);
            return (sky3dparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.bClip3DSkyBoxNearToWorldFar = decoder(ref buffer);
            };
        }
        if (field.VarName == "flClip3DSkyBoxNearToWorldFarOffset")
        {
            var decoder = FieldDecode.CreateDecoder_float(field.FieldEncodingInfo);
            return (sky3dparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.flClip3DSkyBoxNearToWorldFarOffset = decoder(ref buffer);
            };
        }
        if (field.SendNode.Length >= 1 && field.SendNode.Span[0] == "fog")
        {
            var innerDecoder = fogparams_t.CreateFieldDecoder(field with {SendNode = field.SendNode[1..]}, decoderSet);
            return (sky3dparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                innerDecoder(@this.fog, path, ref buffer);
            };
        }
        if (field.VarName == "m_nWorldGroupID")
        {
            var decoder = FieldDecode.CreateDecoder_WorldGroupId_t(field.FieldEncodingInfo);
            return (sky3dparams_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nWorldGroupID = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class ViewAngleServerChange_t
{
    public FixAngleSet_t nType { get; private set; }

    // MNetworkEncoder "qangle_precise"
    public QAngle qAngle { get; private set; }

    public UInt32 nIndex { get; private set; }

    internal static SendNodeDecoder<ViewAngleServerChange_t> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "nType")
        {
            var decoder = FieldDecode.CreateDecoder_enum<FixAngleSet_t>(field.FieldEncodingInfo);
            return (ViewAngleServerChange_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.nType = decoder(ref buffer);
            };
        }
        if (field.VarName == "qAngle")
        {
            var decoder = FieldDecode.CreateDecoder_QAngle(field.FieldEncodingInfo);
            return (ViewAngleServerChange_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.qAngle = decoder(ref buffer);
            };
        }
        if (field.VarName == "nIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (ViewAngleServerChange_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.nIndex = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class VPhysicsCollisionAttribute_t
{
    public UInt64 m_nInteractsAs { get; private set; }

    public UInt64 m_nInteractsWith { get; private set; }

    public UInt64 m_nInteractsExclude { get; private set; }

    public UInt32 m_nEntityId { get; private set; }

    public UInt32 m_nOwnerId { get; private set; }

    public UInt16 m_nHierarchyId { get; private set; }

    public byte m_nCollisionGroup { get; private set; }

    public byte m_nCollisionFunctionMask { get; private set; }

    internal static SendNodeDecoder<VPhysicsCollisionAttribute_t> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nInteractsAs")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nInteractsAs = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nInteractsWith")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nInteractsWith = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nInteractsExclude")
        {
            var decoder = FieldDecode.CreateDecoder_UInt64(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nInteractsExclude = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nEntityId")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nEntityId = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nOwnerId")
        {
            var decoder = FieldDecode.CreateDecoder_UInt32(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nOwnerId = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nHierarchyId")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nHierarchyId = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCollisionGroup")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nCollisionGroup = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCollisionFunctionMask")
        {
            var decoder = FieldDecode.CreateDecoder_byte(field.FieldEncodingInfo);
            return (VPhysicsCollisionAttribute_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nCollisionFunctionMask = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class WeaponPurchaseCount_t
{
    public UInt16 m_nItemDefIndex { get; private set; }

    public UInt16 m_nCount { get; private set; }

    internal static SendNodeDecoder<WeaponPurchaseCount_t> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_nItemDefIndex")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (WeaponPurchaseCount_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nItemDefIndex = decoder(ref buffer);
            };
        }
        if (field.VarName == "m_nCount")
        {
            var decoder = FieldDecode.CreateDecoder_UInt16(field.FieldEncodingInfo);
            return (WeaponPurchaseCount_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                @this.m_nCount = decoder(ref buffer);
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

public partial class WeaponPurchaseTracker_t
{
    public NetworkedVector<WeaponPurchaseCount_t> m_weaponPurchases { get; private set; } = new NetworkedVector<WeaponPurchaseCount_t>();

    internal static SendNodeDecoder<WeaponPurchaseTracker_t> CreateFieldDecoder(SerializableField field, DecoderSet decoderSet)
    {
        if (field.VarName == "m_weaponPurchases")
        {
            var innerDecoder = decoderSet.GetDecoder<WeaponPurchaseCount_t>(field.FieldSerializerKey!.Value);
            return (WeaponPurchaseTracker_t @this, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
            {
                if (path.Length == 1)
                {
                    var newSize = (int)buffer.ReadUVarInt32();
                    @this.m_weaponPurchases.Resize(newSize);
                }
                else
                {
                    Debug.Assert(path.Length > 2);
                    var index = path[1];
                    @this.m_weaponPurchases.EnsureSize(index + 1);
                    var element = @this.m_weaponPurchases[index] ??= new WeaponPurchaseCount_t();
                    innerDecoder(element, path[2..], ref buffer);
                }
            };
        }
        throw new NotSupportedException($"Unrecognised serializer field: {field.VarName}");
    }
}

internal static class SendNodeDecoders
{
    public static SendNodeDecoderFactory<T> GetFactory<T>()
    {
        if (typeof(T) == typeof(audioparams_t))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<audioparams_t>(audioparams_t.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAK47))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAK47>(CAK47.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAnimGraphNetworkedVariables))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAnimGraphNetworkedVariables>(CAnimGraphNetworkedVariables.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAttributeContainer))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAttributeContainer>(CAttributeContainer.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAttributeList))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAttributeList>(CAttributeList.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CAttributeManager))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CAttributeManager>(CAttributeManager.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBarnLight))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBarnLight>(CBarnLight.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseAnimGraph))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseAnimGraph>(CBaseAnimGraph.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseAnimGraphController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseAnimGraphController>(CBaseAnimGraphController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseButton))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseButton>(CBaseButton.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseClientUIEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseClientUIEntity>(CBaseClientUIEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseCombatCharacter))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseCombatCharacter>(CBaseCombatCharacter.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseCSGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseCSGrenade>(CBaseCSGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseCSGrenadeProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseCSGrenadeProjectile>(CBaseCSGrenadeProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseDoor))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseDoor>(CBaseDoor.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseEntity>(CBaseEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseFire))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseFire>(CBaseFire.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseFlex))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseFlex>(CBaseFlex.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseGrenade>(CBaseGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseModelEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseModelEntity>(CBaseModelEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBasePlayerController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBasePlayerController>(CBasePlayerController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBasePlayerPawn))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBasePlayerPawn>(CBasePlayerPawn.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBasePlayerWeapon))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBasePlayerWeapon>(CBasePlayerWeapon.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseProp>(CBaseProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBasePropDoor))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBasePropDoor>(CBasePropDoor.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseToggle))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseToggle>(CBaseToggle.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseTrigger))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseTrigger>(CBaseTrigger.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBaseViewModel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBaseViewModel>(CBaseViewModel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBeam))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBeam>(CBeam.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBodyComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBodyComponent>(CBodyComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBodyComponentBaseAnimGraph))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBodyComponentBaseAnimGraph>(CBodyComponentBaseAnimGraph.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBodyComponentBaseModelEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBodyComponentBaseModelEntity>(CBodyComponentBaseModelEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBodyComponentPoint))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBodyComponentPoint>(CBodyComponentPoint.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBodyComponentSkeletonInstance))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBodyComponentSkeletonInstance>(CBodyComponentSkeletonInstance.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBombTarget))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBombTarget>(CBombTarget.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBreachCharge))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBreachCharge>(CBreachCharge.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBreachChargeProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBreachChargeProjectile>(CBreachChargeProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBreakable))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBreakable>(CBreakable.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBreakableProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBreakableProp>(CBreakableProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBumpMine))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBumpMine>(CBumpMine.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CBumpMineProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CBumpMineProjectile>(CBumpMineProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CC4))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CC4>(CC4.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CChicken))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CChicken>(CChicken.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCollisionProperty))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCollisionProperty>(CCollisionProperty.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CColorCorrection))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CColorCorrection>(CColorCorrection.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CColorCorrectionVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CColorCorrectionVolume>(CColorCorrectionVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGameModeRules))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGameModeRules>(CCSGameModeRules.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGameModeRules_Deathmatch))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGameModeRules_Deathmatch>(CCSGameModeRules_Deathmatch.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGameModeRules_Noop))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGameModeRules_Noop>(CCSGameModeRules_Noop.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGameModeRules_Scripted))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGameModeRules_Scripted>(CCSGameModeRules_Scripted.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGameRules))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGameRules>(CCSGameRules.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGameRulesProxy))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGameRulesProxy>(CCSGameRulesProxy.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_TeamIntroCharacterPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_TeamIntroCharacterPosition>(CCSGO_TeamIntroCharacterPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_TeamIntroCounterTerroristPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_TeamIntroCounterTerroristPosition>(CCSGO_TeamIntroCounterTerroristPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_TeamIntroTerroristPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_TeamIntroTerroristPosition>(CCSGO_TeamIntroTerroristPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_TeamPreviewCharacterPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_TeamPreviewCharacterPosition>(CCSGO_TeamPreviewCharacterPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_TeamSelectCharacterPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_TeamSelectCharacterPosition>(CCSGO_TeamSelectCharacterPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_TeamSelectCounterTerroristPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_TeamSelectCounterTerroristPosition>(CCSGO_TeamSelectCounterTerroristPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_TeamSelectTerroristPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_TeamSelectTerroristPosition>(CCSGO_TeamSelectTerroristPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_WingmanIntroCharacterPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_WingmanIntroCharacterPosition>(CCSGO_WingmanIntroCharacterPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_WingmanIntroCounterTerroristPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_WingmanIntroCounterTerroristPosition>(CCSGO_WingmanIntroCounterTerroristPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGO_WingmanIntroTerroristPosition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGO_WingmanIntroTerroristPosition>(CCSGO_WingmanIntroTerroristPosition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSGOViewModel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSGOViewModel>(CCSGOViewModel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSMinimapBoundary))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSMinimapBoundary>(CCSMinimapBoundary.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSObserver_CameraServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSObserver_CameraServices>(CCSObserver_CameraServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSObserver_MovementServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSObserver_MovementServices>(CCSObserver_MovementServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSObserver_ObserverServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSObserver_ObserverServices>(CCSObserver_ObserverServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSObserver_UseServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSObserver_UseServices>(CCSObserver_UseServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSObserver_ViewModelServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSObserver_ViewModelServices>(CCSObserver_ViewModelServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSObserverPawn))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSObserverPawn>(CCSObserverPawn.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_ActionTrackingServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_ActionTrackingServices>(CCSPlayer_ActionTrackingServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_BulletServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_BulletServices>(CCSPlayer_BulletServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_BuyServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_BuyServices>(CCSPlayer_BuyServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_CameraServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_CameraServices>(CCSPlayer_CameraServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_HostageServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_HostageServices>(CCSPlayer_HostageServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_ItemServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_ItemServices>(CCSPlayer_ItemServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_MovementServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_MovementServices>(CCSPlayer_MovementServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_PingServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_PingServices>(CCSPlayer_PingServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_UseServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_UseServices>(CCSPlayer_UseServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_ViewModelServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_ViewModelServices>(CCSPlayer_ViewModelServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_WaterServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_WaterServices>(CCSPlayer_WaterServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayer_WeaponServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayer_WeaponServices>(CCSPlayer_WeaponServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayerBase_CameraServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayerBase_CameraServices>(CCSPlayerBase_CameraServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayerController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayerController>(CCSPlayerController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayerController_ActionTrackingServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayerController_ActionTrackingServices>(CCSPlayerController_ActionTrackingServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayerController_DamageServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayerController_DamageServices>(CCSPlayerController_DamageServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayerController_InGameMoneyServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayerController_InGameMoneyServices>(CCSPlayerController_InGameMoneyServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayerController_InventoryServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayerController_InventoryServices>(CCSPlayerController_InventoryServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayerPawn))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayerPawn>(CCSPlayerPawn.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayerPawnBase))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayerPawnBase>(CCSPlayerPawnBase.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSPlayerResource))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSPlayerResource>(CCSPlayerResource.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSTeam))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSTeam>(CCSTeam.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSWeaponBase))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSWeaponBase>(CCSWeaponBase.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CCSWeaponBaseGun))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CCSWeaponBaseGun>(CCSWeaponBaseGun.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CDamageRecord))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CDamageRecord>(CDamageRecord.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CDEagle))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CDEagle>(CDEagle.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CDecoyGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CDecoyGrenade>(CDecoyGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CDecoyProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CDecoyProjectile>(CDecoyProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CDynamicLight))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CDynamicLight>(CDynamicLight.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CDynamicProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CDynamicProp>(CDynamicProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEconEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEconEntity>(CEconEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEconItemAttribute))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEconItemAttribute>(CEconItemAttribute.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEconItemView))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEconItemView>(CEconItemView.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEconWearable))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEconWearable>(CEconWearable.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEntityComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEntityComponent>(CEntityComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEntityDissolve))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEntityDissolve>(CEntityDissolve.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEntityFlame))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEntityFlame>(CEntityFlame.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEntityIdentity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEntityIdentity>(CEntityIdentity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEntityInstance))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEntityInstance>(CEntityInstance.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvCombinedLightProbeVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvCombinedLightProbeVolume>(CEnvCombinedLightProbeVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvCubemap))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvCubemap>(CEnvCubemap.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvCubemapBox))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvCubemapBox>(CEnvCubemapBox.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvCubemapFog))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvCubemapFog>(CEnvCubemapFog.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvDecal))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvDecal>(CEnvDecal.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvDetailController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvDetailController>(CEnvDetailController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvLightProbeVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvLightProbeVolume>(CEnvLightProbeVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvParticleGlow))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvParticleGlow>(CEnvParticleGlow.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvProjectedTexture))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvProjectedTexture>(CEnvProjectedTexture.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvScreenOverlay))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvScreenOverlay>(CEnvScreenOverlay.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvSky))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvSky>(CEnvSky.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvVolumetricFogController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvVolumetricFogController>(CEnvVolumetricFogController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvVolumetricFogVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvVolumetricFogVolume>(CEnvVolumetricFogVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvWind))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvWind>(CEnvWind.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CEnvWindShared))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CEnvWindShared>(CEnvWindShared.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFireCrackerBlast))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFireCrackerBlast>(CFireCrackerBlast.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFireSmoke))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFireSmoke>(CFireSmoke.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFish))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFish>(CFish.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFists))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFists>(CFists.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFlashbang))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFlashbang>(CFlashbang.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFogController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFogController>(CFogController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFootstepControl))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFootstepControl>(CFootstepControl.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncBrush))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncBrush>(CFuncBrush.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncConveyor))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncConveyor>(CFuncConveyor.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncElectrifiedVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncElectrifiedVolume>(CFuncElectrifiedVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncLadder))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncLadder>(CFuncLadder.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncMonitor))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncMonitor>(CFuncMonitor.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncMoveLinear))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncMoveLinear>(CFuncMoveLinear.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncRotating))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncRotating>(CFuncRotating.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncTrackTrain))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncTrackTrain>(CFuncTrackTrain.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CFuncWater))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CFuncWater>(CFuncWater.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CGameRules))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CGameRules>(CGameRules.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CGameRulesProxy))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CGameRulesProxy>(CGameRulesProxy.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CGameSceneNode))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CGameSceneNode>(CGameSceneNode.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CGlowProperty))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CGlowProperty>(CGlowProperty.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CGradientFog))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CGradientFog>(CGradientFog.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CHandleTest))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CHandleTest>(CHandleTest.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CHEGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CHEGrenade>(CHEGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CHitboxComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CHitboxComponent>(CHitboxComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CHostage))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CHostage>(CHostage.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CHostageCarriableProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CHostageCarriableProp>(CHostageCarriableProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CHostageExpresserShim))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CHostageExpresserShim>(CHostageExpresserShim.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CHostageRescueZone))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CHostageRescueZone>(CHostageRescueZone.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CHostageRescueZoneShim))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CHostageRescueZoneShim>(CHostageRescueZoneShim.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CIncendiaryGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CIncendiaryGrenade>(CIncendiaryGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CInferno))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CInferno>(CInferno.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CInfoInstructorHintHostageRescueZone))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CInfoInstructorHintHostageRescueZone>(CInfoInstructorHintHostageRescueZone.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CInfoLadderDismount))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CInfoLadderDismount>(CInfoLadderDismount.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CInfoOffscreenPanoramaTexture))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CInfoOffscreenPanoramaTexture>(CInfoOffscreenPanoramaTexture.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CInfoVisibilityBox))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CInfoVisibilityBox>(CInfoVisibilityBox.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CInfoWorldLayer))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CInfoWorldLayer>(CInfoWorldLayer.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CItem))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CItem>(CItem.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CItem_Healthshot))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CItem_Healthshot>(CItem_Healthshot.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CItemDogtags))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CItemDogtags>(CItemDogtags.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CKnife))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CKnife>(CKnife.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightComponent>(CLightComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightDirectionalEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightDirectionalEntity>(CLightDirectionalEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightEntity>(CLightEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightEnvironmentEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightEnvironmentEntity>(CLightEnvironmentEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightGlow))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightGlow>(CLightGlow.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightOrthoEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightOrthoEntity>(CLightOrthoEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CLightSpotEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CLightSpotEntity>(CLightSpotEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CMapVetoPickController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CMapVetoPickController>(CMapVetoPickController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CMelee))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CMelee>(CMelee.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CModelPointEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CModelPointEntity>(CModelPointEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CModelState))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CModelState>(CModelState.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CMolotovGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CMolotovGrenade>(CMolotovGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CMolotovProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CMolotovProjectile>(CMolotovProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CMultiplayRules))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CMultiplayRules>(CMultiplayRules.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNetworkedSequenceOperation))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNetworkedSequenceOperation>(CNetworkedSequenceOperation.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNetworkOriginCellCoordQuantizedVector))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNetworkOriginCellCoordQuantizedVector>(CNetworkOriginCellCoordQuantizedVector.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNetworkVelocityVector))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNetworkVelocityVector>(CNetworkVelocityVector.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CNetworkViewOffsetVector))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CNetworkViewOffsetVector>(CNetworkViewOffsetVector.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(COmniLight))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<COmniLight>(COmniLight.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CountdownTimer))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CountdownTimer>(CountdownTimer.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CParticleSystem))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CParticleSystem>(CParticleSystem.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPathParticleRope))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPathParticleRope>(CPathParticleRope.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPhysBox))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPhysBox>(CPhysBox.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPhysicsProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPhysicsProp>(CPhysicsProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPhysicsPropMultiplayer))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPhysicsPropMultiplayer>(CPhysicsPropMultiplayer.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPhysMagnet))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPhysMagnet>(CPhysMagnet.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlantedC4))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlantedC4>(CPlantedC4.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_AutoaimServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_AutoaimServices>(CPlayer_AutoaimServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_CameraServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_CameraServices>(CPlayer_CameraServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_FlashlightServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_FlashlightServices>(CPlayer_FlashlightServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_ItemServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_ItemServices>(CPlayer_ItemServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_MovementServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_MovementServices>(CPlayer_MovementServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_MovementServices_Humanoid))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_MovementServices_Humanoid>(CPlayer_MovementServices_Humanoid.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_ObserverServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_ObserverServices>(CPlayer_ObserverServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_UseServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_UseServices>(CPlayer_UseServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_ViewModelServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_ViewModelServices>(CPlayer_ViewModelServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_WaterServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_WaterServices>(CPlayer_WaterServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayer_WeaponServices))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayer_WeaponServices>(CPlayer_WeaponServices.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayerControllerComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayerControllerComponent>(CPlayerControllerComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayerPawnComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayerPawnComponent>(CPlayerPawnComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayerPing))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayerPing>(CPlayerPing.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayerSprayDecal))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayerSprayDecal>(CPlayerSprayDecal.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPlayerVisibility))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPlayerVisibility>(CPlayerVisibility.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointCamera))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointCamera>(CPointCamera.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointClientUIDialog))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointClientUIDialog>(CPointClientUIDialog.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointClientUIWorldPanel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointClientUIWorldPanel>(CPointClientUIWorldPanel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointClientUIWorldTextPanel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointClientUIWorldTextPanel>(CPointClientUIWorldTextPanel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointCommentaryNode))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointCommentaryNode>(CPointCommentaryNode.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointEntity>(CPointEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointValueRemapper))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointValueRemapper>(CPointValueRemapper.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPointWorldText))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPointWorldText>(CPointWorldText.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPostProcessingVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPostProcessingVolume>(CPostProcessingVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPrecipitation))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPrecipitation>(CPrecipitation.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPrecipitationBlocker))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPrecipitationBlocker>(CPrecipitationBlocker.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CPredictedViewModel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CPredictedViewModel>(CPredictedViewModel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRagdollManager))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRagdollManager>(CRagdollManager.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRagdollProp))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRagdollProp>(CRagdollProp.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRagdollPropAttached))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRagdollPropAttached>(CRagdollPropAttached.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRectLight))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRectLight>(CRectLight.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRenderComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRenderComponent>(CRenderComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRetakeGameRules))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRetakeGameRules>(CRetakeGameRules.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CRopeKeyframe))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CRopeKeyframe>(CRopeKeyframe.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSceneEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSceneEntity>(CSceneEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CScriptComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CScriptComponent>(CScriptComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSensorGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSensorGrenade>(CSensorGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSensorGrenadeProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSensorGrenadeProjectile>(CSensorGrenadeProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CShatterGlassShardPhysics))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CShatterGlassShardPhysics>(CShatterGlassShardPhysics.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSkeletonAnimationController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSkeletonAnimationController>(CSkeletonAnimationController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSkeletonInstance))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSkeletonInstance>(CSkeletonInstance.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSkyCamera))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSkyCamera>(CSkyCamera.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSMatchStats_t))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSMatchStats_t>(CSMatchStats_t.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSmokeGrenade))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSmokeGrenade>(CSmokeGrenade.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSmokeGrenadeProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSmokeGrenadeProjectile>(CSmokeGrenadeProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundAreaEntityBase))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundAreaEntityBase>(CSoundAreaEntityBase.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundAreaEntityOrientedBox))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundAreaEntityOrientedBox>(CSoundAreaEntityOrientedBox.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundAreaEntitySphere))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundAreaEntitySphere>(CSoundAreaEntitySphere.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetAABBEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetAABBEntity>(CSoundOpvarSetAABBEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetOBBEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetOBBEntity>(CSoundOpvarSetOBBEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetOBBWindEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetOBBWindEntity>(CSoundOpvarSetOBBWindEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetPathCornerEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetPathCornerEntity>(CSoundOpvarSetPathCornerEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetPointBase))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetPointBase>(CSoundOpvarSetPointBase.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSoundOpvarSetPointEntity))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSoundOpvarSetPointEntity>(CSoundOpvarSetPointEntity.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSPerRoundStats_t))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSPerRoundStats_t>(CSPerRoundStats_t.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSpotlightEnd))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSpotlightEnd>(CSpotlightEnd.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSprite))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSprite>(CSprite.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSpriteOriented))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSpriteOriented>(CSpriteOriented.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CSun))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CSun>(CSun.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTablet))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTablet>(CTablet.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTeam))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTeam>(CTeam.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTeamplayRules))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTeamplayRules>(CTeamplayRules.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTextureBasedAnimatable))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTextureBasedAnimatable>(CTextureBasedAnimatable.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTonemapController2))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTonemapController2>(CTonemapController2.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTouchExpansionComponent))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTouchExpansionComponent>(CTouchExpansionComponent.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTriggerBuoyancy))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTriggerBuoyancy>(CTriggerBuoyancy.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTriggerTripWire))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTriggerTripWire>(CTriggerTripWire.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTriggerVolume))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTriggerVolume>(CTriggerVolume.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTripWireFire))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTripWireFire>(CTripWireFire.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CTripWireFireProjectile))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CTripWireFireProjectile>(CTripWireFireProjectile.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CVoteController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CVoteController>(CVoteController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWaterBullet))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWaterBullet>(CWaterBullet.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponAug))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponAug>(CWeaponAug.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponAWP))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponAWP>(CWeaponAWP.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponBaseItem))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponBaseItem>(CWeaponBaseItem.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponBizon))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponBizon>(CWeaponBizon.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponElite))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponElite>(CWeaponElite.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponFamas))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponFamas>(CWeaponFamas.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponFiveSeven))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponFiveSeven>(CWeaponFiveSeven.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponG3SG1))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponG3SG1>(CWeaponG3SG1.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponGalilAR))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponGalilAR>(CWeaponGalilAR.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponGlock))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponGlock>(CWeaponGlock.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponHKP2000))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponHKP2000>(CWeaponHKP2000.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponM249))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponM249>(CWeaponM249.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponM4A1))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponM4A1>(CWeaponM4A1.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponMAC10))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponMAC10>(CWeaponMAC10.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponMag7))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponMag7>(CWeaponMag7.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponMP7))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponMP7>(CWeaponMP7.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponMP9))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponMP9>(CWeaponMP9.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponNegev))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponNegev>(CWeaponNegev.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponNOVA))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponNOVA>(CWeaponNOVA.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponP250))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponP250>(CWeaponP250.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponP90))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponP90>(CWeaponP90.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponSawedoff))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponSawedoff>(CWeaponSawedoff.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponSCAR20))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponSCAR20>(CWeaponSCAR20.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponSG556))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponSG556>(CWeaponSG556.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponShield))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponShield>(CWeaponShield.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponSSG08))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponSSG08>(CWeaponSSG08.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponTaser))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponTaser>(CWeaponTaser.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponTec9))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponTec9>(CWeaponTec9.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponUMP45))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponUMP45>(CWeaponUMP45.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponXM1014))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponXM1014>(CWeaponXM1014.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWeaponZoneRepulsor))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWeaponZoneRepulsor>(CWeaponZoneRepulsor.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(CWorld))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<CWorld>(CWorld.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(EntityRenderAttribute_t))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<EntityRenderAttribute_t>(EntityRenderAttribute_t.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(EntitySpottedState_t))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<EntitySpottedState_t>(EntitySpottedState_t.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(fogparams_t))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<fogparams_t>(fogparams_t.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(fogplayerparams_t))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<fogplayerparams_t>(fogplayerparams_t.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(IEconItemInterface))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<IEconItemInterface>(IEconItemInterface.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(InfoForResourceTypeCModel))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<InfoForResourceTypeCModel>(InfoForResourceTypeCModel.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(InfoForResourceTypeCPostProcessingResource))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<InfoForResourceTypeCPostProcessingResource>(InfoForResourceTypeCPostProcessingResource.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(InfoForResourceTypeCTextureBase))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<InfoForResourceTypeCTextureBase>(InfoForResourceTypeCTextureBase.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(InfoForResourceTypeIMaterial2))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<InfoForResourceTypeIMaterial2>(InfoForResourceTypeIMaterial2.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(InfoForResourceTypeIParticleSystemDefinition))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<InfoForResourceTypeIParticleSystemDefinition>(InfoForResourceTypeIParticleSystemDefinition.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(ISkeletonAnimationController))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<ISkeletonAnimationController>(ISkeletonAnimationController.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(PhysicsRagdollPose_t))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<PhysicsRagdollPose_t>(PhysicsRagdollPose_t.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(SellbackPurchaseEntry_t))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<SellbackPurchaseEntry_t>(SellbackPurchaseEntry_t.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(shard_model_desc_t))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<shard_model_desc_t>(shard_model_desc_t.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(sky3dparams_t))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<sky3dparams_t>(sky3dparams_t.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(ViewAngleServerChange_t))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<ViewAngleServerChange_t>(ViewAngleServerChange_t.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(VPhysicsCollisionAttribute_t))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<VPhysicsCollisionAttribute_t>(VPhysicsCollisionAttribute_t.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(WeaponPurchaseCount_t))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<WeaponPurchaseCount_t>(WeaponPurchaseCount_t.CreateFieldDecoder);
        }
        if (typeof(T) == typeof(WeaponPurchaseTracker_t))
        {
            return (SendNodeDecoderFactory<T>)(object)new SendNodeDecoderFactory<WeaponPurchaseTracker_t>(WeaponPurchaseTracker_t.CreateFieldDecoder);
        }

        throw new NotImplementedException($"Unknown send node class: {typeof(T)}");
    }
}

internal static class EntityFactories
{
    public static readonly IReadOnlyDictionary<string, EntityFactory> All = new Dictionary<string, EntityFactory>
    {
        {"CAK47", (context, decoder) => new CAK47(context, decoder)},
        {"CBarnLight", (context, decoder) => new CBarnLight(context, decoder)},
        {"CBaseAnimGraph", (context, decoder) => new CBaseAnimGraph(context, decoder)},
        {"CBaseButton", (context, decoder) => new CBaseButton(context, decoder)},
        {"CBaseClientUIEntity", (context, decoder) => new CBaseClientUIEntity(context, decoder)},
        {"CBaseCombatCharacter", (context, decoder) => new CBaseCombatCharacter(context, decoder)},
        {"CBaseCSGrenade", (context, decoder) => new CBaseCSGrenade(context, decoder)},
        {"CBaseCSGrenadeProjectile", (context, decoder) => new CBaseCSGrenadeProjectile(context, decoder)},
        {"CBaseDoor", (context, decoder) => new CBaseDoor(context, decoder)},
        {"CBaseEntity", (context, decoder) => new CBaseEntity(context, decoder)},
        {"CBaseFlex", (context, decoder) => new CBaseFlex(context, decoder)},
        {"CBaseGrenade", (context, decoder) => new CBaseGrenade(context, decoder)},
        {"CBaseModelEntity", (context, decoder) => new CBaseModelEntity(context, decoder)},
        {"CBasePlayerController", (context, decoder) => new CBasePlayerController(context, decoder)},
        {"CBasePlayerPawn", (context, decoder) => new CBasePlayerPawn(context, decoder)},
        {"CBasePlayerWeapon", (context, decoder) => new CBasePlayerWeapon(context, decoder)},
        {"CBasePropDoor", (context, decoder) => new CBasePropDoor(context, decoder)},
        {"CBaseToggle", (context, decoder) => new CBaseToggle(context, decoder)},
        {"CBaseTrigger", (context, decoder) => new CBaseTrigger(context, decoder)},
        {"CBaseViewModel", (context, decoder) => new CBaseViewModel(context, decoder)},
        {"CBeam", (context, decoder) => new CBeam(context, decoder)},
        {"CBombTarget", (context, decoder) => new CBombTarget(context, decoder)},
        {"CBreachCharge", (context, decoder) => new CBreachCharge(context, decoder)},
        {"CBreachChargeProjectile", (context, decoder) => new CBreachChargeProjectile(context, decoder)},
        {"CBreakable", (context, decoder) => new CBreakable(context, decoder)},
        {"CBreakableProp", (context, decoder) => new CBreakableProp(context, decoder)},
        {"CBumpMine", (context, decoder) => new CBumpMine(context, decoder)},
        {"CBumpMineProjectile", (context, decoder) => new CBumpMineProjectile(context, decoder)},
        {"CC4", (context, decoder) => new CC4(context, decoder)},
        {"CChicken", (context, decoder) => new CChicken(context, decoder)},
        {"CColorCorrection", (context, decoder) => new CColorCorrection(context, decoder)},
        {"CColorCorrectionVolume", (context, decoder) => new CColorCorrectionVolume(context, decoder)},
        {"CCSGameRulesProxy", (context, decoder) => new CCSGameRulesProxy(context, decoder)},
        {"CCSGO_TeamIntroCharacterPosition", (context, decoder) => new CCSGO_TeamIntroCharacterPosition(context, decoder)},
        {"CCSGO_TeamIntroCounterTerroristPosition", (context, decoder) => new CCSGO_TeamIntroCounterTerroristPosition(context, decoder)},
        {"CCSGO_TeamIntroTerroristPosition", (context, decoder) => new CCSGO_TeamIntroTerroristPosition(context, decoder)},
        {"CCSGO_TeamPreviewCharacterPosition", (context, decoder) => new CCSGO_TeamPreviewCharacterPosition(context, decoder)},
        {"CCSGO_TeamSelectCharacterPosition", (context, decoder) => new CCSGO_TeamSelectCharacterPosition(context, decoder)},
        {"CCSGO_TeamSelectCounterTerroristPosition", (context, decoder) => new CCSGO_TeamSelectCounterTerroristPosition(context, decoder)},
        {"CCSGO_TeamSelectTerroristPosition", (context, decoder) => new CCSGO_TeamSelectTerroristPosition(context, decoder)},
        {"CCSGO_WingmanIntroCharacterPosition", (context, decoder) => new CCSGO_WingmanIntroCharacterPosition(context, decoder)},
        {"CCSGO_WingmanIntroCounterTerroristPosition", (context, decoder) => new CCSGO_WingmanIntroCounterTerroristPosition(context, decoder)},
        {"CCSGO_WingmanIntroTerroristPosition", (context, decoder) => new CCSGO_WingmanIntroTerroristPosition(context, decoder)},
        {"CCSGOViewModel", (context, decoder) => new CCSGOViewModel(context, decoder)},
        {"CCSMinimapBoundary", (context, decoder) => new CCSMinimapBoundary(context, decoder)},
        {"CCSObserverPawn", (context, decoder) => new CCSObserverPawn(context, decoder)},
        {"CCSPlayerController", (context, decoder) => new CCSPlayerController(context, decoder)},
        {"CCSPlayerPawn", (context, decoder) => new CCSPlayerPawn(context, decoder)},
        {"CCSPlayerPawnBase", (context, decoder) => new CCSPlayerPawnBase(context, decoder)},
        {"CCSPlayerResource", (context, decoder) => new CCSPlayerResource(context, decoder)},
        {"CCSTeam", (context, decoder) => new CCSTeam(context, decoder)},
        {"CCSWeaponBase", (context, decoder) => new CCSWeaponBase(context, decoder)},
        {"CCSWeaponBaseGun", (context, decoder) => new CCSWeaponBaseGun(context, decoder)},
        {"CDEagle", (context, decoder) => new CDEagle(context, decoder)},
        {"CDecoyGrenade", (context, decoder) => new CDecoyGrenade(context, decoder)},
        {"CDecoyProjectile", (context, decoder) => new CDecoyProjectile(context, decoder)},
        {"CDynamicLight", (context, decoder) => new CDynamicLight(context, decoder)},
        {"CDynamicProp", (context, decoder) => new CDynamicProp(context, decoder)},
        {"CEconEntity", (context, decoder) => new CEconEntity(context, decoder)},
        {"CEconWearable", (context, decoder) => new CEconWearable(context, decoder)},
        {"CEntityDissolve", (context, decoder) => new CEntityDissolve(context, decoder)},
        {"CEntityFlame", (context, decoder) => new CEntityFlame(context, decoder)},
        {"CEnvCombinedLightProbeVolume", (context, decoder) => new CEnvCombinedLightProbeVolume(context, decoder)},
        {"CEnvCubemap", (context, decoder) => new CEnvCubemap(context, decoder)},
        {"CEnvCubemapBox", (context, decoder) => new CEnvCubemapBox(context, decoder)},
        {"CEnvCubemapFog", (context, decoder) => new CEnvCubemapFog(context, decoder)},
        {"CEnvDecal", (context, decoder) => new CEnvDecal(context, decoder)},
        {"CEnvDetailController", (context, decoder) => new CEnvDetailController(context, decoder)},
        {"CEnvLightProbeVolume", (context, decoder) => new CEnvLightProbeVolume(context, decoder)},
        {"CEnvParticleGlow", (context, decoder) => new CEnvParticleGlow(context, decoder)},
        {"CEnvProjectedTexture", (context, decoder) => new CEnvProjectedTexture(context, decoder)},
        {"CEnvScreenOverlay", (context, decoder) => new CEnvScreenOverlay(context, decoder)},
        {"CEnvSky", (context, decoder) => new CEnvSky(context, decoder)},
        {"CEnvVolumetricFogController", (context, decoder) => new CEnvVolumetricFogController(context, decoder)},
        {"CEnvVolumetricFogVolume", (context, decoder) => new CEnvVolumetricFogVolume(context, decoder)},
        {"CEnvWind", (context, decoder) => new CEnvWind(context, decoder)},
        {"CFireCrackerBlast", (context, decoder) => new CFireCrackerBlast(context, decoder)},
        {"CFireSmoke", (context, decoder) => new CFireSmoke(context, decoder)},
        {"CFish", (context, decoder) => new CFish(context, decoder)},
        {"CFists", (context, decoder) => new CFists(context, decoder)},
        {"CFlashbang", (context, decoder) => new CFlashbang(context, decoder)},
        {"CFogController", (context, decoder) => new CFogController(context, decoder)},
        {"CFootstepControl", (context, decoder) => new CFootstepControl(context, decoder)},
        {"CFuncBrush", (context, decoder) => new CFuncBrush(context, decoder)},
        {"CFuncConveyor", (context, decoder) => new CFuncConveyor(context, decoder)},
        {"CFuncElectrifiedVolume", (context, decoder) => new CFuncElectrifiedVolume(context, decoder)},
        {"CFuncLadder", (context, decoder) => new CFuncLadder(context, decoder)},
        {"CFuncMonitor", (context, decoder) => new CFuncMonitor(context, decoder)},
        {"CFuncMoveLinear", (context, decoder) => new CFuncMoveLinear(context, decoder)},
        {"CFuncRotating", (context, decoder) => new CFuncRotating(context, decoder)},
        {"CFuncTrackTrain", (context, decoder) => new CFuncTrackTrain(context, decoder)},
        {"CFuncWater", (context, decoder) => new CFuncWater(context, decoder)},
        {"CGameRulesProxy", (context, decoder) => new CGameRulesProxy(context, decoder)},
        {"CGradientFog", (context, decoder) => new CGradientFog(context, decoder)},
        {"CHandleTest", (context, decoder) => new CHandleTest(context, decoder)},
        {"CHEGrenade", (context, decoder) => new CHEGrenade(context, decoder)},
        {"CHostage", (context, decoder) => new CHostage(context, decoder)},
        {"CHostageCarriableProp", (context, decoder) => new CHostageCarriableProp(context, decoder)},
        {"CHostageRescueZone", (context, decoder) => new CHostageRescueZone(context, decoder)},
        {"CIncendiaryGrenade", (context, decoder) => new CIncendiaryGrenade(context, decoder)},
        {"CInferno", (context, decoder) => new CInferno(context, decoder)},
        {"CInfoInstructorHintHostageRescueZone", (context, decoder) => new CInfoInstructorHintHostageRescueZone(context, decoder)},
        {"CInfoLadderDismount", (context, decoder) => new CInfoLadderDismount(context, decoder)},
        {"CInfoOffscreenPanoramaTexture", (context, decoder) => new CInfoOffscreenPanoramaTexture(context, decoder)},
        {"CInfoVisibilityBox", (context, decoder) => new CInfoVisibilityBox(context, decoder)},
        {"CInfoWorldLayer", (context, decoder) => new CInfoWorldLayer(context, decoder)},
        {"CItem_Healthshot", (context, decoder) => new CItem_Healthshot(context, decoder)},
        {"CItemDogtags", (context, decoder) => new CItemDogtags(context, decoder)},
        {"CKnife", (context, decoder) => new CKnife(context, decoder)},
        {"CLightDirectionalEntity", (context, decoder) => new CLightDirectionalEntity(context, decoder)},
        {"CLightEntity", (context, decoder) => new CLightEntity(context, decoder)},
        {"CLightEnvironmentEntity", (context, decoder) => new CLightEnvironmentEntity(context, decoder)},
        {"CLightGlow", (context, decoder) => new CLightGlow(context, decoder)},
        {"CLightOrthoEntity", (context, decoder) => new CLightOrthoEntity(context, decoder)},
        {"CLightSpotEntity", (context, decoder) => new CLightSpotEntity(context, decoder)},
        {"CMapVetoPickController", (context, decoder) => new CMapVetoPickController(context, decoder)},
        {"CMelee", (context, decoder) => new CMelee(context, decoder)},
        {"CModelPointEntity", (context, decoder) => new CModelPointEntity(context, decoder)},
        {"CMolotovGrenade", (context, decoder) => new CMolotovGrenade(context, decoder)},
        {"CMolotovProjectile", (context, decoder) => new CMolotovProjectile(context, decoder)},
        {"COmniLight", (context, decoder) => new COmniLight(context, decoder)},
        {"CParticleSystem", (context, decoder) => new CParticleSystem(context, decoder)},
        {"CPathParticleRope", (context, decoder) => new CPathParticleRope(context, decoder)},
        {"CPhysBox", (context, decoder) => new CPhysBox(context, decoder)},
        {"CPhysicsProp", (context, decoder) => new CPhysicsProp(context, decoder)},
        {"CPhysicsPropMultiplayer", (context, decoder) => new CPhysicsPropMultiplayer(context, decoder)},
        {"CPhysMagnet", (context, decoder) => new CPhysMagnet(context, decoder)},
        {"CPlantedC4", (context, decoder) => new CPlantedC4(context, decoder)},
        {"CPlayerPing", (context, decoder) => new CPlayerPing(context, decoder)},
        {"CPlayerSprayDecal", (context, decoder) => new CPlayerSprayDecal(context, decoder)},
        {"CPlayerVisibility", (context, decoder) => new CPlayerVisibility(context, decoder)},
        {"CPointCamera", (context, decoder) => new CPointCamera(context, decoder)},
        {"CPointClientUIDialog", (context, decoder) => new CPointClientUIDialog(context, decoder)},
        {"CPointClientUIWorldPanel", (context, decoder) => new CPointClientUIWorldPanel(context, decoder)},
        {"CPointClientUIWorldTextPanel", (context, decoder) => new CPointClientUIWorldTextPanel(context, decoder)},
        {"CPointCommentaryNode", (context, decoder) => new CPointCommentaryNode(context, decoder)},
        {"CPointEntity", (context, decoder) => new CPointEntity(context, decoder)},
        {"CPointValueRemapper", (context, decoder) => new CPointValueRemapper(context, decoder)},
        {"CPointWorldText", (context, decoder) => new CPointWorldText(context, decoder)},
        {"CPostProcessingVolume", (context, decoder) => new CPostProcessingVolume(context, decoder)},
        {"CPrecipitation", (context, decoder) => new CPrecipitation(context, decoder)},
        {"CPrecipitationBlocker", (context, decoder) => new CPrecipitationBlocker(context, decoder)},
        {"CPredictedViewModel", (context, decoder) => new CPredictedViewModel(context, decoder)},
        {"CRagdollManager", (context, decoder) => new CRagdollManager(context, decoder)},
        {"CRagdollProp", (context, decoder) => new CRagdollProp(context, decoder)},
        {"CRagdollPropAttached", (context, decoder) => new CRagdollPropAttached(context, decoder)},
        {"CRectLight", (context, decoder) => new CRectLight(context, decoder)},
        {"CRopeKeyframe", (context, decoder) => new CRopeKeyframe(context, decoder)},
        {"CSceneEntity", (context, decoder) => new CSceneEntity(context, decoder)},
        {"CSensorGrenade", (context, decoder) => new CSensorGrenade(context, decoder)},
        {"CSensorGrenadeProjectile", (context, decoder) => new CSensorGrenadeProjectile(context, decoder)},
        {"CShatterGlassShardPhysics", (context, decoder) => new CShatterGlassShardPhysics(context, decoder)},
        {"CSkyCamera", (context, decoder) => new CSkyCamera(context, decoder)},
        {"CSmokeGrenade", (context, decoder) => new CSmokeGrenade(context, decoder)},
        {"CSmokeGrenadeProjectile", (context, decoder) => new CSmokeGrenadeProjectile(context, decoder)},
        {"CSoundAreaEntityBase", (context, decoder) => new CSoundAreaEntityBase(context, decoder)},
        {"CSoundAreaEntityOrientedBox", (context, decoder) => new CSoundAreaEntityOrientedBox(context, decoder)},
        {"CSoundAreaEntitySphere", (context, decoder) => new CSoundAreaEntitySphere(context, decoder)},
        {"CSoundOpvarSetAABBEntity", (context, decoder) => new CSoundOpvarSetAABBEntity(context, decoder)},
        {"CSoundOpvarSetOBBEntity", (context, decoder) => new CSoundOpvarSetOBBEntity(context, decoder)},
        {"CSoundOpvarSetOBBWindEntity", (context, decoder) => new CSoundOpvarSetOBBWindEntity(context, decoder)},
        {"CSoundOpvarSetPathCornerEntity", (context, decoder) => new CSoundOpvarSetPathCornerEntity(context, decoder)},
        {"CSoundOpvarSetPointBase", (context, decoder) => new CSoundOpvarSetPointBase(context, decoder)},
        {"CSoundOpvarSetPointEntity", (context, decoder) => new CSoundOpvarSetPointEntity(context, decoder)},
        {"CSpotlightEnd", (context, decoder) => new CSpotlightEnd(context, decoder)},
        {"CSprite", (context, decoder) => new CSprite(context, decoder)},
        {"CSpriteOriented", (context, decoder) => new CSpriteOriented(context, decoder)},
        {"CSun", (context, decoder) => new CSun(context, decoder)},
        {"CTablet", (context, decoder) => new CTablet(context, decoder)},
        {"CTeam", (context, decoder) => new CTeam(context, decoder)},
        {"CTextureBasedAnimatable", (context, decoder) => new CTextureBasedAnimatable(context, decoder)},
        {"CTonemapController2", (context, decoder) => new CTonemapController2(context, decoder)},
        {"CTriggerBuoyancy", (context, decoder) => new CTriggerBuoyancy(context, decoder)},
        {"CTriggerTripWire", (context, decoder) => new CTriggerTripWire(context, decoder)},
        {"CTriggerVolume", (context, decoder) => new CTriggerVolume(context, decoder)},
        {"CTripWireFire", (context, decoder) => new CTripWireFire(context, decoder)},
        {"CTripWireFireProjectile", (context, decoder) => new CTripWireFireProjectile(context, decoder)},
        {"CVoteController", (context, decoder) => new CVoteController(context, decoder)},
        {"CWaterBullet", (context, decoder) => new CWaterBullet(context, decoder)},
        {"CWeaponAug", (context, decoder) => new CWeaponAug(context, decoder)},
        {"CWeaponAWP", (context, decoder) => new CWeaponAWP(context, decoder)},
        {"CWeaponBaseItem", (context, decoder) => new CWeaponBaseItem(context, decoder)},
        {"CWeaponBizon", (context, decoder) => new CWeaponBizon(context, decoder)},
        {"CWeaponElite", (context, decoder) => new CWeaponElite(context, decoder)},
        {"CWeaponFamas", (context, decoder) => new CWeaponFamas(context, decoder)},
        {"CWeaponFiveSeven", (context, decoder) => new CWeaponFiveSeven(context, decoder)},
        {"CWeaponG3SG1", (context, decoder) => new CWeaponG3SG1(context, decoder)},
        {"CWeaponGalilAR", (context, decoder) => new CWeaponGalilAR(context, decoder)},
        {"CWeaponGlock", (context, decoder) => new CWeaponGlock(context, decoder)},
        {"CWeaponHKP2000", (context, decoder) => new CWeaponHKP2000(context, decoder)},
        {"CWeaponM249", (context, decoder) => new CWeaponM249(context, decoder)},
        {"CWeaponM4A1", (context, decoder) => new CWeaponM4A1(context, decoder)},
        {"CWeaponMAC10", (context, decoder) => new CWeaponMAC10(context, decoder)},
        {"CWeaponMag7", (context, decoder) => new CWeaponMag7(context, decoder)},
        {"CWeaponMP7", (context, decoder) => new CWeaponMP7(context, decoder)},
        {"CWeaponMP9", (context, decoder) => new CWeaponMP9(context, decoder)},
        {"CWeaponNegev", (context, decoder) => new CWeaponNegev(context, decoder)},
        {"CWeaponNOVA", (context, decoder) => new CWeaponNOVA(context, decoder)},
        {"CWeaponP250", (context, decoder) => new CWeaponP250(context, decoder)},
        {"CWeaponP90", (context, decoder) => new CWeaponP90(context, decoder)},
        {"CWeaponSawedoff", (context, decoder) => new CWeaponSawedoff(context, decoder)},
        {"CWeaponSCAR20", (context, decoder) => new CWeaponSCAR20(context, decoder)},
        {"CWeaponSG556", (context, decoder) => new CWeaponSG556(context, decoder)},
        {"CWeaponShield", (context, decoder) => new CWeaponShield(context, decoder)},
        {"CWeaponSSG08", (context, decoder) => new CWeaponSSG08(context, decoder)},
        {"CWeaponTaser", (context, decoder) => new CWeaponTaser(context, decoder)},
        {"CWeaponTec9", (context, decoder) => new CWeaponTec9(context, decoder)},
        {"CWeaponUMP45", (context, decoder) => new CWeaponUMP45(context, decoder)},
        {"CWeaponXM1014", (context, decoder) => new CWeaponXM1014(context, decoder)},
        {"CWeaponZoneRepulsor", (context, decoder) => new CWeaponZoneRepulsor(context, decoder)},
        {"CWorld", (context, decoder) => new CWorld(context, decoder)},
    };
}

internal partial class DecoderSet
{
    public SendNodeDecoder<object> GetDecoder(string className)
    {
        switch (className)
        {
        case "audioparams_t":
        {
            var decoder = GetDecoder<audioparams_t>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((audioparams_t)instance, path, ref buffer);
        }
        case "CAK47":
        {
            var decoder = GetDecoder<CAK47>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CAK47)instance, path, ref buffer);
        }
        case "CAnimGraphNetworkedVariables":
        {
            var decoder = GetDecoder<CAnimGraphNetworkedVariables>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CAnimGraphNetworkedVariables)instance, path, ref buffer);
        }
        case "CAttributeContainer":
        {
            var decoder = GetDecoder<CAttributeContainer>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CAttributeContainer)instance, path, ref buffer);
        }
        case "CAttributeList":
        {
            var decoder = GetDecoder<CAttributeList>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CAttributeList)instance, path, ref buffer);
        }
        case "CAttributeManager":
        {
            var decoder = GetDecoder<CAttributeManager>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CAttributeManager)instance, path, ref buffer);
        }
        case "CBarnLight":
        {
            var decoder = GetDecoder<CBarnLight>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBarnLight)instance, path, ref buffer);
        }
        case "CBaseAnimGraph":
        {
            var decoder = GetDecoder<CBaseAnimGraph>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBaseAnimGraph)instance, path, ref buffer);
        }
        case "CBaseAnimGraphController":
        {
            var decoder = GetDecoder<CBaseAnimGraphController>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBaseAnimGraphController)instance, path, ref buffer);
        }
        case "CBaseButton":
        {
            var decoder = GetDecoder<CBaseButton>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBaseButton)instance, path, ref buffer);
        }
        case "CBaseClientUIEntity":
        {
            var decoder = GetDecoder<CBaseClientUIEntity>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBaseClientUIEntity)instance, path, ref buffer);
        }
        case "CBaseCombatCharacter":
        {
            var decoder = GetDecoder<CBaseCombatCharacter>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBaseCombatCharacter)instance, path, ref buffer);
        }
        case "CBaseCSGrenade":
        {
            var decoder = GetDecoder<CBaseCSGrenade>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBaseCSGrenade)instance, path, ref buffer);
        }
        case "CBaseCSGrenadeProjectile":
        {
            var decoder = GetDecoder<CBaseCSGrenadeProjectile>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBaseCSGrenadeProjectile)instance, path, ref buffer);
        }
        case "CBaseDoor":
        {
            var decoder = GetDecoder<CBaseDoor>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBaseDoor)instance, path, ref buffer);
        }
        case "CBaseEntity":
        {
            var decoder = GetDecoder<CBaseEntity>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBaseEntity)instance, path, ref buffer);
        }
        case "CBaseFire":
        {
            var decoder = GetDecoder<CBaseFire>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBaseFire)instance, path, ref buffer);
        }
        case "CBaseFlex":
        {
            var decoder = GetDecoder<CBaseFlex>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBaseFlex)instance, path, ref buffer);
        }
        case "CBaseGrenade":
        {
            var decoder = GetDecoder<CBaseGrenade>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBaseGrenade)instance, path, ref buffer);
        }
        case "CBaseModelEntity":
        {
            var decoder = GetDecoder<CBaseModelEntity>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBaseModelEntity)instance, path, ref buffer);
        }
        case "CBasePlayerController":
        {
            var decoder = GetDecoder<CBasePlayerController>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBasePlayerController)instance, path, ref buffer);
        }
        case "CBasePlayerPawn":
        {
            var decoder = GetDecoder<CBasePlayerPawn>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBasePlayerPawn)instance, path, ref buffer);
        }
        case "CBasePlayerWeapon":
        {
            var decoder = GetDecoder<CBasePlayerWeapon>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBasePlayerWeapon)instance, path, ref buffer);
        }
        case "CBaseProp":
        {
            var decoder = GetDecoder<CBaseProp>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBaseProp)instance, path, ref buffer);
        }
        case "CBasePropDoor":
        {
            var decoder = GetDecoder<CBasePropDoor>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBasePropDoor)instance, path, ref buffer);
        }
        case "CBaseToggle":
        {
            var decoder = GetDecoder<CBaseToggle>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBaseToggle)instance, path, ref buffer);
        }
        case "CBaseTrigger":
        {
            var decoder = GetDecoder<CBaseTrigger>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBaseTrigger)instance, path, ref buffer);
        }
        case "CBaseViewModel":
        {
            var decoder = GetDecoder<CBaseViewModel>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBaseViewModel)instance, path, ref buffer);
        }
        case "CBeam":
        {
            var decoder = GetDecoder<CBeam>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBeam)instance, path, ref buffer);
        }
        case "CBodyComponent":
        {
            var decoder = GetDecoder<CBodyComponent>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBodyComponent)instance, path, ref buffer);
        }
        case "CBodyComponentBaseAnimGraph":
        {
            var decoder = GetDecoder<CBodyComponentBaseAnimGraph>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBodyComponentBaseAnimGraph)instance, path, ref buffer);
        }
        case "CBodyComponentBaseModelEntity":
        {
            var decoder = GetDecoder<CBodyComponentBaseModelEntity>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBodyComponentBaseModelEntity)instance, path, ref buffer);
        }
        case "CBodyComponentPoint":
        {
            var decoder = GetDecoder<CBodyComponentPoint>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBodyComponentPoint)instance, path, ref buffer);
        }
        case "CBodyComponentSkeletonInstance":
        {
            var decoder = GetDecoder<CBodyComponentSkeletonInstance>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBodyComponentSkeletonInstance)instance, path, ref buffer);
        }
        case "CBombTarget":
        {
            var decoder = GetDecoder<CBombTarget>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBombTarget)instance, path, ref buffer);
        }
        case "CBreachCharge":
        {
            var decoder = GetDecoder<CBreachCharge>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBreachCharge)instance, path, ref buffer);
        }
        case "CBreachChargeProjectile":
        {
            var decoder = GetDecoder<CBreachChargeProjectile>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBreachChargeProjectile)instance, path, ref buffer);
        }
        case "CBreakable":
        {
            var decoder = GetDecoder<CBreakable>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBreakable)instance, path, ref buffer);
        }
        case "CBreakableProp":
        {
            var decoder = GetDecoder<CBreakableProp>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBreakableProp)instance, path, ref buffer);
        }
        case "CBumpMine":
        {
            var decoder = GetDecoder<CBumpMine>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBumpMine)instance, path, ref buffer);
        }
        case "CBumpMineProjectile":
        {
            var decoder = GetDecoder<CBumpMineProjectile>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CBumpMineProjectile)instance, path, ref buffer);
        }
        case "CC4":
        {
            var decoder = GetDecoder<CC4>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CC4)instance, path, ref buffer);
        }
        case "CChicken":
        {
            var decoder = GetDecoder<CChicken>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CChicken)instance, path, ref buffer);
        }
        case "CCollisionProperty":
        {
            var decoder = GetDecoder<CCollisionProperty>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCollisionProperty)instance, path, ref buffer);
        }
        case "CColorCorrection":
        {
            var decoder = GetDecoder<CColorCorrection>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CColorCorrection)instance, path, ref buffer);
        }
        case "CColorCorrectionVolume":
        {
            var decoder = GetDecoder<CColorCorrectionVolume>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CColorCorrectionVolume)instance, path, ref buffer);
        }
        case "CCSGameModeRules":
        {
            var decoder = GetDecoder<CCSGameModeRules>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSGameModeRules)instance, path, ref buffer);
        }
        case "CCSGameModeRules_Deathmatch":
        {
            var decoder = GetDecoder<CCSGameModeRules_Deathmatch>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSGameModeRules_Deathmatch)instance, path, ref buffer);
        }
        case "CCSGameModeRules_Noop":
        {
            var decoder = GetDecoder<CCSGameModeRules_Noop>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSGameModeRules_Noop)instance, path, ref buffer);
        }
        case "CCSGameModeRules_Scripted":
        {
            var decoder = GetDecoder<CCSGameModeRules_Scripted>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSGameModeRules_Scripted)instance, path, ref buffer);
        }
        case "CCSGameRules":
        {
            var decoder = GetDecoder<CCSGameRules>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSGameRules)instance, path, ref buffer);
        }
        case "CCSGameRulesProxy":
        {
            var decoder = GetDecoder<CCSGameRulesProxy>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSGameRulesProxy)instance, path, ref buffer);
        }
        case "CCSGO_TeamIntroCharacterPosition":
        {
            var decoder = GetDecoder<CCSGO_TeamIntroCharacterPosition>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSGO_TeamIntroCharacterPosition)instance, path, ref buffer);
        }
        case "CCSGO_TeamIntroCounterTerroristPosition":
        {
            var decoder = GetDecoder<CCSGO_TeamIntroCounterTerroristPosition>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSGO_TeamIntroCounterTerroristPosition)instance, path, ref buffer);
        }
        case "CCSGO_TeamIntroTerroristPosition":
        {
            var decoder = GetDecoder<CCSGO_TeamIntroTerroristPosition>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSGO_TeamIntroTerroristPosition)instance, path, ref buffer);
        }
        case "CCSGO_TeamPreviewCharacterPosition":
        {
            var decoder = GetDecoder<CCSGO_TeamPreviewCharacterPosition>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSGO_TeamPreviewCharacterPosition)instance, path, ref buffer);
        }
        case "CCSGO_TeamSelectCharacterPosition":
        {
            var decoder = GetDecoder<CCSGO_TeamSelectCharacterPosition>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSGO_TeamSelectCharacterPosition)instance, path, ref buffer);
        }
        case "CCSGO_TeamSelectCounterTerroristPosition":
        {
            var decoder = GetDecoder<CCSGO_TeamSelectCounterTerroristPosition>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSGO_TeamSelectCounterTerroristPosition)instance, path, ref buffer);
        }
        case "CCSGO_TeamSelectTerroristPosition":
        {
            var decoder = GetDecoder<CCSGO_TeamSelectTerroristPosition>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSGO_TeamSelectTerroristPosition)instance, path, ref buffer);
        }
        case "CCSGO_WingmanIntroCharacterPosition":
        {
            var decoder = GetDecoder<CCSGO_WingmanIntroCharacterPosition>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSGO_WingmanIntroCharacterPosition)instance, path, ref buffer);
        }
        case "CCSGO_WingmanIntroCounterTerroristPosition":
        {
            var decoder = GetDecoder<CCSGO_WingmanIntroCounterTerroristPosition>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSGO_WingmanIntroCounterTerroristPosition)instance, path, ref buffer);
        }
        case "CCSGO_WingmanIntroTerroristPosition":
        {
            var decoder = GetDecoder<CCSGO_WingmanIntroTerroristPosition>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSGO_WingmanIntroTerroristPosition)instance, path, ref buffer);
        }
        case "CCSGOViewModel":
        {
            var decoder = GetDecoder<CCSGOViewModel>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSGOViewModel)instance, path, ref buffer);
        }
        case "CCSMinimapBoundary":
        {
            var decoder = GetDecoder<CCSMinimapBoundary>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSMinimapBoundary)instance, path, ref buffer);
        }
        case "CCSObserver_CameraServices":
        {
            var decoder = GetDecoder<CCSObserver_CameraServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSObserver_CameraServices)instance, path, ref buffer);
        }
        case "CCSObserver_MovementServices":
        {
            var decoder = GetDecoder<CCSObserver_MovementServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSObserver_MovementServices)instance, path, ref buffer);
        }
        case "CCSObserver_ObserverServices":
        {
            var decoder = GetDecoder<CCSObserver_ObserverServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSObserver_ObserverServices)instance, path, ref buffer);
        }
        case "CCSObserver_UseServices":
        {
            var decoder = GetDecoder<CCSObserver_UseServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSObserver_UseServices)instance, path, ref buffer);
        }
        case "CCSObserver_ViewModelServices":
        {
            var decoder = GetDecoder<CCSObserver_ViewModelServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSObserver_ViewModelServices)instance, path, ref buffer);
        }
        case "CCSObserverPawn":
        {
            var decoder = GetDecoder<CCSObserverPawn>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSObserverPawn)instance, path, ref buffer);
        }
        case "CCSPlayer_ActionTrackingServices":
        {
            var decoder = GetDecoder<CCSPlayer_ActionTrackingServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayer_ActionTrackingServices)instance, path, ref buffer);
        }
        case "CCSPlayer_BulletServices":
        {
            var decoder = GetDecoder<CCSPlayer_BulletServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayer_BulletServices)instance, path, ref buffer);
        }
        case "CCSPlayer_BuyServices":
        {
            var decoder = GetDecoder<CCSPlayer_BuyServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayer_BuyServices)instance, path, ref buffer);
        }
        case "CCSPlayer_CameraServices":
        {
            var decoder = GetDecoder<CCSPlayer_CameraServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayer_CameraServices)instance, path, ref buffer);
        }
        case "CCSPlayer_HostageServices":
        {
            var decoder = GetDecoder<CCSPlayer_HostageServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayer_HostageServices)instance, path, ref buffer);
        }
        case "CCSPlayer_ItemServices":
        {
            var decoder = GetDecoder<CCSPlayer_ItemServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayer_ItemServices)instance, path, ref buffer);
        }
        case "CCSPlayer_MovementServices":
        {
            var decoder = GetDecoder<CCSPlayer_MovementServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayer_MovementServices)instance, path, ref buffer);
        }
        case "CCSPlayer_PingServices":
        {
            var decoder = GetDecoder<CCSPlayer_PingServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayer_PingServices)instance, path, ref buffer);
        }
        case "CCSPlayer_UseServices":
        {
            var decoder = GetDecoder<CCSPlayer_UseServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayer_UseServices)instance, path, ref buffer);
        }
        case "CCSPlayer_ViewModelServices":
        {
            var decoder = GetDecoder<CCSPlayer_ViewModelServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayer_ViewModelServices)instance, path, ref buffer);
        }
        case "CCSPlayer_WaterServices":
        {
            var decoder = GetDecoder<CCSPlayer_WaterServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayer_WaterServices)instance, path, ref buffer);
        }
        case "CCSPlayer_WeaponServices":
        {
            var decoder = GetDecoder<CCSPlayer_WeaponServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayer_WeaponServices)instance, path, ref buffer);
        }
        case "CCSPlayerBase_CameraServices":
        {
            var decoder = GetDecoder<CCSPlayerBase_CameraServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayerBase_CameraServices)instance, path, ref buffer);
        }
        case "CCSPlayerController":
        {
            var decoder = GetDecoder<CCSPlayerController>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayerController)instance, path, ref buffer);
        }
        case "CCSPlayerController_ActionTrackingServices":
        {
            var decoder = GetDecoder<CCSPlayerController_ActionTrackingServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayerController_ActionTrackingServices)instance, path, ref buffer);
        }
        case "CCSPlayerController_DamageServices":
        {
            var decoder = GetDecoder<CCSPlayerController_DamageServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayerController_DamageServices)instance, path, ref buffer);
        }
        case "CCSPlayerController_InGameMoneyServices":
        {
            var decoder = GetDecoder<CCSPlayerController_InGameMoneyServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayerController_InGameMoneyServices)instance, path, ref buffer);
        }
        case "CCSPlayerController_InventoryServices":
        {
            var decoder = GetDecoder<CCSPlayerController_InventoryServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayerController_InventoryServices)instance, path, ref buffer);
        }
        case "CCSPlayerPawn":
        {
            var decoder = GetDecoder<CCSPlayerPawn>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayerPawn)instance, path, ref buffer);
        }
        case "CCSPlayerPawnBase":
        {
            var decoder = GetDecoder<CCSPlayerPawnBase>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayerPawnBase)instance, path, ref buffer);
        }
        case "CCSPlayerResource":
        {
            var decoder = GetDecoder<CCSPlayerResource>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSPlayerResource)instance, path, ref buffer);
        }
        case "CCSTeam":
        {
            var decoder = GetDecoder<CCSTeam>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSTeam)instance, path, ref buffer);
        }
        case "CCSWeaponBase":
        {
            var decoder = GetDecoder<CCSWeaponBase>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSWeaponBase)instance, path, ref buffer);
        }
        case "CCSWeaponBaseGun":
        {
            var decoder = GetDecoder<CCSWeaponBaseGun>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CCSWeaponBaseGun)instance, path, ref buffer);
        }
        case "CDamageRecord":
        {
            var decoder = GetDecoder<CDamageRecord>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CDamageRecord)instance, path, ref buffer);
        }
        case "CDEagle":
        {
            var decoder = GetDecoder<CDEagle>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CDEagle)instance, path, ref buffer);
        }
        case "CDecoyGrenade":
        {
            var decoder = GetDecoder<CDecoyGrenade>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CDecoyGrenade)instance, path, ref buffer);
        }
        case "CDecoyProjectile":
        {
            var decoder = GetDecoder<CDecoyProjectile>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CDecoyProjectile)instance, path, ref buffer);
        }
        case "CDynamicLight":
        {
            var decoder = GetDecoder<CDynamicLight>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CDynamicLight)instance, path, ref buffer);
        }
        case "CDynamicProp":
        {
            var decoder = GetDecoder<CDynamicProp>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CDynamicProp)instance, path, ref buffer);
        }
        case "CEconEntity":
        {
            var decoder = GetDecoder<CEconEntity>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEconEntity)instance, path, ref buffer);
        }
        case "CEconItemAttribute":
        {
            var decoder = GetDecoder<CEconItemAttribute>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEconItemAttribute)instance, path, ref buffer);
        }
        case "CEconItemView":
        {
            var decoder = GetDecoder<CEconItemView>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEconItemView)instance, path, ref buffer);
        }
        case "CEconWearable":
        {
            var decoder = GetDecoder<CEconWearable>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEconWearable)instance, path, ref buffer);
        }
        case "CEntityComponent":
        {
            var decoder = GetDecoder<CEntityComponent>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEntityComponent)instance, path, ref buffer);
        }
        case "CEntityDissolve":
        {
            var decoder = GetDecoder<CEntityDissolve>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEntityDissolve)instance, path, ref buffer);
        }
        case "CEntityFlame":
        {
            var decoder = GetDecoder<CEntityFlame>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEntityFlame)instance, path, ref buffer);
        }
        case "CEntityIdentity":
        {
            var decoder = GetDecoder<CEntityIdentity>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEntityIdentity)instance, path, ref buffer);
        }
        case "CEntityInstance":
        {
            var decoder = GetDecoder<CEntityInstance>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEntityInstance)instance, path, ref buffer);
        }
        case "CEnvCombinedLightProbeVolume":
        {
            var decoder = GetDecoder<CEnvCombinedLightProbeVolume>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEnvCombinedLightProbeVolume)instance, path, ref buffer);
        }
        case "CEnvCubemap":
        {
            var decoder = GetDecoder<CEnvCubemap>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEnvCubemap)instance, path, ref buffer);
        }
        case "CEnvCubemapBox":
        {
            var decoder = GetDecoder<CEnvCubemapBox>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEnvCubemapBox)instance, path, ref buffer);
        }
        case "CEnvCubemapFog":
        {
            var decoder = GetDecoder<CEnvCubemapFog>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEnvCubemapFog)instance, path, ref buffer);
        }
        case "CEnvDecal":
        {
            var decoder = GetDecoder<CEnvDecal>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEnvDecal)instance, path, ref buffer);
        }
        case "CEnvDetailController":
        {
            var decoder = GetDecoder<CEnvDetailController>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEnvDetailController)instance, path, ref buffer);
        }
        case "CEnvLightProbeVolume":
        {
            var decoder = GetDecoder<CEnvLightProbeVolume>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEnvLightProbeVolume)instance, path, ref buffer);
        }
        case "CEnvParticleGlow":
        {
            var decoder = GetDecoder<CEnvParticleGlow>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEnvParticleGlow)instance, path, ref buffer);
        }
        case "CEnvProjectedTexture":
        {
            var decoder = GetDecoder<CEnvProjectedTexture>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEnvProjectedTexture)instance, path, ref buffer);
        }
        case "CEnvScreenOverlay":
        {
            var decoder = GetDecoder<CEnvScreenOverlay>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEnvScreenOverlay)instance, path, ref buffer);
        }
        case "CEnvSky":
        {
            var decoder = GetDecoder<CEnvSky>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEnvSky)instance, path, ref buffer);
        }
        case "CEnvVolumetricFogController":
        {
            var decoder = GetDecoder<CEnvVolumetricFogController>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEnvVolumetricFogController)instance, path, ref buffer);
        }
        case "CEnvVolumetricFogVolume":
        {
            var decoder = GetDecoder<CEnvVolumetricFogVolume>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEnvVolumetricFogVolume)instance, path, ref buffer);
        }
        case "CEnvWind":
        {
            var decoder = GetDecoder<CEnvWind>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEnvWind)instance, path, ref buffer);
        }
        case "CEnvWindShared":
        {
            var decoder = GetDecoder<CEnvWindShared>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CEnvWindShared)instance, path, ref buffer);
        }
        case "CFireCrackerBlast":
        {
            var decoder = GetDecoder<CFireCrackerBlast>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CFireCrackerBlast)instance, path, ref buffer);
        }
        case "CFireSmoke":
        {
            var decoder = GetDecoder<CFireSmoke>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CFireSmoke)instance, path, ref buffer);
        }
        case "CFish":
        {
            var decoder = GetDecoder<CFish>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CFish)instance, path, ref buffer);
        }
        case "CFists":
        {
            var decoder = GetDecoder<CFists>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CFists)instance, path, ref buffer);
        }
        case "CFlashbang":
        {
            var decoder = GetDecoder<CFlashbang>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CFlashbang)instance, path, ref buffer);
        }
        case "CFogController":
        {
            var decoder = GetDecoder<CFogController>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CFogController)instance, path, ref buffer);
        }
        case "CFootstepControl":
        {
            var decoder = GetDecoder<CFootstepControl>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CFootstepControl)instance, path, ref buffer);
        }
        case "CFuncBrush":
        {
            var decoder = GetDecoder<CFuncBrush>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CFuncBrush)instance, path, ref buffer);
        }
        case "CFuncConveyor":
        {
            var decoder = GetDecoder<CFuncConveyor>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CFuncConveyor)instance, path, ref buffer);
        }
        case "CFuncElectrifiedVolume":
        {
            var decoder = GetDecoder<CFuncElectrifiedVolume>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CFuncElectrifiedVolume)instance, path, ref buffer);
        }
        case "CFuncLadder":
        {
            var decoder = GetDecoder<CFuncLadder>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CFuncLadder)instance, path, ref buffer);
        }
        case "CFuncMonitor":
        {
            var decoder = GetDecoder<CFuncMonitor>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CFuncMonitor)instance, path, ref buffer);
        }
        case "CFuncMoveLinear":
        {
            var decoder = GetDecoder<CFuncMoveLinear>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CFuncMoveLinear)instance, path, ref buffer);
        }
        case "CFuncRotating":
        {
            var decoder = GetDecoder<CFuncRotating>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CFuncRotating)instance, path, ref buffer);
        }
        case "CFuncTrackTrain":
        {
            var decoder = GetDecoder<CFuncTrackTrain>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CFuncTrackTrain)instance, path, ref buffer);
        }
        case "CFuncWater":
        {
            var decoder = GetDecoder<CFuncWater>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CFuncWater)instance, path, ref buffer);
        }
        case "CGameRules":
        {
            var decoder = GetDecoder<CGameRules>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CGameRules)instance, path, ref buffer);
        }
        case "CGameRulesProxy":
        {
            var decoder = GetDecoder<CGameRulesProxy>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CGameRulesProxy)instance, path, ref buffer);
        }
        case "CGameSceneNode":
        {
            var decoder = GetDecoder<CGameSceneNode>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CGameSceneNode)instance, path, ref buffer);
        }
        case "CGlowProperty":
        {
            var decoder = GetDecoder<CGlowProperty>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CGlowProperty)instance, path, ref buffer);
        }
        case "CGradientFog":
        {
            var decoder = GetDecoder<CGradientFog>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CGradientFog)instance, path, ref buffer);
        }
        case "CHandleTest":
        {
            var decoder = GetDecoder<CHandleTest>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CHandleTest)instance, path, ref buffer);
        }
        case "CHEGrenade":
        {
            var decoder = GetDecoder<CHEGrenade>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CHEGrenade)instance, path, ref buffer);
        }
        case "CHitboxComponent":
        {
            var decoder = GetDecoder<CHitboxComponent>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CHitboxComponent)instance, path, ref buffer);
        }
        case "CHostage":
        {
            var decoder = GetDecoder<CHostage>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CHostage)instance, path, ref buffer);
        }
        case "CHostageCarriableProp":
        {
            var decoder = GetDecoder<CHostageCarriableProp>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CHostageCarriableProp)instance, path, ref buffer);
        }
        case "CHostageExpresserShim":
        {
            var decoder = GetDecoder<CHostageExpresserShim>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CHostageExpresserShim)instance, path, ref buffer);
        }
        case "CHostageRescueZone":
        {
            var decoder = GetDecoder<CHostageRescueZone>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CHostageRescueZone)instance, path, ref buffer);
        }
        case "CHostageRescueZoneShim":
        {
            var decoder = GetDecoder<CHostageRescueZoneShim>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CHostageRescueZoneShim)instance, path, ref buffer);
        }
        case "CIncendiaryGrenade":
        {
            var decoder = GetDecoder<CIncendiaryGrenade>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CIncendiaryGrenade)instance, path, ref buffer);
        }
        case "CInferno":
        {
            var decoder = GetDecoder<CInferno>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CInferno)instance, path, ref buffer);
        }
        case "CInfoInstructorHintHostageRescueZone":
        {
            var decoder = GetDecoder<CInfoInstructorHintHostageRescueZone>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CInfoInstructorHintHostageRescueZone)instance, path, ref buffer);
        }
        case "CInfoLadderDismount":
        {
            var decoder = GetDecoder<CInfoLadderDismount>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CInfoLadderDismount)instance, path, ref buffer);
        }
        case "CInfoOffscreenPanoramaTexture":
        {
            var decoder = GetDecoder<CInfoOffscreenPanoramaTexture>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CInfoOffscreenPanoramaTexture)instance, path, ref buffer);
        }
        case "CInfoVisibilityBox":
        {
            var decoder = GetDecoder<CInfoVisibilityBox>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CInfoVisibilityBox)instance, path, ref buffer);
        }
        case "CInfoWorldLayer":
        {
            var decoder = GetDecoder<CInfoWorldLayer>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CInfoWorldLayer)instance, path, ref buffer);
        }
        case "CItem":
        {
            var decoder = GetDecoder<CItem>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CItem)instance, path, ref buffer);
        }
        case "CItem_Healthshot":
        {
            var decoder = GetDecoder<CItem_Healthshot>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CItem_Healthshot)instance, path, ref buffer);
        }
        case "CItemDogtags":
        {
            var decoder = GetDecoder<CItemDogtags>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CItemDogtags)instance, path, ref buffer);
        }
        case "CKnife":
        {
            var decoder = GetDecoder<CKnife>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CKnife)instance, path, ref buffer);
        }
        case "CLightComponent":
        {
            var decoder = GetDecoder<CLightComponent>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CLightComponent)instance, path, ref buffer);
        }
        case "CLightDirectionalEntity":
        {
            var decoder = GetDecoder<CLightDirectionalEntity>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CLightDirectionalEntity)instance, path, ref buffer);
        }
        case "CLightEntity":
        {
            var decoder = GetDecoder<CLightEntity>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CLightEntity)instance, path, ref buffer);
        }
        case "CLightEnvironmentEntity":
        {
            var decoder = GetDecoder<CLightEnvironmentEntity>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CLightEnvironmentEntity)instance, path, ref buffer);
        }
        case "CLightGlow":
        {
            var decoder = GetDecoder<CLightGlow>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CLightGlow)instance, path, ref buffer);
        }
        case "CLightOrthoEntity":
        {
            var decoder = GetDecoder<CLightOrthoEntity>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CLightOrthoEntity)instance, path, ref buffer);
        }
        case "CLightSpotEntity":
        {
            var decoder = GetDecoder<CLightSpotEntity>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CLightSpotEntity)instance, path, ref buffer);
        }
        case "CMapVetoPickController":
        {
            var decoder = GetDecoder<CMapVetoPickController>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CMapVetoPickController)instance, path, ref buffer);
        }
        case "CMelee":
        {
            var decoder = GetDecoder<CMelee>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CMelee)instance, path, ref buffer);
        }
        case "CModelPointEntity":
        {
            var decoder = GetDecoder<CModelPointEntity>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CModelPointEntity)instance, path, ref buffer);
        }
        case "CModelState":
        {
            var decoder = GetDecoder<CModelState>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CModelState)instance, path, ref buffer);
        }
        case "CMolotovGrenade":
        {
            var decoder = GetDecoder<CMolotovGrenade>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CMolotovGrenade)instance, path, ref buffer);
        }
        case "CMolotovProjectile":
        {
            var decoder = GetDecoder<CMolotovProjectile>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CMolotovProjectile)instance, path, ref buffer);
        }
        case "CMultiplayRules":
        {
            var decoder = GetDecoder<CMultiplayRules>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CMultiplayRules)instance, path, ref buffer);
        }
        case "CNetworkedSequenceOperation":
        {
            var decoder = GetDecoder<CNetworkedSequenceOperation>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CNetworkedSequenceOperation)instance, path, ref buffer);
        }
        case "CNetworkOriginCellCoordQuantizedVector":
        {
            var decoder = GetDecoder<CNetworkOriginCellCoordQuantizedVector>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CNetworkOriginCellCoordQuantizedVector)instance, path, ref buffer);
        }
        case "CNetworkVelocityVector":
        {
            var decoder = GetDecoder<CNetworkVelocityVector>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CNetworkVelocityVector)instance, path, ref buffer);
        }
        case "CNetworkViewOffsetVector":
        {
            var decoder = GetDecoder<CNetworkViewOffsetVector>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CNetworkViewOffsetVector)instance, path, ref buffer);
        }
        case "COmniLight":
        {
            var decoder = GetDecoder<COmniLight>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((COmniLight)instance, path, ref buffer);
        }
        case "CountdownTimer":
        {
            var decoder = GetDecoder<CountdownTimer>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CountdownTimer)instance, path, ref buffer);
        }
        case "CParticleSystem":
        {
            var decoder = GetDecoder<CParticleSystem>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CParticleSystem)instance, path, ref buffer);
        }
        case "CPathParticleRope":
        {
            var decoder = GetDecoder<CPathParticleRope>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPathParticleRope)instance, path, ref buffer);
        }
        case "CPhysBox":
        {
            var decoder = GetDecoder<CPhysBox>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPhysBox)instance, path, ref buffer);
        }
        case "CPhysicsProp":
        {
            var decoder = GetDecoder<CPhysicsProp>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPhysicsProp)instance, path, ref buffer);
        }
        case "CPhysicsPropMultiplayer":
        {
            var decoder = GetDecoder<CPhysicsPropMultiplayer>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPhysicsPropMultiplayer)instance, path, ref buffer);
        }
        case "CPhysMagnet":
        {
            var decoder = GetDecoder<CPhysMagnet>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPhysMagnet)instance, path, ref buffer);
        }
        case "CPlantedC4":
        {
            var decoder = GetDecoder<CPlantedC4>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPlantedC4)instance, path, ref buffer);
        }
        case "CPlayer_AutoaimServices":
        {
            var decoder = GetDecoder<CPlayer_AutoaimServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPlayer_AutoaimServices)instance, path, ref buffer);
        }
        case "CPlayer_CameraServices":
        {
            var decoder = GetDecoder<CPlayer_CameraServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPlayer_CameraServices)instance, path, ref buffer);
        }
        case "CPlayer_FlashlightServices":
        {
            var decoder = GetDecoder<CPlayer_FlashlightServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPlayer_FlashlightServices)instance, path, ref buffer);
        }
        case "CPlayer_ItemServices":
        {
            var decoder = GetDecoder<CPlayer_ItemServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPlayer_ItemServices)instance, path, ref buffer);
        }
        case "CPlayer_MovementServices":
        {
            var decoder = GetDecoder<CPlayer_MovementServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPlayer_MovementServices)instance, path, ref buffer);
        }
        case "CPlayer_MovementServices_Humanoid":
        {
            var decoder = GetDecoder<CPlayer_MovementServices_Humanoid>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPlayer_MovementServices_Humanoid)instance, path, ref buffer);
        }
        case "CPlayer_ObserverServices":
        {
            var decoder = GetDecoder<CPlayer_ObserverServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPlayer_ObserverServices)instance, path, ref buffer);
        }
        case "CPlayer_UseServices":
        {
            var decoder = GetDecoder<CPlayer_UseServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPlayer_UseServices)instance, path, ref buffer);
        }
        case "CPlayer_ViewModelServices":
        {
            var decoder = GetDecoder<CPlayer_ViewModelServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPlayer_ViewModelServices)instance, path, ref buffer);
        }
        case "CPlayer_WaterServices":
        {
            var decoder = GetDecoder<CPlayer_WaterServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPlayer_WaterServices)instance, path, ref buffer);
        }
        case "CPlayer_WeaponServices":
        {
            var decoder = GetDecoder<CPlayer_WeaponServices>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPlayer_WeaponServices)instance, path, ref buffer);
        }
        case "CPlayerControllerComponent":
        {
            var decoder = GetDecoder<CPlayerControllerComponent>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPlayerControllerComponent)instance, path, ref buffer);
        }
        case "CPlayerPawnComponent":
        {
            var decoder = GetDecoder<CPlayerPawnComponent>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPlayerPawnComponent)instance, path, ref buffer);
        }
        case "CPlayerPing":
        {
            var decoder = GetDecoder<CPlayerPing>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPlayerPing)instance, path, ref buffer);
        }
        case "CPlayerSprayDecal":
        {
            var decoder = GetDecoder<CPlayerSprayDecal>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPlayerSprayDecal)instance, path, ref buffer);
        }
        case "CPlayerVisibility":
        {
            var decoder = GetDecoder<CPlayerVisibility>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPlayerVisibility)instance, path, ref buffer);
        }
        case "CPointCamera":
        {
            var decoder = GetDecoder<CPointCamera>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPointCamera)instance, path, ref buffer);
        }
        case "CPointClientUIDialog":
        {
            var decoder = GetDecoder<CPointClientUIDialog>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPointClientUIDialog)instance, path, ref buffer);
        }
        case "CPointClientUIWorldPanel":
        {
            var decoder = GetDecoder<CPointClientUIWorldPanel>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPointClientUIWorldPanel)instance, path, ref buffer);
        }
        case "CPointClientUIWorldTextPanel":
        {
            var decoder = GetDecoder<CPointClientUIWorldTextPanel>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPointClientUIWorldTextPanel)instance, path, ref buffer);
        }
        case "CPointCommentaryNode":
        {
            var decoder = GetDecoder<CPointCommentaryNode>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPointCommentaryNode)instance, path, ref buffer);
        }
        case "CPointEntity":
        {
            var decoder = GetDecoder<CPointEntity>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPointEntity)instance, path, ref buffer);
        }
        case "CPointValueRemapper":
        {
            var decoder = GetDecoder<CPointValueRemapper>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPointValueRemapper)instance, path, ref buffer);
        }
        case "CPointWorldText":
        {
            var decoder = GetDecoder<CPointWorldText>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPointWorldText)instance, path, ref buffer);
        }
        case "CPostProcessingVolume":
        {
            var decoder = GetDecoder<CPostProcessingVolume>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPostProcessingVolume)instance, path, ref buffer);
        }
        case "CPrecipitation":
        {
            var decoder = GetDecoder<CPrecipitation>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPrecipitation)instance, path, ref buffer);
        }
        case "CPrecipitationBlocker":
        {
            var decoder = GetDecoder<CPrecipitationBlocker>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPrecipitationBlocker)instance, path, ref buffer);
        }
        case "CPredictedViewModel":
        {
            var decoder = GetDecoder<CPredictedViewModel>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CPredictedViewModel)instance, path, ref buffer);
        }
        case "CRagdollManager":
        {
            var decoder = GetDecoder<CRagdollManager>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CRagdollManager)instance, path, ref buffer);
        }
        case "CRagdollProp":
        {
            var decoder = GetDecoder<CRagdollProp>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CRagdollProp)instance, path, ref buffer);
        }
        case "CRagdollPropAttached":
        {
            var decoder = GetDecoder<CRagdollPropAttached>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CRagdollPropAttached)instance, path, ref buffer);
        }
        case "CRectLight":
        {
            var decoder = GetDecoder<CRectLight>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CRectLight)instance, path, ref buffer);
        }
        case "CRenderComponent":
        {
            var decoder = GetDecoder<CRenderComponent>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CRenderComponent)instance, path, ref buffer);
        }
        case "CRetakeGameRules":
        {
            var decoder = GetDecoder<CRetakeGameRules>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CRetakeGameRules)instance, path, ref buffer);
        }
        case "CRopeKeyframe":
        {
            var decoder = GetDecoder<CRopeKeyframe>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CRopeKeyframe)instance, path, ref buffer);
        }
        case "CSceneEntity":
        {
            var decoder = GetDecoder<CSceneEntity>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSceneEntity)instance, path, ref buffer);
        }
        case "CScriptComponent":
        {
            var decoder = GetDecoder<CScriptComponent>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CScriptComponent)instance, path, ref buffer);
        }
        case "CSensorGrenade":
        {
            var decoder = GetDecoder<CSensorGrenade>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSensorGrenade)instance, path, ref buffer);
        }
        case "CSensorGrenadeProjectile":
        {
            var decoder = GetDecoder<CSensorGrenadeProjectile>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSensorGrenadeProjectile)instance, path, ref buffer);
        }
        case "CShatterGlassShardPhysics":
        {
            var decoder = GetDecoder<CShatterGlassShardPhysics>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CShatterGlassShardPhysics)instance, path, ref buffer);
        }
        case "CSkeletonAnimationController":
        {
            var decoder = GetDecoder<CSkeletonAnimationController>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSkeletonAnimationController)instance, path, ref buffer);
        }
        case "CSkeletonInstance":
        {
            var decoder = GetDecoder<CSkeletonInstance>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSkeletonInstance)instance, path, ref buffer);
        }
        case "CSkyCamera":
        {
            var decoder = GetDecoder<CSkyCamera>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSkyCamera)instance, path, ref buffer);
        }
        case "CSMatchStats_t":
        {
            var decoder = GetDecoder<CSMatchStats_t>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSMatchStats_t)instance, path, ref buffer);
        }
        case "CSmokeGrenade":
        {
            var decoder = GetDecoder<CSmokeGrenade>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSmokeGrenade)instance, path, ref buffer);
        }
        case "CSmokeGrenadeProjectile":
        {
            var decoder = GetDecoder<CSmokeGrenadeProjectile>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSmokeGrenadeProjectile)instance, path, ref buffer);
        }
        case "CSoundAreaEntityBase":
        {
            var decoder = GetDecoder<CSoundAreaEntityBase>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSoundAreaEntityBase)instance, path, ref buffer);
        }
        case "CSoundAreaEntityOrientedBox":
        {
            var decoder = GetDecoder<CSoundAreaEntityOrientedBox>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSoundAreaEntityOrientedBox)instance, path, ref buffer);
        }
        case "CSoundAreaEntitySphere":
        {
            var decoder = GetDecoder<CSoundAreaEntitySphere>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSoundAreaEntitySphere)instance, path, ref buffer);
        }
        case "CSoundOpvarSetAABBEntity":
        {
            var decoder = GetDecoder<CSoundOpvarSetAABBEntity>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSoundOpvarSetAABBEntity)instance, path, ref buffer);
        }
        case "CSoundOpvarSetOBBEntity":
        {
            var decoder = GetDecoder<CSoundOpvarSetOBBEntity>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSoundOpvarSetOBBEntity)instance, path, ref buffer);
        }
        case "CSoundOpvarSetOBBWindEntity":
        {
            var decoder = GetDecoder<CSoundOpvarSetOBBWindEntity>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSoundOpvarSetOBBWindEntity)instance, path, ref buffer);
        }
        case "CSoundOpvarSetPathCornerEntity":
        {
            var decoder = GetDecoder<CSoundOpvarSetPathCornerEntity>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSoundOpvarSetPathCornerEntity)instance, path, ref buffer);
        }
        case "CSoundOpvarSetPointBase":
        {
            var decoder = GetDecoder<CSoundOpvarSetPointBase>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSoundOpvarSetPointBase)instance, path, ref buffer);
        }
        case "CSoundOpvarSetPointEntity":
        {
            var decoder = GetDecoder<CSoundOpvarSetPointEntity>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSoundOpvarSetPointEntity)instance, path, ref buffer);
        }
        case "CSPerRoundStats_t":
        {
            var decoder = GetDecoder<CSPerRoundStats_t>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSPerRoundStats_t)instance, path, ref buffer);
        }
        case "CSpotlightEnd":
        {
            var decoder = GetDecoder<CSpotlightEnd>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSpotlightEnd)instance, path, ref buffer);
        }
        case "CSprite":
        {
            var decoder = GetDecoder<CSprite>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSprite)instance, path, ref buffer);
        }
        case "CSpriteOriented":
        {
            var decoder = GetDecoder<CSpriteOriented>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSpriteOriented)instance, path, ref buffer);
        }
        case "CSun":
        {
            var decoder = GetDecoder<CSun>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CSun)instance, path, ref buffer);
        }
        case "CTablet":
        {
            var decoder = GetDecoder<CTablet>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CTablet)instance, path, ref buffer);
        }
        case "CTeam":
        {
            var decoder = GetDecoder<CTeam>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CTeam)instance, path, ref buffer);
        }
        case "CTeamplayRules":
        {
            var decoder = GetDecoder<CTeamplayRules>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CTeamplayRules)instance, path, ref buffer);
        }
        case "CTextureBasedAnimatable":
        {
            var decoder = GetDecoder<CTextureBasedAnimatable>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CTextureBasedAnimatable)instance, path, ref buffer);
        }
        case "CTonemapController2":
        {
            var decoder = GetDecoder<CTonemapController2>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CTonemapController2)instance, path, ref buffer);
        }
        case "CTouchExpansionComponent":
        {
            var decoder = GetDecoder<CTouchExpansionComponent>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CTouchExpansionComponent)instance, path, ref buffer);
        }
        case "CTriggerBuoyancy":
        {
            var decoder = GetDecoder<CTriggerBuoyancy>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CTriggerBuoyancy)instance, path, ref buffer);
        }
        case "CTriggerTripWire":
        {
            var decoder = GetDecoder<CTriggerTripWire>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CTriggerTripWire)instance, path, ref buffer);
        }
        case "CTriggerVolume":
        {
            var decoder = GetDecoder<CTriggerVolume>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CTriggerVolume)instance, path, ref buffer);
        }
        case "CTripWireFire":
        {
            var decoder = GetDecoder<CTripWireFire>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CTripWireFire)instance, path, ref buffer);
        }
        case "CTripWireFireProjectile":
        {
            var decoder = GetDecoder<CTripWireFireProjectile>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CTripWireFireProjectile)instance, path, ref buffer);
        }
        case "CVoteController":
        {
            var decoder = GetDecoder<CVoteController>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CVoteController)instance, path, ref buffer);
        }
        case "CWaterBullet":
        {
            var decoder = GetDecoder<CWaterBullet>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWaterBullet)instance, path, ref buffer);
        }
        case "CWeaponAug":
        {
            var decoder = GetDecoder<CWeaponAug>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponAug)instance, path, ref buffer);
        }
        case "CWeaponAWP":
        {
            var decoder = GetDecoder<CWeaponAWP>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponAWP)instance, path, ref buffer);
        }
        case "CWeaponBaseItem":
        {
            var decoder = GetDecoder<CWeaponBaseItem>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponBaseItem)instance, path, ref buffer);
        }
        case "CWeaponBizon":
        {
            var decoder = GetDecoder<CWeaponBizon>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponBizon)instance, path, ref buffer);
        }
        case "CWeaponElite":
        {
            var decoder = GetDecoder<CWeaponElite>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponElite)instance, path, ref buffer);
        }
        case "CWeaponFamas":
        {
            var decoder = GetDecoder<CWeaponFamas>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponFamas)instance, path, ref buffer);
        }
        case "CWeaponFiveSeven":
        {
            var decoder = GetDecoder<CWeaponFiveSeven>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponFiveSeven)instance, path, ref buffer);
        }
        case "CWeaponG3SG1":
        {
            var decoder = GetDecoder<CWeaponG3SG1>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponG3SG1)instance, path, ref buffer);
        }
        case "CWeaponGalilAR":
        {
            var decoder = GetDecoder<CWeaponGalilAR>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponGalilAR)instance, path, ref buffer);
        }
        case "CWeaponGlock":
        {
            var decoder = GetDecoder<CWeaponGlock>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponGlock)instance, path, ref buffer);
        }
        case "CWeaponHKP2000":
        {
            var decoder = GetDecoder<CWeaponHKP2000>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponHKP2000)instance, path, ref buffer);
        }
        case "CWeaponM249":
        {
            var decoder = GetDecoder<CWeaponM249>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponM249)instance, path, ref buffer);
        }
        case "CWeaponM4A1":
        {
            var decoder = GetDecoder<CWeaponM4A1>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponM4A1)instance, path, ref buffer);
        }
        case "CWeaponMAC10":
        {
            var decoder = GetDecoder<CWeaponMAC10>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponMAC10)instance, path, ref buffer);
        }
        case "CWeaponMag7":
        {
            var decoder = GetDecoder<CWeaponMag7>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponMag7)instance, path, ref buffer);
        }
        case "CWeaponMP7":
        {
            var decoder = GetDecoder<CWeaponMP7>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponMP7)instance, path, ref buffer);
        }
        case "CWeaponMP9":
        {
            var decoder = GetDecoder<CWeaponMP9>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponMP9)instance, path, ref buffer);
        }
        case "CWeaponNegev":
        {
            var decoder = GetDecoder<CWeaponNegev>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponNegev)instance, path, ref buffer);
        }
        case "CWeaponNOVA":
        {
            var decoder = GetDecoder<CWeaponNOVA>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponNOVA)instance, path, ref buffer);
        }
        case "CWeaponP250":
        {
            var decoder = GetDecoder<CWeaponP250>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponP250)instance, path, ref buffer);
        }
        case "CWeaponP90":
        {
            var decoder = GetDecoder<CWeaponP90>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponP90)instance, path, ref buffer);
        }
        case "CWeaponSawedoff":
        {
            var decoder = GetDecoder<CWeaponSawedoff>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponSawedoff)instance, path, ref buffer);
        }
        case "CWeaponSCAR20":
        {
            var decoder = GetDecoder<CWeaponSCAR20>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponSCAR20)instance, path, ref buffer);
        }
        case "CWeaponSG556":
        {
            var decoder = GetDecoder<CWeaponSG556>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponSG556)instance, path, ref buffer);
        }
        case "CWeaponShield":
        {
            var decoder = GetDecoder<CWeaponShield>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponShield)instance, path, ref buffer);
        }
        case "CWeaponSSG08":
        {
            var decoder = GetDecoder<CWeaponSSG08>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponSSG08)instance, path, ref buffer);
        }
        case "CWeaponTaser":
        {
            var decoder = GetDecoder<CWeaponTaser>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponTaser)instance, path, ref buffer);
        }
        case "CWeaponTec9":
        {
            var decoder = GetDecoder<CWeaponTec9>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponTec9)instance, path, ref buffer);
        }
        case "CWeaponUMP45":
        {
            var decoder = GetDecoder<CWeaponUMP45>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponUMP45)instance, path, ref buffer);
        }
        case "CWeaponXM1014":
        {
            var decoder = GetDecoder<CWeaponXM1014>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponXM1014)instance, path, ref buffer);
        }
        case "CWeaponZoneRepulsor":
        {
            var decoder = GetDecoder<CWeaponZoneRepulsor>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWeaponZoneRepulsor)instance, path, ref buffer);
        }
        case "CWorld":
        {
            var decoder = GetDecoder<CWorld>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((CWorld)instance, path, ref buffer);
        }
        case "EntityRenderAttribute_t":
        {
            var decoder = GetDecoder<EntityRenderAttribute_t>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((EntityRenderAttribute_t)instance, path, ref buffer);
        }
        case "EntitySpottedState_t":
        {
            var decoder = GetDecoder<EntitySpottedState_t>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((EntitySpottedState_t)instance, path, ref buffer);
        }
        case "fogparams_t":
        {
            var decoder = GetDecoder<fogparams_t>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((fogparams_t)instance, path, ref buffer);
        }
        case "fogplayerparams_t":
        {
            var decoder = GetDecoder<fogplayerparams_t>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((fogplayerparams_t)instance, path, ref buffer);
        }
        case "IEconItemInterface":
        {
            var decoder = GetDecoder<IEconItemInterface>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((IEconItemInterface)instance, path, ref buffer);
        }
        case "InfoForResourceTypeCModel":
        {
            var decoder = GetDecoder<InfoForResourceTypeCModel>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((InfoForResourceTypeCModel)instance, path, ref buffer);
        }
        case "InfoForResourceTypeCPostProcessingResource":
        {
            var decoder = GetDecoder<InfoForResourceTypeCPostProcessingResource>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((InfoForResourceTypeCPostProcessingResource)instance, path, ref buffer);
        }
        case "InfoForResourceTypeCTextureBase":
        {
            var decoder = GetDecoder<InfoForResourceTypeCTextureBase>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((InfoForResourceTypeCTextureBase)instance, path, ref buffer);
        }
        case "InfoForResourceTypeIMaterial2":
        {
            var decoder = GetDecoder<InfoForResourceTypeIMaterial2>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((InfoForResourceTypeIMaterial2)instance, path, ref buffer);
        }
        case "InfoForResourceTypeIParticleSystemDefinition":
        {
            var decoder = GetDecoder<InfoForResourceTypeIParticleSystemDefinition>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((InfoForResourceTypeIParticleSystemDefinition)instance, path, ref buffer);
        }
        case "ISkeletonAnimationController":
        {
            var decoder = GetDecoder<ISkeletonAnimationController>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((ISkeletonAnimationController)instance, path, ref buffer);
        }
        case "PhysicsRagdollPose_t":
        {
            var decoder = GetDecoder<PhysicsRagdollPose_t>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((PhysicsRagdollPose_t)instance, path, ref buffer);
        }
        case "SellbackPurchaseEntry_t":
        {
            var decoder = GetDecoder<SellbackPurchaseEntry_t>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((SellbackPurchaseEntry_t)instance, path, ref buffer);
        }
        case "shard_model_desc_t":
        {
            var decoder = GetDecoder<shard_model_desc_t>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((shard_model_desc_t)instance, path, ref buffer);
        }
        case "sky3dparams_t":
        {
            var decoder = GetDecoder<sky3dparams_t>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((sky3dparams_t)instance, path, ref buffer);
        }
        case "ViewAngleServerChange_t":
        {
            var decoder = GetDecoder<ViewAngleServerChange_t>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((ViewAngleServerChange_t)instance, path, ref buffer);
        }
        case "VPhysicsCollisionAttribute_t":
        {
            var decoder = GetDecoder<VPhysicsCollisionAttribute_t>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((VPhysicsCollisionAttribute_t)instance, path, ref buffer);
        }
        case "WeaponPurchaseCount_t":
        {
            var decoder = GetDecoder<WeaponPurchaseCount_t>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((WeaponPurchaseCount_t)instance, path, ref buffer);
        }
        case "WeaponPurchaseTracker_t":
        {
            var decoder = GetDecoder<WeaponPurchaseTracker_t>(new SerializerKey(className, 0));
            return (object instance, ReadOnlySpan<int> path, ref BitBuffer buffer) =>
                decoder((WeaponPurchaseTracker_t)instance, path, ref buffer);
        }
        default:
            throw new NotImplementedException($"Unknown send node class: {className}");
        }
    }
}
